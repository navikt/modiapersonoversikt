/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/rest/v3/varsler': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentAlleVarsler'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v3/person': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentPersondata'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v3/person/identer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentIdenter'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v3/person/aktorid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentAktorId'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/tiltakspenger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentTiltakspenger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/sykepenger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentSykepenger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/pleiepenger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentPleiepenger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/pensjon': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentPensjonSaker'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/pensjon/{sakId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentPensjonSakEtteroppgjorshistorikk'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/ytelse/foreldrepenger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentForeldrepenger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/utbetaling': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hent'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/tilgang': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['harTilgang'];
        put?: never;
        post: operations['harTilgang_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/saker/v2/sakstema': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentSakstemaSoknadsstatus'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/saker/dokument/{journalpostId}/{dokumentreferanse}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentDokument'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/person/kontaktinformasjon': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentKontaktinformasjon'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/oppgaver/tildelt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['finnTildelte'];
        put?: never;
        post: operations['finnTildelte_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/oppfolging': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hent_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/oppfolging/ytelserogkontrakter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentUtvidetOppf'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/oppfolging/hent-gjeldende-14a-vedtak': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentGjeldende14aVedtak'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/journalforing/{traadId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['knyttTilSak'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/journalforing/saker/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentSaker'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/enheter/oppgavebehandlere/v2/foreslatte': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentBehandlendeEnhet'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/dialog/sendmelding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['sendMeldinger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/dialog/meldinger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['hentMeldinger'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/dialog/fortsett/opprett': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['startFortsettDialog'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/dialog/fortsett/ferdigstill': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['sendFortsettDialog'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/personsok/v3': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['sokPdlV3'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/journalforing/{fnr}/{traadId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @deprecated */
        post: operations['knyttTilSak_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/internal/pdlsok': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['pdlPersonsok'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogoppgave/v2/opprettskjermetoppgave': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['opprettSkjermetOppgave'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogoppgave/v2/opprett': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['opprettOppgave'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogmerking/sladding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['sendTilSladding'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogmerking/lukk-traad': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['lukkTraad'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogmerking/feilsendt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['merkSomFeilsendt'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogmerking/avsluttgosysoppgave': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations['avsluttGosysOppgave'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialog/{fnr}/sendmelding': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @deprecated */
        post: operations['sendMeldinger_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialog/{fnr}/fortsett/opprett': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @deprecated */
        post: operations['startFortsettDialog_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialog/{fnr}/fortsett/ferdigstill': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @deprecated */
        post: operations['sendFortsettDialog_1'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/tilgang/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['authIntropection'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/person/{fnr}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentPersondata_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/person/{fnr}/identer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentIdenter_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/person/{fnr}/aktorid': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentAktorId_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/oppgaver/oppgavedata/{oppgaveId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getOppgaveData'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/enheter/{enhetId}/ansatte': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentAnsattePaaEnhet'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/v2/enheter/oppgavebehandlere/alle': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentAlleEnheterForOppgave'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/utbetaling/{fnr}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hent_2'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/tilgang': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['harTilgang_2'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/tilgang/{fnr}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['harTilgang_3'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/tilgang/auth': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['authIntropection_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/saker/{fnr}/v2/sakstema': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentSakstemaSoknadsstatus_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/saker/{fnr}/dokument/{journalpostId}/{dokumentreferanse}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentDokument_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/person/{fnr}/kontaktinformasjon': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentKontaktinformasjon_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/oppgaver/tildelt': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['finnTildelte_2'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/oppgaver/tildelt/{fnr}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['finnTildelte_3'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/oppgaver/oppgavedata/{oppgaveId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['getOppgaveData_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/oppfolging/{fnr}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hent_3'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/oppfolging/{fnr}/ytelserogkontrakter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentUtvidetOppf_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/journalforing/{fnr}/saker/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentSaker_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/internal/typeanalyzer': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTypeanalyzerStats'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/internal/typeanalyzer/{name}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['getTypedefinition'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/internal/tokens': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentSystembrukerToken'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/hode/me': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentSaksbehandler'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/hode/enheter': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentEnheter'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/featuretoggle/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentMedId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/featuretoggle': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentToggles'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/featuretoggle/': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentToggles_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/enheter/{enhetId}/ansatte': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentAnsattePaaEnhet_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/enheter/oppgavebehandlere/v2/foreslatte': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentBehandlendeEnhet_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/enheter/oppgavebehandlere/alle': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentAlleEnheterForOppgave_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogoppgave/v2/tema': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentAlleTema'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialogmerking/sladdearsaker/{kjedeid}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentSladdeArsaker'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/dialog/{fnr}/meldinger': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: operations['hentMeldinger_1'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/rest/baseurls/v2': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['hentV2'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/internal/selftest': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['selftest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/internal/isReady': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['isReady'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/internal/isAlive': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['isAlive'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        FnrRequest: {
            fnr: string;
        };
        EksternVarslingInfo: {
            sendt: boolean;
            renotifikasjonSendt: boolean;
            prefererteKanaler: string[];
            sendteKanaler: string[];
            historikk: components['schemas']['HistorikkEntry'][];
        };
        Event: {
            fodselsnummer: string;
            grupperingsId?: string;
            eventId: string;
            /** Format: date-time */
            forstBehandlet: string;
            produsent: string;
            /** Format: int32 */
            sikkerhetsnivaa: number;
            /** Format: date-time */
            sistOppdatert: string;
            tekst: string;
            link: string;
            aktiv: boolean;
            eksternVarslingSendt: boolean;
            eksternVarslingKanaler: string[];
            eksternVarsling?: components['schemas']['EksternVarslingInfo'];
            varslingsTidspunkt?: components['schemas']['VarslingsTidspunkt'];
        };
        FeiletVarsling: {
            /** Format: date-time */
            tidspunkt: string;
            feilmelding: string;
            kanal?: string;
        };
        HistorikkEntry: {
            melding: string;
            status: string;
            /** Format: int64 */
            distribusjonsId?: number;
            kanal?: string;
            renotifikasjon?: boolean;
            /** Format: date-time */
            tidspunkt: string;
        };
        Result: {
            feil: string[];
            varsler: components['schemas']['Event'][];
        };
        VarslingsTidspunkt: {
            sendt: boolean;
            /** Format: date-time */
            tidspunkt?: string;
            renotifikasjonSendt: boolean;
            /** Format: date-time */
            renotifikasjonTidspunkt?: string;
            sendteKanaler: string[];
            renotifikasjonsKanaler: string[];
            harFeilteVarslinger: boolean;
            harFeilteRevarslinger: boolean;
            feilteVarsliner: components['schemas']['FeiletVarsling'][];
            feilteRevarslinger: components['schemas']['FeiletVarsling'][];
        };
        Adressat: {
            advokatSomAdressat?: components['schemas']['AdvokatSomAdressat'];
            personSomAdressat?: components['schemas']['PersonSomAdressat'];
            organisasjonSomAdressat?: components['schemas']['OrganisasjonSomAdressat'];
        };
        Adresse: {
            coAdresse?: string;
            linje1: string;
            linje2?: string;
            linje3?: string;
            /** Format: date */
            angittFlyttedato?: string;
            sistEndret?: components['schemas']['SistEndret'];
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
        };
        AdvokatSomAdressat: {
            kontaktperson: components['schemas']['Navn'];
            organisasjonsnavn?: string;
            organisasjonsnummer?: string;
        };
        Apningstid: {
            ukedag: string;
            apningstid: string;
        };
        Bankkonto: {
            kontonummer: string;
            banknavn?: string;
            sistEndret?: components['schemas']['SistEndret'];
            bankkode?: string;
            swift?: string;
            landkode?: components['schemas']['KodeBeskrivelseString'];
            adresse?: components['schemas']['Adresse'];
            valuta?: components['schemas']['KodeBeskrivelseString'];
            kilde?: string;
            opprettetAv: string;
        };
        Data: {
            feilendeSystemer: DataFeilendeSystemer[];
            person: components['schemas']['Person'];
        };
        DeltBosted: {
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
            adresse?: components['schemas']['Adresse'];
        };
        DigitalKontaktinformasjonTredjepartsperson: {
            reservasjon?: string;
            mobiltelefonnummer?: string;
        };
        Dodsbo: {
            adressat: components['schemas']['Adressat'];
            adresse: components['schemas']['Adresse'];
            /** Format: date */
            registrert: string;
            /** @enum {string} */
            skifteform: DodsboSkifteform;
            sistEndret?: components['schemas']['SistEndret'];
        };
        Enhet: {
            id: string;
            navn: string;
            publikumsmottak: components['schemas']['Publikumsmottak'][];
        };
        Fodested: {
            land?: components['schemas']['KodeBeskrivelseString'];
            kommune?: string;
            fodested?: string;
        };
        ForelderBarnRelasjon: {
            ident?: string;
            /** @enum {string} */
            rolle: ForelderBarnRelasjonRolle;
            navn: components['schemas']['Navn'][];
            fodselsdato: string[];
            kjonn: components['schemas']['KodeBeskrivelseKjonn'][];
            /** Format: int32 */
            alder?: number;
            adressebeskyttelse: components['schemas']['KodeBeskrivelseAdresseBeskyttelse'][];
            harSammeAdresse: boolean;
            dodsdato: string[];
        };
        Foreldreansvar: {
            ansvar: string;
            ansvarlig?: components['schemas']['NavnOgIdent'];
            ansvarsubject?: components['schemas']['NavnOgIdent'];
        };
        Fullmakt: {
            motpartsPersonident: string;
            motpartsPersonNavn: components['schemas']['Navn'];
            /** @enum {string} */
            motpartsRolle: FullmaktMotpartsRolle;
            omrade: components['schemas']['OmraadeMedHandlingString'][];
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
            digitalKontaktinformasjonTredjepartsperson?: components['schemas']['DigitalKontaktinformasjonTredjepartsperson'];
            kilde?: string;
        };
        GyldighetsPeriode: {
            /** Format: date */
            gyldigFraOgMed?: string;
            /** Format: date */
            gyldigTilOgMed?: string;
        };
        KodeBeskrivelseAdresseBeskyttelse: {
            /** @enum {string} */
            kode: KodeBeskrivelseAdresseBeskyttelseKode;
            beskrivelse: string;
        };
        KodeBeskrivelseKjonn: {
            /** @enum {string} */
            kode: KodeBeskrivelseKjonnKode;
            beskrivelse: string;
        };
        KodeBeskrivelsePersonStatus: {
            /** @enum {string} */
            kode: KodeBeskrivelsePersonStatusKode;
            beskrivelse: string;
        };
        KodeBeskrivelseSivilstandType: {
            /** @enum {string} */
            kode: KodeBeskrivelseSivilstandTypeKode;
            beskrivelse: string;
        };
        KodeBeskrivelseString: {
            kode: string;
            beskrivelse: string;
        };
        KontaktInformasjon: {
            erManuell?: boolean;
            erReservert?: boolean;
            epost?: components['schemas']['Verdi'];
            mobil?: components['schemas']['Verdi'];
        };
        Navn: {
            fornavn: string;
            mellomnavn?: string;
            etternavn: string;
        };
        NavnOgIdent: {
            navn?: components['schemas']['Navn'];
            ident?: string;
        };
        OmraadeMedHandlingString: {
            omraade: components['schemas']['KodeBeskrivelseString'];
            handling: OmraadeMedHandlingStringHandling[];
        };
        OrganisasjonSomAdressat: {
            kontaktperson?: components['schemas']['Navn'];
            organisasjonsnavn: string;
            organisasjonsnummer?: string;
        };
        Person: {
            fnr: string;
            personIdent: string;
            navn: components['schemas']['Navn'][];
            kjonn: components['schemas']['KodeBeskrivelseKjonn'][];
            fodselsdato: string[];
            fodested: components['schemas']['Fodested'][];
            geografiskTilknytning?: string;
            /** Format: int32 */
            alder?: number;
            dodsdato: string[];
            bostedAdresse: components['schemas']['Adresse'][];
            kontaktAdresse: components['schemas']['Adresse'][];
            oppholdsAdresse: components['schemas']['Adresse'][];
            navEnhet?: components['schemas']['Enhet'];
            statsborgerskap: components['schemas']['Statsborgerskap'][];
            adressebeskyttelse: components['schemas']['KodeBeskrivelseAdresseBeskyttelse'][];
            sikkerhetstiltak: components['schemas']['Sikkerhetstiltak'][];
            /** @enum {string} */
            erEgenAnsatt: PersonErEgenAnsatt;
            personstatus: components['schemas']['KodeBeskrivelsePersonStatus'][];
            sivilstand: components['schemas']['Sivilstand'][];
            foreldreansvar: components['schemas']['Foreldreansvar'][];
            deltBosted: components['schemas']['DeltBosted'][];
            dodsbo: components['schemas']['Dodsbo'][];
            fullmakt: components['schemas']['Fullmakt'][];
            vergemal: components['schemas']['Verge'][];
            tilrettelagtKommunikasjon: components['schemas']['TilrettelagtKommunikasjon'];
            telefonnummer: components['schemas']['Telefon'][];
            kontaktInformasjon: components['schemas']['KontaktInformasjon'];
            bankkonto?: components['schemas']['Bankkonto'];
            forelderBarnRelasjon: components['schemas']['ForelderBarnRelasjon'][];
        };
        PersonSomAdressat: {
            fnr?: string;
            navn: components['schemas']['Navn'][];
            /** Format: date */
            fodselsdato?: string;
        };
        Publikumsmottak: {
            besoksadresse: components['schemas']['Adresse'];
            apningstider: components['schemas']['Apningstid'][];
        };
        Sikkerhetstiltak: {
            type: string;
            beskrivelse: string;
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
        };
        SistEndret: {
            ident: string;
            /** Format: date-time */
            tidspunkt: string;
            system: string;
            kilde: string;
        };
        Sivilstand: {
            type: components['schemas']['KodeBeskrivelseSivilstandType'];
            /** Format: date */
            gyldigFraOgMed?: string;
            sivilstandRelasjon?: components['schemas']['SivilstandRelasjon'];
        };
        SivilstandRelasjon: {
            fnr: string;
            navn: components['schemas']['Navn'][];
            /** Format: int32 */
            alder?: number;
            adressebeskyttelse: components['schemas']['KodeBeskrivelseAdresseBeskyttelse'][];
            harSammeAdresse: boolean;
            dodsdato: string[];
        };
        Statsborgerskap: {
            land: components['schemas']['KodeBeskrivelseString'];
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
        };
        Telefon: {
            retningsnummer?: components['schemas']['KodeBeskrivelseString'];
            identifikator: string;
            sistEndret?: components['schemas']['SistEndret'];
            /** Format: int32 */
            prioritet: number;
        };
        TilrettelagtKommunikasjon: {
            talesprak: components['schemas']['KodeBeskrivelseString'][];
            tegnsprak: components['schemas']['KodeBeskrivelseString'][];
        };
        Verdi: {
            value?: string;
            /** Format: date */
            sistOppdatert?: string;
            /** Format: date */
            sistVerifisert?: string;
        };
        Verge: {
            ident?: string;
            navn?: components['schemas']['Navn'];
            vergesakstype: string;
            omfang: string;
            tjenesteOppgaver?: string[];
            embete?: string;
            gyldighetsPeriode?: components['schemas']['GyldighetsPeriode'];
        };
        IdentInformasjon: {
            ident: string;
            /** @enum {string} */
            gruppe: IdentInformasjonGruppe;
            historisk: boolean;
        };
        Identliste: {
            identer: components['schemas']['IdentInformasjon'][];
        };
        FnrDatoRangeRequest: {
            fnr: string;
            fom?: string;
            tom?: string;
        };
        Barnetilleggperiode: {
            /** Format: int32 */
            antallBarn: number;
            periode: components['schemas']['Periode'];
        };
        Periode: {
            /** Format: date */
            fraOgMed: string;
            /** Format: date */
            tilOgMed: string;
        };
        VedtakPerioderResponseInner: {
            vedtakId: string;
            /** @enum {string} */
            rettighet: VedtakPerioderResponseInnerRettighet;
            periode: components['schemas']['Periode'];
            /** @enum {string} */
            kilde: VedtakPerioderResponseInnerKilde;
            barnetillegg?: components['schemas']['VedtakPerioderResponseInnerBarnetillegg'];
        };
        VedtakPerioderResponseInnerBarnetillegg: {
            perioder?: components['schemas']['Barnetilleggperiode'][];
        };
        Code: {
            code: string;
            decode: string;
        };
        PensjonSak: {
            /** Format: int64 */
            id: number;
            type?: components['schemas']['Code'];
            status?: components['schemas']['Code'];
            /** Format: date */
            fom?: string;
            /** Format: date */
            tom?: string;
            enhetId: string;
        };
        PensjonEtteroppgjorYtelse: {
            type?: components['schemas']['Code'];
            /** Format: int32 */
            inntekt?: number;
            /** Format: int32 */
            fradrag?: number;
            /** Format: int32 */
            inntektBruktIEtteroppgjor?: number;
            /** Format: int32 */
            avviksbelop?: number;
        };
        PensjonEtteroppgjorshistorikk: {
            /** Format: date */
            fom: string;
            /** Format: date */
            tom: string;
            resultat?: components['schemas']['Code'];
            /** Format: int32 */
            belop?: number;
            /** Format: date */
            vedtaksdato?: string;
            ar: string;
            ytelser: components['schemas']['PensjonEtteroppgjorYtelse'][];
        };
        Arbeidgiver: {
            orgnr: string;
            navn?: string;
        };
        Skatt: {
            /** Format: double */
            skattebelop: number;
        };
        Trekk: {
            trekktype: string;
            /** Format: double */
            trekkbelop: number;
            kreditor?: string;
        };
        Utbetaling: {
            posteringsdato: string;
            utbetalingsdato?: string;
            forfallsdato?: string;
            utbetaltTil?: string;
            erUtbetaltTilPerson: boolean;
            erUtbetaltTilOrganisasjon: boolean;
            erUtbetaltTilSamhandler: boolean;
            /** Format: double */
            nettobelop: number;
            melding?: string;
            metode: string;
            status: string;
            konto?: string;
            ytelser: components['schemas']['Ytelse'][];
        };
        UtbetalingerPeriodeDTO: {
            /** Format: date */
            startDato: string;
            /** Format: date */
            sluttDato: string;
        };
        UtbetalingerResponseDTO: {
            utbetalinger: components['schemas']['Utbetaling'][];
            periode: components['schemas']['UtbetalingerPeriodeDTO'];
        };
        Ytelse: {
            type?: string;
            ytelseskomponentListe: components['schemas']['YtelseKomponent'][];
            /** Format: double */
            ytelseskomponentersum: number;
            trekkListe: components['schemas']['Trekk'][];
            /** Format: double */
            trekksum: number;
            skattListe: components['schemas']['Skatt'][];
            /** Format: double */
            skattsum: number;
            periode?: components['schemas']['YtelsePeriode'];
            /** Format: double */
            nettobelop: number;
            bilagsnummer?: string;
            arbeidsgiver?: components['schemas']['Arbeidgiver'];
        };
        YtelseKomponent: {
            ytelseskomponenttype: string;
            /** Format: double */
            satsbelop?: number;
            satstype?: string;
            /** Format: double */
            satsantall?: number;
            /** Format: double */
            ytelseskomponentbelop: number;
        };
        YtelsePeriode: {
            start: string;
            slutt: string;
        };
        DenyCause: Record<string, never>;
        TilgangDTO: {
            harTilgang: boolean;
            ikkeTilgangArsak?: components['schemas']['DenyCause'];
            aktivIdent?: string;
        };
        Dokument: {
            tittel: string;
            dokumentreferanse?: string;
            kanVises: boolean;
            logiskDokument: boolean;
            skjerming?: string;
            erKassert: boolean;
            /** @enum {string} */
            dokumentStatus?: DokumentDokumentStatus;
        };
        Dokumentmetadata: {
            id: string;
            /** @enum {string} */
            retning: DokumentmetadataRetning;
            /** Format: date-time */
            dato: string;
            /** Format: date-time */
            lestDato?: string;
            navn: string;
            journalpostId: string;
            hoveddokument: components['schemas']['Dokument'];
            vedlegg: components['schemas']['Dokument'][];
            /** @enum {string} */
            avsender: DokumentmetadataAvsender;
            /** @enum {string} */
            mottaker: DokumentmetadataMottaker;
            tilhorendeSaksid: string;
            tilhorendeFagsaksid?: string;
            baksystem: DokumentmetadataBaksystem[];
            temakode: string;
            temakodeVisning: string;
            ettersending: boolean;
            erJournalfort: boolean;
            feil: components['schemas']['Feil'];
        };
        Feil: {
            inneholderFeil: boolean;
            /** @enum {string} */
            feilmelding?: FeilFeilmelding;
        };
        LocalDate: {
            /** Format: date */
            value?: string;
            /** Format: date */
            value$kotlinx_datetime: string;
            /** Format: int32 */
            monthNumber: number;
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            dayOfMonth: number;
            /** @enum {string} */
            month: LocalDateMonth;
            /** @enum {string} */
            dayOfWeek: LocalDateDayOfWeek;
            /** Format: int32 */
            dayOfYear: number;
        };
        LocalDateTime: {
            /** Format: date-time */
            value?: string;
            /** Format: date-time */
            value$kotlinx_datetime: string;
            /** Format: int32 */
            monthNumber: number;
            /** Format: int32 */
            nanosecond: number;
            time: components['schemas']['LocalTime'];
            /** Format: int32 */
            year: number;
            /** Format: int32 */
            dayOfMonth: number;
            /** Format: int32 */
            hour: number;
            /** Format: int32 */
            minute: number;
            /** Format: int32 */
            second: number;
            /** @enum {string} */
            month: LocalDateTimeMonth;
            /** @enum {string} */
            dayOfWeek: LocalDateTimeDayOfWeek;
            /** Format: int32 */
            dayOfYear: number;
            date: components['schemas']['LocalDate'];
        };
        LocalTime: {
            value?: components['schemas']['LocalTime'];
            value$kotlinx_datetime: components['schemas']['LocalTime'];
            /** Format: int32 */
            nanosecond: number;
            /** Format: int32 */
            hour: number;
            /** Format: int32 */
            minute: number;
            /** Format: int32 */
            second: number;
        };
        ResultatSoknadsstatus: {
            resultat: components['schemas']['SoknadsstatusSakstema'][];
        };
        Sak: {
            temakode: string;
            saksid: string;
            fagsaksnummer?: string;
            /** Format: date-time */
            avsluttet?: string;
            fagsystem: string;
            /** @enum {string} */
            baksystem: SakBaksystem;
        };
        Soknadsstatus: {
            /** Format: int32 */
            underBehandling: number;
            /** Format: int32 */
            ferdigBehandlet: number;
            /** Format: int32 */
            avbrutt: number;
            sistOppdatert?: components['schemas']['LocalDateTime'];
        };
        SoknadsstatusSakstema: {
            temakode: string;
            temanavn: string;
            erGruppert: boolean;
            soknadsstatus: components['schemas']['Soknadsstatus'];
            dokumentMetadata: components['schemas']['Dokumentmetadata'][];
            tilhorendeSaker: components['schemas']['Sak'][];
            feilkoder: number[];
            harTilgang: boolean;
        };
        Kontaktinformasjon: {
            epost?: components['schemas']['Verdi'];
            mobiltelefon?: components['schemas']['Verdi'];
            reservasjon?: string;
        };
        OppgaveDTO: {
            oppgaveId: string;
            traadId?: string;
            'f\u00F8dselsnummer'?: string;
            erSTOOppgave: boolean;
        };
        Gjeldende14aVedtak: {
            innsatsgruppe: components['schemas']['Innsatsgruppe'];
            hovedmal?: components['schemas']['Hovedmal'];
            /** Format: date-time */
            fattetDato: string;
        };
        Gjeldende14aVedtakResponse: {
            gjeldende14aVedtak?: components['schemas']['Gjeldende14aVedtak'];
        };
        Hovedmal: {
            kode: string;
            beskrivelse: string;
        };
        Innsatsgruppe: {
            kode: string;
            beskrivelse: string;
        };
        JournalforingSak: {
            fnr?: string;
            saksId?: string;
            fagsystemSaksId?: string;
            temaKode?: string;
            temaNavn?: string;
            fagsystemKode?: string;
            fagsystemNavn?: string;
            sakstype?: string;
            /** Format: date-time */
            opprettetDato?: string;
            finnesIGsak?: boolean;
            finnesIPsak?: boolean;
            sakstypeForVisningGenerell?: boolean;
            saksIdVisning?: string;
        };
        Resultat: {
            saker: components['schemas']['JournalforingSak'][];
            feiledeSystemer: string[];
        };
        BehandlendeEnhetRequest: {
            fnr: string;
            temakode: string;
            typekode: string;
            underkategorikode?: string;
        };
        SendMeldingRequestV2: {
            fnr: string;
            traadId?: string;
            /** @enum {string} */
            traadType: SendMeldingRequestV2TraadType;
            enhet: string;
            fritekst: string;
            temagruppe?: string;
            sak?: components['schemas']['JournalforingSak'];
            erOppgaveTilknyttetAnsatt?: boolean;
            avsluttet?: boolean;
            behandlingsId?: string;
            oppgaveId?: string;
        };
        Journalpost: {
            journalfortAv?: components['schemas']['Veileder'];
            /** Format: date-time */
            journalfortDato: string;
            journalfortTema: string;
            journalfortTemanavn: string;
            journalfortSaksid?: string;
            journalforendeEnhet?: string;
            journalfortFagsaksystem?: string;
        };
        MeldingDTO: {
            id: string;
            meldingsId?: string;
            /** @enum {string} */
            meldingstype: MeldingDTOMeldingstype;
            temagruppe: string;
            skrevetAvTekst: string;
            fritekst: string;
            /** Format: date-time */
            lestDato?: string;
            /** @enum {string} */
            status: MeldingDTOStatus;
            /** Format: date-time */
            opprettetDato: string;
            /** Format: date-time */
            avsluttetDato?: string;
            /** Format: date-time */
            ferdigstiltDato: string;
            kontorsperretEnhet?: string;
            kontorsperretAv?: components['schemas']['Veileder'];
            sendtTilSladding: boolean;
            markertSomFeilsendtAv?: components['schemas']['Veileder'];
        };
        TraadDTO: {
            traadId: string;
            fnr: string;
            /** @enum {string} */
            traadType: TraadDTOTraadType;
            temagruppe: string;
            /** Format: date-time */
            opprettetDato?: string;
            kontorsperre: boolean;
            feilsendt: boolean;
            /** Format: date-time */
            avsluttetDato?: string;
            sistEndretAv?: string;
            sladding?: boolean;
            lukketAv?: string;
            meldinger: components['schemas']['MeldingDTO'][];
            journalposter: components['schemas']['Journalpost'][];
        };
        Veileder: {
            ident: string;
            navn: string;
        };
        OpprettHenvendelseRequestV2: {
            fnr: string;
            enhet?: string;
            traadId: string;
        };
        FortsettDialogDTO: {
            behandlingsId: string;
            oppgaveId?: string;
        };
        PersonsokRequestV3: {
            enhet?: string;
            navn?: string;
            utenlandskID?: string;
            /** Format: int32 */
            alderFra?: number;
            /** Format: int32 */
            alderTil?: number;
            fodselsdatoFra?: string;
            fodselsdatoTil?: string;
            kjonn?: string;
            adresse?: string;
            telefonnummer?: string;
        };
        BrukerinfoDTO: {
            gjeldendePostadresseType?: components['schemas']['KodeverdiDTO'];
            midlertidigPostadresse?: string;
            ansvarligEnhet?: string;
        };
        KodeverdiDTO: {
            kodeRef?: string;
            beskrivelse?: string;
        };
        NorskIdentDTO: {
            ident: string;
            type?: components['schemas']['KodeverdiDTO'];
        };
        PersonSokResponsDTO: {
            ident: components['schemas']['NorskIdentDTO'];
            navn: components['schemas']['PersonnavnDTO'];
            diskresjonskode?: components['schemas']['KodeverdiDTO'];
            postadresse?: string;
            bostedsadresse?: string;
            kjonn?: components['schemas']['KodeverdiDTO'];
            status?: components['schemas']['KodeverdiDTO'];
            brukerinfo?: components['schemas']['BrukerinfoDTO'];
            utenlandskID?: components['schemas']['UtenlandskIdDTO'][];
        };
        PersonnavnDTO: {
            fornavn: string;
            etternavn: string;
            mellomnavn?: string;
            sammensatt: string;
        };
        UtenlandskIdDTO: {
            identifikasjonsnummer: string;
            utstederland: string;
        };
        Criterion: {
            fieldName?: string;
            and?: components['schemas']['Criterion'][];
            or?: components['schemas']['Criterion'][];
            not?: components['schemas']['Criterion'][];
            searchRule?: components['schemas']['SearchRule'];
            searchHistorical?: boolean;
        };
        SearchRule: {
            exists?: boolean;
            notEquals?: string;
            equals?: string;
            contains?: string;
            fuzzy?: string;
            /** Format: double */
            random?: number;
            wildcard?: string;
            startsWith?: string;
            regex?: string;
            after?: string;
            before?: string;
            lessThan?: string;
            greaterThan?: string;
            from?: string;
            to?: string;
            fromExcluding?: string;
            toExcluding?: string;
            caseSensitive?: boolean;
            disablePhonetic?: boolean;
            /** Format: double */
            boost?: number;
        };
        GraphQLClientError: {
            message: string;
            path?: Record<string, never>[];
            extensions?: {
                [key: string]: Record<string, never>;
            };
            locations?: components['schemas']['GraphQLClientSourceLocation'][];
        };
        GraphQLClientResponseResult: {
            extensions?: {
                [key: string]: Record<string, never>;
            };
            data?: components['schemas']['Result'];
            errors?: components['schemas']['GraphQLClientError'][];
        };
        GraphQLClientSourceLocation: {
            /** Format: int32 */
            line: number;
            /** Format: int32 */
            column: number;
        };
        OpprettSkjermetOppgaveDTO: {
            opprettetavenhetsnummer: string;
            fnr: string;
            beskrivelse: string;
            temaKode: string;
            underkategoriKode?: string;
            oppgaveTypeKode: string;
            prioritetKode: string;
        };
        OpprettOppgaveResponseDTO: {
            id: string;
        };
        OpprettOppgaveRequestDTO: {
            fnr: string;
            opprettetavenhetsnummer: string;
            /** Format: int32 */
            valgtEnhetId: number;
            behandlingskjedeId: string;
            /** Format: int32 */
            dagerFrist: number;
            ansvarligEnhetId: string;
            ansvarligIdent?: string;
            beskrivelse: string;
            temaKode: string;
            underkategoriKode?: string;
            oppgaveTypeKode: string;
            prioritetKode: string;
        };
        SendTilSladdingRequest: {
            fnr: string;
            traadId: string;
            arsak: string;
            meldingId?: string[];
        };
        LukkTraadRequest: {
            fnr: string;
            saksbehandlerValgtEnhet: string;
            traadId: string;
            oppgaveId?: string;
        };
        MerkSomFeilsendtRequest: {
            fnr: string;
            behandlingsidListe: string[];
        };
        AvsluttGosysOppgaveRequest: {
            fnr: string;
            saksbehandlerValgtEnhet: string;
            oppgaveid: string;
            beskrivelse: string;
        };
        SendMeldingRequest: {
            traadId?: string;
            /** @enum {string} */
            traadType: SendMeldingRequestTraadType;
            enhet: string;
            fritekst: string;
            temagruppe?: string;
            sak?: components['schemas']['JournalforingSak'];
            erOppgaveTilknyttetAnsatt?: boolean;
            avsluttet?: boolean;
            behandlingsId?: string;
            oppgaveId?: string;
        };
        OpprettHenvendelseRequest: {
            enhet?: string;
            traadId: string;
        };
        AuthIntropectionDTO: {
            /** Format: int64 */
            expirationDate: number;
        };
        Ansatt: {
            fornavn?: string;
            etternavn?: string;
            ident?: string;
        };
        CaptureStats: {
            /** Format: int32 */
            count: number;
            /** Format: int32 */
            countSizeLastChange: number;
            /** Format: int32 */
            errors: number;
            lastException?: {
                stackTrace?: {
                    classLoaderName?: string;
                    moduleName?: string;
                    moduleVersion?: string;
                    methodName?: string;
                    fileName?: string;
                    /** Format: int32 */
                    lineNumber?: number;
                    className?: string;
                    nativeMethod?: boolean;
                }[];
                message?: string;
                localizedMessage?: string;
            };
            /** Format: double */
            confidence: number;
        };
        Tokens: {
            user: string;
            obs?: string;
            system?: string;
        };
        Me: {
            ident: string;
            navn: string;
            fornavn: string;
            etternavn: string;
        };
        VeilederEnheter: {
            ident: string;
            enhetliste: components['schemas']['VeiledersEnhet'][];
        };
        VeiledersEnhet: {
            enhetId: string;
            navn: string;
        };
        Oppgavetype: {
            kode: string;
            tekst: string;
            /** Format: int32 */
            dagerFrist: number;
        };
        Tema: {
            kode: string;
            tekst: string;
            oppgavetyper: components['schemas']['Oppgavetype'][];
            prioriteter: TemaPrioriteter[];
            underkategorier: components['schemas']['Underkategori'][];
        };
        Underkategori: {
            kode: string;
            tekst: string;
            erGyldig: boolean;
        };
        BaseUrls: {
            norg2Frontend: string;
            drek: string;
            personforvalter: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type FnrRequest = components['schemas']['FnrRequest'];
export type EksternVarslingInfo = components['schemas']['EksternVarslingInfo'];
export type Event = components['schemas']['Event'];
export type FeiletVarsling = components['schemas']['FeiletVarsling'];
export type HistorikkEntry = components['schemas']['HistorikkEntry'];
export type Result = components['schemas']['Result'];
export type VarslingsTidspunkt = components['schemas']['VarslingsTidspunkt'];
export type Adressat = components['schemas']['Adressat'];
export type Adresse = components['schemas']['Adresse'];
export type AdvokatSomAdressat = components['schemas']['AdvokatSomAdressat'];
export type Apningstid = components['schemas']['Apningstid'];
export type Bankkonto = components['schemas']['Bankkonto'];
export type Data = components['schemas']['Data'];
export type DeltBosted = components['schemas']['DeltBosted'];
export type DigitalKontaktinformasjonTredjepartsperson =
    components['schemas']['DigitalKontaktinformasjonTredjepartsperson'];
export type Dodsbo = components['schemas']['Dodsbo'];
export type Enhet = components['schemas']['Enhet'];
export type Fodested = components['schemas']['Fodested'];
export type ForelderBarnRelasjon = components['schemas']['ForelderBarnRelasjon'];
export type Foreldreansvar = components['schemas']['Foreldreansvar'];
export type Fullmakt = components['schemas']['Fullmakt'];
export type GyldighetsPeriode = components['schemas']['GyldighetsPeriode'];
export type KodeBeskrivelseAdresseBeskyttelse = components['schemas']['KodeBeskrivelseAdresseBeskyttelse'];
export type KodeBeskrivelseKjonn = components['schemas']['KodeBeskrivelseKjonn'];
export type KodeBeskrivelsePersonStatus = components['schemas']['KodeBeskrivelsePersonStatus'];
export type KodeBeskrivelseSivilstandType = components['schemas']['KodeBeskrivelseSivilstandType'];
export type KodeBeskrivelseString = components['schemas']['KodeBeskrivelseString'];
export type KontaktInformasjon = components['schemas']['KontaktInformasjon'];
export type Navn = components['schemas']['Navn'];
export type NavnOgIdent = components['schemas']['NavnOgIdent'];
export type OmraadeMedHandlingString = components['schemas']['OmraadeMedHandlingString'];
export type OrganisasjonSomAdressat = components['schemas']['OrganisasjonSomAdressat'];
export type Person = components['schemas']['Person'];
export type PersonSomAdressat = components['schemas']['PersonSomAdressat'];
export type Publikumsmottak = components['schemas']['Publikumsmottak'];
export type Sikkerhetstiltak = components['schemas']['Sikkerhetstiltak'];
export type SistEndret = components['schemas']['SistEndret'];
export type Sivilstand = components['schemas']['Sivilstand'];
export type SivilstandRelasjon = components['schemas']['SivilstandRelasjon'];
export type Statsborgerskap = components['schemas']['Statsborgerskap'];
export type Telefon = components['schemas']['Telefon'];
export type TilrettelagtKommunikasjon = components['schemas']['TilrettelagtKommunikasjon'];
export type Verdi = components['schemas']['Verdi'];
export type Verge = components['schemas']['Verge'];
export type IdentInformasjon = components['schemas']['IdentInformasjon'];
export type Identliste = components['schemas']['Identliste'];
export type FnrDatoRangeRequest = components['schemas']['FnrDatoRangeRequest'];
export type Barnetilleggperiode = components['schemas']['Barnetilleggperiode'];
export type Periode = components['schemas']['Periode'];
export type VedtakPerioderResponseInner = components['schemas']['VedtakPerioderResponseInner'];
export type VedtakPerioderResponseInnerBarnetillegg = components['schemas']['VedtakPerioderResponseInnerBarnetillegg'];
export type Code = components['schemas']['Code'];
export type PensjonSak = components['schemas']['PensjonSak'];
export type PensjonEtteroppgjorYtelse = components['schemas']['PensjonEtteroppgjorYtelse'];
export type PensjonEtteroppgjorshistorikk = components['schemas']['PensjonEtteroppgjorshistorikk'];
export type Arbeidgiver = components['schemas']['Arbeidgiver'];
export type Skatt = components['schemas']['Skatt'];
export type Trekk = components['schemas']['Trekk'];
export type Utbetaling = components['schemas']['Utbetaling'];
export type UtbetalingerPeriodeDto = components['schemas']['UtbetalingerPeriodeDTO'];
export type UtbetalingerResponseDto = components['schemas']['UtbetalingerResponseDTO'];
export type Ytelse = components['schemas']['Ytelse'];
export type YtelseKomponent = components['schemas']['YtelseKomponent'];
export type YtelsePeriode = components['schemas']['YtelsePeriode'];
export type DenyCause = components['schemas']['DenyCause'];
export type TilgangDto = components['schemas']['TilgangDTO'];
export type Dokument = components['schemas']['Dokument'];
export type Dokumentmetadata = components['schemas']['Dokumentmetadata'];
export type Feil = components['schemas']['Feil'];
export type LocalDate = components['schemas']['LocalDate'];
export type LocalDateTime = components['schemas']['LocalDateTime'];
export type LocalTime = components['schemas']['LocalTime'];
export type ResultatSoknadsstatus = components['schemas']['ResultatSoknadsstatus'];
export type Sak = components['schemas']['Sak'];
export type Soknadsstatus = components['schemas']['Soknadsstatus'];
export type SoknadsstatusSakstema = components['schemas']['SoknadsstatusSakstema'];
export type Kontaktinformasjon = components['schemas']['Kontaktinformasjon'];
export type OppgaveDto = components['schemas']['OppgaveDTO'];
export type Gjeldende14aVedtak = components['schemas']['Gjeldende14aVedtak'];
export type Gjeldende14aVedtakResponse = components['schemas']['Gjeldende14aVedtakResponse'];
export type Hovedmal = components['schemas']['Hovedmal'];
export type Innsatsgruppe = components['schemas']['Innsatsgruppe'];
export type JournalforingSak = components['schemas']['JournalforingSak'];
export type Resultat = components['schemas']['Resultat'];
export type BehandlendeEnhetRequest = components['schemas']['BehandlendeEnhetRequest'];
export type SendMeldingRequestV2 = components['schemas']['SendMeldingRequestV2'];
export type Journalpost = components['schemas']['Journalpost'];
export type MeldingDto = components['schemas']['MeldingDTO'];
export type TraadDto = components['schemas']['TraadDTO'];
export type Veileder = components['schemas']['Veileder'];
export type OpprettHenvendelseRequestV2 = components['schemas']['OpprettHenvendelseRequestV2'];
export type FortsettDialogDto = components['schemas']['FortsettDialogDTO'];
export type PersonsokRequestV3 = components['schemas']['PersonsokRequestV3'];
export type BrukerinfoDto = components['schemas']['BrukerinfoDTO'];
export type KodeverdiDto = components['schemas']['KodeverdiDTO'];
export type NorskIdentDto = components['schemas']['NorskIdentDTO'];
export type PersonSokResponsDto = components['schemas']['PersonSokResponsDTO'];
export type PersonnavnDto = components['schemas']['PersonnavnDTO'];
export type UtenlandskIdDto = components['schemas']['UtenlandskIdDTO'];
export type Criterion = components['schemas']['Criterion'];
export type SearchRule = components['schemas']['SearchRule'];
export type GraphQlClientError = components['schemas']['GraphQLClientError'];
export type GraphQlClientResponseResult = components['schemas']['GraphQLClientResponseResult'];
export type GraphQlClientSourceLocation = components['schemas']['GraphQLClientSourceLocation'];
export type OpprettSkjermetOppgaveDto = components['schemas']['OpprettSkjermetOppgaveDTO'];
export type OpprettOppgaveResponseDto = components['schemas']['OpprettOppgaveResponseDTO'];
export type OpprettOppgaveRequestDto = components['schemas']['OpprettOppgaveRequestDTO'];
export type SendTilSladdingRequest = components['schemas']['SendTilSladdingRequest'];
export type LukkTraadRequest = components['schemas']['LukkTraadRequest'];
export type MerkSomFeilsendtRequest = components['schemas']['MerkSomFeilsendtRequest'];
export type AvsluttGosysOppgaveRequest = components['schemas']['AvsluttGosysOppgaveRequest'];
export type SendMeldingRequest = components['schemas']['SendMeldingRequest'];
export type OpprettHenvendelseRequest = components['schemas']['OpprettHenvendelseRequest'];
export type AuthIntropectionDto = components['schemas']['AuthIntropectionDTO'];
export type Ansatt = components['schemas']['Ansatt'];
export type CaptureStats = components['schemas']['CaptureStats'];
export type Tokens = components['schemas']['Tokens'];
export type Me = components['schemas']['Me'];
export type VeilederEnheter = components['schemas']['VeilederEnheter'];
export type VeiledersEnhet = components['schemas']['VeiledersEnhet'];
export type Oppgavetype = components['schemas']['Oppgavetype'];
export type Tema = components['schemas']['Tema'];
export type Underkategori = components['schemas']['Underkategori'];
export type BaseUrls = components['schemas']['BaseUrls'];
export type $defs = Record<string, never>;
export interface operations {
    hentAlleVarsler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Result'];
                };
            };
        };
    };
    hentPersondata: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Data'];
                };
            };
        };
    };
    hentIdenter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Identliste'];
                };
            };
        };
    };
    hentAktorId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
        };
    };
    hentTiltakspenger: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['VedtakPerioderResponseInner'][];
                };
            };
        };
    };
    hentSykepenger: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentPleiepenger: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentPensjonSaker: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['PensjonSak'][];
                };
            };
        };
    };
    hentPensjonSakEtteroppgjorshistorikk: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sakId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['PensjonEtteroppgjorshistorikk'][];
                };
            };
        };
    };
    hentForeldrepenger: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrDatoRangeRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hent: {
        parameters: {
            query: {
                startDato: string;
                sluttDato: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['UtbetalingerResponseDTO'];
                };
            };
        };
    };
    harTilgang: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TilgangDTO'];
                };
            };
        };
    };
    harTilgang_1: {
        parameters: {
            query?: {
                enhet?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TilgangDTO'];
                };
            };
        };
    };
    hentSakstemaSoknadsstatus: {
        parameters: {
            query: {
                enhet: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['ResultatSoknadsstatus'];
                };
            };
        };
    };
    hentDokument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                journalpostId: string;
                dokumentreferanse: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': Record<string, never>;
                };
            };
        };
    };
    hentKontaktinformasjon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Kontaktinformasjon'];
                };
            };
        };
    };
    finnTildelte: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'][];
                };
            };
        };
    };
    finnTildelte_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'][];
                };
            };
        };
    };
    hent_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentUtvidetOppf: {
        parameters: {
            query?: {
                startDato?: string;
                sluttDato?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentGjeldende14aVedtak: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Gjeldende14aVedtakResponse'];
                };
            };
        };
    };
    knyttTilSak: {
        parameters: {
            query?: {
                enhet?: string;
            };
            header?: never;
            path: {
                traadId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JournalforingSak'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    hentSaker: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Resultat'];
                };
            };
        };
    };
    hentBehandlendeEnhet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['BehandlendeEnhetRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Enhet'][];
                };
            };
        };
    };
    sendMeldinger: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMeldingRequestV2'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'];
                };
            };
        };
    };
    hentMeldinger: {
        parameters: {
            query: {
                enhet: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['FnrRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'][];
                };
            };
        };
    };
    startFortsettDialog: {
        parameters: {
            query?: never;
            header?: {
                'Ignore-Conflict'?: boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OpprettHenvendelseRequestV2'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['FortsettDialogDTO'];
                };
            };
        };
    };
    sendFortsettDialog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMeldingRequestV2'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'];
                };
            };
        };
    };
    sokPdlV3: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PersonsokRequestV3'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['PersonSokResponsDTO'][];
                };
            };
        };
    };
    knyttTilSak_1: {
        parameters: {
            query?: {
                enhet?: string;
            };
            header?: never;
            path: {
                fnr: string;
                traadId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['JournalforingSak'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    pdlPersonsok: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Criterion'][];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['GraphQLClientResponseResult'];
                };
            };
        };
    };
    opprettSkjermetOppgave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OpprettSkjermetOppgaveDTO'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OpprettOppgaveResponseDTO'];
                };
            };
        };
    };
    opprettOppgave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OpprettOppgaveRequestDTO'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OpprettOppgaveResponseDTO'];
                };
            };
        };
    };
    sendTilSladding: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendTilSladdingRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    lukkTraad: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['LukkTraadRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    merkSomFeilsendt: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['MerkSomFeilsendtRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    avsluttGosysOppgave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['AvsluttGosysOppgaveRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    sendMeldinger_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMeldingRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'];
                };
            };
        };
    };
    startFortsettDialog_1: {
        parameters: {
            query?: never;
            header?: {
                'Ignore-Conflict'?: boolean;
            };
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['OpprettHenvendelseRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['FortsettDialogDTO'];
                };
            };
        };
    };
    sendFortsettDialog_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['SendMeldingRequest'];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'];
                };
            };
        };
    };
    authIntropection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['AuthIntropectionDTO'];
                };
            };
        };
    };
    hentPersondata_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Data'];
                };
            };
        };
    };
    hentIdenter_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Identliste'];
                };
            };
        };
    };
    hentAktorId_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
        };
    };
    getOppgaveData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                oppgaveId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'];
                };
            };
        };
    };
    hentAnsattePaaEnhet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                enhetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Ansatt'][];
                };
            };
        };
    };
    hentAlleEnheterForOppgave: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Enhet'][];
                };
            };
        };
    };
    hent_2: {
        parameters: {
            query: {
                startDato: string;
                sluttDato: string;
            };
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['UtbetalingerResponseDTO'];
                };
            };
        };
    };
    harTilgang_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TilgangDTO'];
                };
            };
        };
    };
    harTilgang_3: {
        parameters: {
            query?: {
                enhet?: string;
            };
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TilgangDTO'];
                };
            };
        };
    };
    authIntropection_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['AuthIntropectionDTO'];
                };
            };
        };
    };
    hentSakstemaSoknadsstatus_1: {
        parameters: {
            query: {
                enhet: string;
            };
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['ResultatSoknadsstatus'];
                };
            };
        };
    };
    hentDokument_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
                journalpostId: string;
                dokumentreferanse: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/pdf': Record<string, never>;
                };
            };
        };
    };
    hentKontaktinformasjon_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Kontaktinformasjon'];
                };
            };
        };
    };
    finnTildelte_2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'][];
                };
            };
        };
    };
    finnTildelte_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'][];
                };
            };
        };
    };
    getOppgaveData_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                oppgaveId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['OppgaveDTO'];
                };
            };
        };
    };
    hent_3: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentUtvidetOppf_1: {
        parameters: {
            query?: {
                startDato?: string;
                sluttDato?: string;
            };
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: Record<string, never>;
                    };
                };
            };
        };
    };
    hentSaker_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Resultat'];
                };
            };
        };
    };
    getTypeanalyzerStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: components['schemas']['CaptureStats'];
                    };
                };
            };
        };
    };
    getTypedefinition: {
        parameters: {
            query?: {
                format?: string;
            };
            header?: never;
            path: {
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'text/plain': string;
                };
            };
        };
    };
    hentSystembrukerToken: {
        parameters: {
            query?: {
                scope?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Tokens'];
                };
            };
        };
    };
    hentSaksbehandler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Me'];
                };
            };
        };
    };
    hentEnheter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['VeilederEnheter'];
                };
            };
        };
    };
    hentMedId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': boolean;
                };
            };
        };
    };
    hentToggles: {
        parameters: {
            query?: {
                id?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: boolean;
                    };
                };
            };
        };
    };
    hentToggles_1: {
        parameters: {
            query?: {
                id?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': {
                        [key: string]: boolean;
                    };
                };
            };
        };
    };
    hentAnsattePaaEnhet_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                enhetId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Ansatt'][];
                };
            };
        };
    };
    hentBehandlendeEnhet_1: {
        parameters: {
            query: {
                fnr: string;
                temakode: string;
                typekode: string;
                underkategori?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Enhet'][];
                };
            };
        };
    };
    hentAlleEnheterForOppgave_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Enhet'][];
                };
            };
        };
    };
    hentAlleTema: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['Tema'][];
                };
            };
        };
    };
    hentSladdeArsaker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                kjedeid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string[];
                };
            };
        };
    };
    hentMeldinger_1: {
        parameters: {
            query: {
                enhet: string;
            };
            header?: never;
            path: {
                fnr: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['TraadDTO'][];
                };
            };
        };
    };
    hentV2: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': components['schemas']['BaseUrls'];
                };
            };
        };
    };
    selftest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    '*/*': string;
                };
            };
        };
    };
    isReady: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    isAlive: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
export enum DataFeilendeSystemer {
    NOT_RELEVANT = 'NOT_RELEVANT',
    PROVIDED_VALUE = 'PROVIDED_VALUE',
    PDL_GT = 'PDL_GT',
    PDL_TREDJEPARTSPERSONER = 'PDL_TREDJEPARTSPERSONER',
    EGEN_ANSATT = 'EGEN_ANSATT',
    DKIF = 'DKIF',
    DKIF_TREDJEPARTSPERSONER = 'DKIF_TREDJEPARTSPERSONER',
    BANKKONTO = 'BANKKONTO',
    OPPFOLGING = 'OPPFOLGING',
    VEILEDER_ROLLER = 'VEILEDER_ROLLER',
    NORG_NAVKONTOR = 'NORG_NAVKONTOR',
    NORG_KONTAKTINFORMASJON = 'NORG_KONTAKTINFORMASJON',
    FULLMAKT = 'FULLMAKT'
}
export enum DodsboSkifteform {
    OFFENTLIG = 'OFFENTLIG',
    ANNET = 'ANNET',
    UKJENT = 'UKJENT'
}
export enum ForelderBarnRelasjonRolle {
    BARN = 'BARN',
    MOR = 'MOR',
    FAR = 'FAR',
    MEDMOR = 'MEDMOR',
    UKJENT = 'UKJENT'
}
export enum FullmaktMotpartsRolle {
    FULLMAKTSGIVER = 'FULLMAKTSGIVER',
    FULLMEKTIG = 'FULLMEKTIG',
    UKJENT = 'UKJENT'
}
export enum KodeBeskrivelseAdresseBeskyttelseKode {
    KODE6 = 'KODE6',
    KODE6_UTLAND = 'KODE6_UTLAND',
    KODE7 = 'KODE7',
    UGRADERT = 'UGRADERT',
    UKJENT = 'UKJENT'
}
export enum KodeBeskrivelseKjonnKode {
    M = 'M',
    K = 'K',
    U = 'U'
}
export enum KodeBeskrivelsePersonStatusKode {
    BOSATT = 'BOSATT',
    DOD = 'DOD',
    OPPHORT = 'OPPHORT',
    INAKTIV = 'INAKTIV',
    MIDLERTIDIG = 'MIDLERTIDIG',
    FORSVUNNET = 'FORSVUNNET',
    UTFLYTTET = 'UTFLYTTET',
    IKKE_BOSATT = 'IKKE_BOSATT',
    FODSELSREGISTERT = 'FODSELSREGISTERT',
    UKJENT = 'UKJENT'
}
export enum KodeBeskrivelseSivilstandTypeKode {
    UOPPGITT = 'UOPPGITT',
    UGIFT = 'UGIFT',
    GIFT = 'GIFT',
    ENKE_ELLER_ENKEMANN = 'ENKE_ELLER_ENKEMANN',
    SKILT = 'SKILT',
    SEPARERT = 'SEPARERT',
    REGISTRERT_PARTNER = 'REGISTRERT_PARTNER',
    SEPARERT_PARTNER = 'SEPARERT_PARTNER',
    SKILT_PARTNER = 'SKILT_PARTNER',
    GJENLEVENDE_PARTNER = 'GJENLEVENDE_PARTNER'
}
export enum OmraadeMedHandlingStringHandling {
    LES = 'LES',
    KOMMUNISER = 'KOMMUNISER',
    SKRIV = 'SKRIV'
}
export enum PersonErEgenAnsatt {
    JA = 'JA',
    NEI = 'NEI',
    UKJENT = 'UKJENT'
}
export enum IdentInformasjonGruppe {
    AKTORID = 'AKTORID',
    FOLKEREGISTERIDENT = 'FOLKEREGISTERIDENT',
    NPID = 'NPID',
    __UNKNOWN_VALUE = '__UNKNOWN_VALUE'
}
export enum VedtakPerioderResponseInnerRettighet {
    TILTAKSPENGER = 'TILTAKSPENGER',
    TILTAKSPENGER_OG_BARNETILLEGG = 'TILTAKSPENGER_OG_BARNETILLEGG'
}
export enum VedtakPerioderResponseInnerKilde {
    TPSAK = 'TPSAK',
    ARENA = 'ARENA'
}
export enum DokumentDokumentStatus {
    UNDER_REDIGERING = 'UNDER_REDIGERING',
    FERDIGSTILT = 'FERDIGSTILT',
    AVBRUTT = 'AVBRUTT',
    KASSERT = 'KASSERT'
}
export enum DokumentmetadataRetning {
    INN = 'INN',
    UT = 'UT',
    INTERN = 'INTERN'
}
export enum DokumentmetadataAvsender {
    SLUTTBRUKER = 'SLUTTBRUKER',
    NAV = 'NAV',
    EKSTERN_PART = 'EKSTERN_PART',
    UKJENT = 'UKJENT'
}
export enum DokumentmetadataMottaker {
    SLUTTBRUKER = 'SLUTTBRUKER',
    NAV = 'NAV',
    EKSTERN_PART = 'EKSTERN_PART',
    UKJENT = 'UKJENT'
}
export enum DokumentmetadataBaksystem {
    GSAK = 'GSAK',
    PESYS = 'PESYS',
    SAK_OG_BEHANDLING = 'SAK_OG_BEHANDLING',
    JOARK = 'JOARK',
    JOARK_SIKKERHETSBEGRENSNING = 'JOARK_SIKKERHETSBEGRENSNING',
    HENVENDELSE = 'HENVENDELSE',
    PDF_KONVERTERING = 'PDF_KONVERTERING',
    AKTOER = 'AKTOER',
    KODEVERK = 'KODEVERK',
    SAF = 'SAF',
    SAK = 'SAK'
}
export enum FeilFeilmelding {
    UKJENT_FEIL = 'UKJENT_FEIL',
    DOKUMENT_IKKE_FUNNET = 'DOKUMENT_IKKE_FUNNET',
    DOKUMENT_IKKE_TILGJENGELIG = 'DOKUMENT_IKKE_TILGJENGELIG',
    DOKUMENT_SLETTET = 'DOKUMENT_SLETTET',
    SIKKERHETSBEGRENSNING = 'SIKKERHETSBEGRENSNING',
    MANGLER_DOKUMENTMETADATA = 'MANGLER_DOKUMENTMETADATA',
    JOURNALFORT_ANNET_TEMA = 'JOURNALFORT_ANNET_TEMA',
    IKKE_JOURNALFORT = 'IKKE_JOURNALFORT',
    SAKSBEHANDLER_IKKE_TILGANG = 'SAKSBEHANDLER_IKKE_TILGANG',
    TEMAKODE_ER_BIDRAG = 'TEMAKODE_ER_BIDRAG',
    KORRUPT_PDF = 'KORRUPT_PDF',
    TEKNISK_FEIL = 'TEKNISK_FEIL'
}
export enum LocalDateMonth {
    JANUARY = 'JANUARY',
    FEBRUARY = 'FEBRUARY',
    MARCH = 'MARCH',
    APRIL = 'APRIL',
    MAY = 'MAY',
    JUNE = 'JUNE',
    JULY = 'JULY',
    AUGUST = 'AUGUST',
    SEPTEMBER = 'SEPTEMBER',
    OCTOBER = 'OCTOBER',
    NOVEMBER = 'NOVEMBER',
    DECEMBER = 'DECEMBER'
}
export enum LocalDateDayOfWeek {
    MONDAY = 'MONDAY',
    TUESDAY = 'TUESDAY',
    WEDNESDAY = 'WEDNESDAY',
    THURSDAY = 'THURSDAY',
    FRIDAY = 'FRIDAY',
    SATURDAY = 'SATURDAY',
    SUNDAY = 'SUNDAY'
}
export enum LocalDateTimeMonth {
    JANUARY = 'JANUARY',
    FEBRUARY = 'FEBRUARY',
    MARCH = 'MARCH',
    APRIL = 'APRIL',
    MAY = 'MAY',
    JUNE = 'JUNE',
    JULY = 'JULY',
    AUGUST = 'AUGUST',
    SEPTEMBER = 'SEPTEMBER',
    OCTOBER = 'OCTOBER',
    NOVEMBER = 'NOVEMBER',
    DECEMBER = 'DECEMBER'
}
export enum LocalDateTimeDayOfWeek {
    MONDAY = 'MONDAY',
    TUESDAY = 'TUESDAY',
    WEDNESDAY = 'WEDNESDAY',
    THURSDAY = 'THURSDAY',
    FRIDAY = 'FRIDAY',
    SATURDAY = 'SATURDAY',
    SUNDAY = 'SUNDAY'
}
export enum SakBaksystem {
    GSAK = 'GSAK',
    PESYS = 'PESYS',
    SAK_OG_BEHANDLING = 'SAK_OG_BEHANDLING',
    JOARK = 'JOARK',
    JOARK_SIKKERHETSBEGRENSNING = 'JOARK_SIKKERHETSBEGRENSNING',
    HENVENDELSE = 'HENVENDELSE',
    PDF_KONVERTERING = 'PDF_KONVERTERING',
    AKTOER = 'AKTOER',
    KODEVERK = 'KODEVERK',
    SAF = 'SAF',
    SAK = 'SAK'
}
export enum SendMeldingRequestV2TraadType {
    SAMTALEREFERAT = 'SAMTALEREFERAT',
    MELDINGSKJEDE = 'MELDINGSKJEDE',
    CHAT = 'CHAT'
}
export enum MeldingDTOMeldingstype {
    DOKUMENT_VARSEL = 'DOKUMENT_VARSEL',
    OPPGAVE_VARSEL = 'OPPGAVE_VARSEL',
    SPORSMAL_SKRIFTLIG = 'SPORSMAL_SKRIFTLIG',
    SPORSMAL_SKRIFTLIG_DIREKTE = 'SPORSMAL_SKRIFTLIG_DIREKTE',
    SVAR_SKRIFTLIG = 'SVAR_SKRIFTLIG',
    SVAR_OPPMOTE = 'SVAR_OPPMOTE',
    SVAR_TELEFON = 'SVAR_TELEFON',
    DELVIS_SVAR_SKRIFTLIG = 'DELVIS_SVAR_SKRIFTLIG',
    SAMTALEREFERAT_OPPMOTE = 'SAMTALEREFERAT_OPPMOTE',
    SAMTALEREFERAT_TELEFON = 'SAMTALEREFERAT_TELEFON',
    SPORSMAL_MODIA_UTGAAENDE = 'SPORSMAL_MODIA_UTGAAENDE',
    SVAR_SBL_INNGAAENDE = 'SVAR_SBL_INNGAAENDE',
    INFOMELDING_MODIA_UTGAAENDE = 'INFOMELDING_MODIA_UTGAAENDE',
    CHATMELDING_FRA_NAV = 'CHATMELDING_FRA_NAV',
    CHATMELDING_FRA_BRUKER = 'CHATMELDING_FRA_BRUKER'
}
export enum MeldingDTOStatus {
    IKKE_BESVART = 'IKKE_BESVART',
    IKKE_LEST_AV_BRUKER = 'IKKE_LEST_AV_BRUKER',
    LEST_AV_BRUKER = 'LEST_AV_BRUKER'
}
export enum TraadDTOTraadType {
    SAMTALEREFERAT = 'SAMTALEREFERAT',
    MELDINGSKJEDE = 'MELDINGSKJEDE',
    CHAT = 'CHAT'
}
export enum SendMeldingRequestTraadType {
    SAMTALEREFERAT = 'SAMTALEREFERAT',
    MELDINGSKJEDE = 'MELDINGSKJEDE',
    CHAT = 'CHAT'
}
export enum TemaPrioriteter {
    HOY = 'HOY',
    NORM = 'NORM',
    LAV = 'LAV'
}
