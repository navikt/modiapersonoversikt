(function(){"use strict";class a{constructor(){this.lastActivity=new Date().getTime()}update(){this.lastActivity=new Date().getTime()}timeSinceLastActivity(){return new Date().getTime()-this.lastActivity}}const o=1e3,h=60*o,g=30*o,T=10*h,c=120*o,l=3600*o,f=-1,n=i=>{if(i===f)return l;const t=new Date().getTime();return i-t};class S{constructor(){this.timeout=null,this.interval=null,this.activityMonitor=new a,this.initialize=(t,e)=>{this._refreshToken=t,this._onLoginStateUpdate=e},this.setupTokenRefresher=t=>{this.timeout=this.getTokenRefreshTimeout(this.activityMonitor,t)},this.getTokenRefreshTimeout=(t,e)=>setTimeout(()=>{if(t.timeSinceLastActivity()<T){if(!this.refreshToken)throw new Error("[LoginStateManager] Var ikke initialisert med ");this.refreshToken&&this.refreshToken()}},e-c),this.getLoginStateInterval=t=>setInterval(()=>{const e=n(t.expirationDate);this.onLoginStateUpdate&&this.onLoginStateUpdate({isLoggedIn:e>0})},g),this.onAuthStateUpdate=t=>{this.stopTokenRefresher();const e=n(t.expirationDate);if(e===0){this.refreshToken&&this.refreshToken();return}this.setupTokenRefresher(e)},this.setupLoginStateNotifier=t=>{this.stopLoginStateNotifier(),this.interval=this.getLoginStateInterval(t)},this.stopTokenRefresher=()=>{this.timeout&&clearTimeout(this.timeout)},this.stopLoginStateNotifier=()=>{this.interval&&clearInterval(this.interval)},this.onUserActive=()=>{this.activityMonitor.update()},this.onUpdate=t=>{this.onAuthStateUpdate(t),this.setupLoginStateNotifier(t)},this.stopWork=()=>{this.stopTokenRefresher(),this.stopLoginStateNotifier()}}get refreshToken(){if(!this._refreshToken)throw new Error("[LoginStateManager] var ikke initialisert med en metode for å refreshe token");return this._refreshToken}get onLoginStateUpdate(){if(!this._onLoginStateUpdate)throw new Error("[LoginStateManager] var ikke initialisert med en metode for å sende login oppdateringer");return this._onLoginStateUpdate}}const s=new S,u=()=>{console.log("Bruker webworker for å kontrollere inlogging"),self.addEventListener("message",_)},_=i=>{const{type:t,payload:e}=i.data;switch(t){case"STOP_WORKER":s.stopWork(),console.log("[loginWebWorker] Mottok melding: ",t);return;case"AUTH_STATE_UPDATE":s.onUpdate(e),console.log(`[loginWebWorker] Mottok melding: ${t}, med: ${e.expirationDate}`);return;case"USER_ACTIVE":s.onUserActive();return}},d=()=>{r("REFRESH_TOKEN")},k=({isLoggedIn:i})=>{r("LOGIN_STATE_UPDATE",i)},r=(i,t)=>{self.postMessage({type:i,payload:t})};s.initialize(d,k),u()})();
//# sourceMappingURL=loginWebWorker-CtsPwpup.js.map
