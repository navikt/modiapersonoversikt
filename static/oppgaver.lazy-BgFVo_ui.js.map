{"version":3,"file":"oppgaver.lazy-BgFVo_ui.js","sources":["../../src/components/Oppgave/Details.tsx","../../src/components/Oppgave/List/OppgaveItem.tsx","../../src/components/Oppgave/List/index.tsx","../../src/components/Oppgave/index.tsx","../../src/routes/new/person/oppgaver.lazy.tsx"],"sourcesContent":["import { Alert, GuidePanel, HStack, Skeleton, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport { useAtomValue } from 'jotai';\nimport { Suspense, useEffect, useRef } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TraadDetail } from 'src/components/Meldinger/Detail';\nimport { oppgaveFilterAtom } from 'src/components/Oppgave/List/Filter';\nimport { getOppgaveId, useFilterOppgave } from 'src/components/Oppgave/List/utils';\nimport { OppgaveContent } from 'src/components/Oppgave/OppgaveContent';\nimport { oppgaveRouteMiddleware } from 'src/routes/new/person/oppgaver';\n\nconst routeApi = getRouteApi('/new/person/oppgaver');\n\nconst OppgaveOgDialogDetail = () => {\n    const { id } = routeApi.useSearch();\n    const oppgaver = useFilterOppgave();\n    const valgtOppgave = oppgaver.find((item) => getOppgaveId(item) === id);\n    const filterAtomValue = useAtomValue(oppgaveFilterAtom);\n    const prevFilterRef = useRef(filterAtomValue);\n\n    // Fjern oppgave i URL og cache hvis filteret er endret og oppgaven ikke finnes i filtrerte oppgaver\n    useEffect(() => {\n        const filterEndret = JSON.stringify(prevFilterRef.current) !== JSON.stringify(filterAtomValue);\n        const oppgaveIkkeIListe = !valgtOppgave || !oppgaver.includes(valgtOppgave);\n        if ((filterEndret && oppgaveIkkeIListe) || oppgaveIkkeIListe) {\n            oppgaveRouteMiddleware.clear();\n        }\n    }, [valgtOppgave, oppgaver, filterAtomValue]);\n\n    if (!oppgaver.length) {\n        return (\n            <Alert className=\"mt-2\" variant=\"info\">\n                Fant ingen oppgaver\n            </Alert>\n        );\n    }\n\n    if (!id) {\n        return (\n            <HStack margin=\"4\">\n                <GuidePanel>Velg en oppgave fra listen på venstre side for å se detaljer.</GuidePanel>\n            </HStack>\n        );\n    }\n\n    if (!valgtOppgave) {\n        return (\n            <HStack flexGrow=\"1\" minHeight=\"0\" className=\"\">\n                <Alert variant=\"error\">Oppgaven du valgte, ble ikke funnet.</Alert>\n            </HStack>\n        );\n    }\n\n    return (\n        <VStack gap=\"4\">\n            <OppgaveContent oppgave={valgtOppgave} />\n            {valgtOppgave.traadId ? (\n                <TraadDetail traadId={valgtOppgave.traadId} valgtOppgaveId={valgtOppgave.oppgaveId} />\n            ) : (\n                <GuidePanel>Det er ingen dialog knyttet til oppgaven.</GuidePanel>\n            )}\n        </VStack>\n    );\n};\n\nexport const OppgaveDetail = () => {\n    return (\n        <ErrorBoundary boundaryName=\"oppgaveDetaljer\">\n            <Suspense fallback={<Skeleton variant=\"rounded\" height=\"200\" />}>\n                <OppgaveOgDialogDetail />\n            </Suspense>\n        </ErrorBoundary>\n    );\n};\n","import { ChevronRightIcon } from '@navikt/aksel-icons';\nimport { BodyShort, Button, HStack, Heading, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport Card from 'src/components/Card';\nimport { getOppgaveId } from 'src/components/Oppgave/List/utils';\nimport type { OppgaveDto } from 'src/generated/modiapersonoversikt-api';\nimport { useGsakTema } from 'src/lib/clients/modiapersonoversikt-api';\nimport { formatterDato } from 'src/utils/date-utils';\n\nconst routeApi = getRouteApi('/new/person/oppgaver');\n\nexport const OppgaveItem = ({\n    oppgave,\n    handleClick\n}: {\n    oppgave: OppgaveDto;\n    handleClick: (id: string) => void;\n}) => {\n    const { data: gsakTema } = useGsakTema();\n    const tema = gsakTema.find((item) => item.kode === oppgave.tema);\n    const oppgaveTyper = tema?.oppgavetyper ?? [];\n    const oppgavetype = oppgaveTyper.find((o) => o.kode === oppgave.oppgavetype);\n    const aktivOppgaveId = routeApi.useSearch().id;\n    const id = getOppgaveId(oppgave);\n    return (\n        <Card\n            padding=\"2\"\n            className={`cursor-pointer hover:hover:bg-ax-bg-neutral-moderate-hover group\n                ${aktivOppgaveId === id ? 'bg-ax-bg-neutral-moderate ' : ''}`}\n            onClick={() => handleClick(id)}\n            as=\"li\"\n        >\n            <HStack justify=\"space-between\" gap=\"1\" wrap={false}>\n                <VStack justify=\"center\" gap=\"1\">\n                    <Heading size=\"xsmall\" as=\"h3\" level=\"3\">\n                        {tema?.tekst ?? 'Ukjent tema'}\n                    </Heading>\n                    <HStack gap=\"2\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Oppgavetype:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{oppgavetype?.tekst ?? 'Ukjent oppgavetype'}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Forfallsdato:\n                        </BodyShort>\n                        <BodyShort size=\"small\">\n                            {oppgave.fristFerdigstillelse ? formatterDato(oppgave.fristFerdigstillelse) : ''}\n                        </BodyShort>\n                    </HStack>\n                </VStack>\n                <Button\n                    variant=\"tertiary-neutral\"\n                    size=\"small\"\n                    name=\"Åpne\"\n                    aria-label=\"Åpne\"\n                    icon={\n                        <ChevronRightIcon\n                            aria-hidden\n                            className=\"translate-x-0 group-hover:translate-x-1 transition-transform\"\n                        />\n                    }\n                />\n            </HStack>\n        </Card>\n    );\n};\n","import { Heading, Skeleton, VStack } from '@navikt/ds-react';\nimport { useNavigate, useSearch } from '@tanstack/react-router';\nimport { Suspense, useCallback } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { OppgaveListFilter } from 'src/components/Oppgave/List/Filter';\nimport { OppgaveItem } from 'src/components/Oppgave/List/OppgaveItem';\nimport { PaginatedList } from 'src/components/PaginatedList';\nimport { getOppgaveId, useFilterOppgave } from './utils';\n\nexport const OppgaverList = () => (\n    <VStack minHeight=\"0\" gap=\"2\">\n        <OppgaveListFilter />\n        <ErrorBoundary boundaryName=\"oppgaverList\">\n            <Suspense\n                fallback={\n                    <VStack gap=\"2\" marginInline=\"0 2\">\n                        {Array(8)\n                            .keys()\n                            .map((i) => (\n                                <Skeleton key={i} variant=\"rounded\" height={68} width=\"100%\" />\n                            ))}\n                    </VStack>\n                }\n            >\n                <OppgaveList />\n            </Suspense>\n        </ErrorBoundary>\n    </VStack>\n);\n\nconst OppgaveList = () => {\n    const oppgaver = useFilterOppgave();\n    const navigate = useNavigate({ from: '/new/person/oppgaver' });\n\n    const handleClick = useCallback(\n        (id: string) => {\n            navigate({ search: { id } });\n        },\n        [navigate]\n    );\n\n    const selectedKey = useSearch({\n        from: '/new/person/oppgaver',\n        select: (p) => p.id\n    });\n\n    return (\n        <>\n            <Heading className=\"pl-1\" size=\"xsmall\" level=\"2\">\n                {oppgaver.length} {oppgaver.length === 1 ? 'oppgave' : 'oppgaver'}\n            </Heading>\n            {oppgaver.length > 0 && (\n                <PaginatedList\n                    selectedKey={selectedKey}\n                    items={oppgaver}\n                    keyExtractor={getOppgaveId}\n                    renderItem={({ item }) => <OppgaveItem oppgave={item} handleClick={handleClick} />}\n                />\n            )}\n        </>\n    );\n};\n","import { HGrid, Heading, VStack } from '@navikt/ds-react';\nimport { OppgaveDetail } from 'src/components/Oppgave/Details';\nimport { OppgaverList } from 'src/components/Oppgave/List';\n\nexport const OppgaverPage = () => {\n    return (\n        <HGrid\n            gap=\"1\"\n            columns={{ xs: 1, md: 'max-content 1fr' }}\n            height=\"100%\"\n            width=\"100%\"\n            overflow={{ xs: 'scroll', md: 'hidden' }}\n        >\n            <VStack height=\"100%\" gap=\"1\" width=\"100%\" maxWidth={{ md: '16em' }} overflow={{ md: 'hidden' }}>\n                <Heading size=\"small\">Oppgaver</Heading>\n                <OppgaverList />\n            </VStack>\n            <VStack className=\"min-h-100 md:min-h-0\" overflow={{ xs: 'hidden', md: 'scroll' }}>\n                <VStack minHeight=\"0\" className=\"mt-6\">\n                    <OppgaveDetail />\n                </VStack>\n            </VStack>\n        </HGrid>\n    );\n};\n","import { createLazyFileRoute } from '@tanstack/react-router';\nimport { OppgaverPage } from 'src/components/Oppgave';\n\nexport const Route = createLazyFileRoute('/new/person/oppgaver')({\n    component: OppgaverPage\n});\n"],"names":["routeApi","getRouteApi","OppgaveOgDialogDetail","$","_c","id","useSearch","oppgaver","useFilterOppgave","t0","t1","item","getOppgaveId","find","valgtOppgave","filterAtomValue","useAtomValue","oppgaveFilterAtom","prevFilterRef","useRef","t2","filterEndret","JSON","stringify","current","oppgaveIkkeIListe","includes","oppgaveRouteMiddleware","clear","useEffect","length","t3","Symbol","for","jsx","Alert","HStack","GuidePanel","OppgaveContent","t4","oppgaveId","traadId","TraadDetail","t5","jsxs","VStack","OppgaveDetail","ErrorBoundary","Suspense","Skeleton","OppgaveItem","oppgave","handleClick","data","gsakTema","useGsakTema","tema","oppgavetype","kode","oppgaveTyper","oppgavetyper","o","aktivOppgaveId","tekst","t6","Heading","t7","BodyShort","t8","t9","t10","t11","fristFerdigstillelse","formatterDato","t12","t13","t14","Button","ChevronRightIcon","t15","t16","Card","OppgaverList","OppgaveListFilter","Array","keys","map","i","OppgaveList","from","navigate","useNavigate","search","select","_temp","selectedKey","PaginatedList","p","OppgaverPage","xs","md","HGrid","Route","createLazyFileRoute","component"],"mappings":"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"}