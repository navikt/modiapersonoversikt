{"version":3,"file":"loginWebWorker-CtsPwpup.js","sources":["../src/login/AcitivityMonitor.ts","../src/login/constants.ts","../src/login/timeToExpiration.ts","../src/login/LoginStateManager.ts","../src/loginWebWorker.ts"],"sourcesContent":["export class ActivityMonitor {\n    private lastActivity: number = new Date().getTime();\n\n    public update() {\n        this.lastActivity = new Date().getTime();\n    }\n\n    public timeSinceLastActivity(): number {\n        return new Date().getTime() - this.lastActivity;\n    }\n}\n","const SECOND_IN_MS = 1000;\nconst MINUTE_IN_MS = 60 * SECOND_IN_MS;\n\nexport const RECALC_LOGIN_STATUS_INTERVAL_IN_MS = 30 * SECOND_IN_MS;\nexport const INACTIVITY_LIMIT_IN_MS = 10 * MINUTE_IN_MS;\nexport const PREEMPTIVE_REFRESH_TIME_IN_MS = 120 * SECOND_IN_MS;\nexport const ESTIMATED_EXPIRATION_IN_MS = 3600 * SECOND_IN_MS;\nexport const INVALID_EXPIRATION_DATE = -1;\n","import { ESTIMATED_EXPIRATION_IN_MS, INVALID_EXPIRATION_DATE } from './constants';\n\nexport const timeToExpiration = (expirationDate: number): number => {\n    if (expirationDate === INVALID_EXPIRATION_DATE) {\n        return ESTIMATED_EXPIRATION_IN_MS;\n    }\n    const currentDate = new Date().getTime();\n    return expirationDate - currentDate;\n};\n","import { ActivityMonitor } from './AcitivityMonitor';\nimport { INACTIVITY_LIMIT_IN_MS, PREEMPTIVE_REFRESH_TIME_IN_MS, RECALC_LOGIN_STATUS_INTERVAL_IN_MS } from './constants';\nimport { timeToExpiration } from './timeToExpiration';\nimport type { AuthIntropectionDTO } from './use-persistent-ww-login';\n\nexport class LoginStateManager {\n    private timeout: ReturnType<typeof setTimeout> | null = null;\n    private interval: ReturnType<typeof setInterval> | null = null;\n    private activityMonitor = new ActivityMonitor();\n    private _refreshToken?: () => void;\n    private _onLoginStateUpdate?: (props: { isLoggedIn: boolean }) => void;\n\n    initialize = (refreshToken: () => void, onLoginStateUpdate: (props: { isLoggedIn: boolean }) => void) => {\n        this._refreshToken = refreshToken;\n        this._onLoginStateUpdate = onLoginStateUpdate;\n    };\n\n    private setupTokenRefresher = (timeToRefresh: number) => {\n        this.timeout = this.getTokenRefreshTimeout(this.activityMonitor, timeToRefresh);\n    };\n\n    private get refreshToken() {\n        if (!this._refreshToken) {\n            throw new Error('[LoginStateManager] var ikke initialisert med en metode for å refreshe token');\n        }\n        return this._refreshToken;\n    }\n\n    private get onLoginStateUpdate() {\n        if (!this._onLoginStateUpdate) {\n            throw new Error('[LoginStateManager] var ikke initialisert med en metode for å sende login oppdateringer');\n        }\n        return this._onLoginStateUpdate;\n    }\n\n    private getTokenRefreshTimeout = (activityMonitor: ActivityMonitor, timeToExpiration: number) => {\n        return setTimeout(() => {\n            if (activityMonitor.timeSinceLastActivity() < INACTIVITY_LIMIT_IN_MS) {\n                if (!this.refreshToken) {\n                    throw new Error('[LoginStateManager] Var ikke initialisert med ');\n                }\n                if (this.refreshToken) {\n                    this.refreshToken();\n                }\n            }\n        }, timeToExpiration - PREEMPTIVE_REFRESH_TIME_IN_MS);\n    };\n\n    private getLoginStateInterval = (auth: AuthIntropectionDTO) => {\n        return setInterval(() => {\n            const timeLeft = timeToExpiration(auth.expirationDate);\n            if (this.onLoginStateUpdate) {\n                this.onLoginStateUpdate({ isLoggedIn: timeLeft > 0 });\n            }\n        }, RECALC_LOGIN_STATUS_INTERVAL_IN_MS);\n    };\n\n    private onAuthStateUpdate = (auth: AuthIntropectionDTO) => {\n        this.stopTokenRefresher();\n        const timeToRefresh = timeToExpiration(auth.expirationDate);\n        if (timeToRefresh === 0) {\n            if (this.refreshToken) {\n                this.refreshToken();\n            }\n            return;\n        }\n        this.setupTokenRefresher(timeToRefresh);\n    };\n\n    private setupLoginStateNotifier = (auth: AuthIntropectionDTO) => {\n        this.stopLoginStateNotifier();\n        this.interval = this.getLoginStateInterval(auth);\n    };\n\n    private stopTokenRefresher = () => {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n    };\n\n    private stopLoginStateNotifier = () => {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    };\n\n    onUserActive = () => {\n        this.activityMonitor.update();\n    };\n\n    onUpdate = (auth: AuthIntropectionDTO) => {\n        this.onAuthStateUpdate(auth);\n        this.setupLoginStateNotifier(auth);\n    };\n\n    stopWork = () => {\n        this.stopTokenRefresher();\n        this.stopLoginStateNotifier();\n    };\n}\n","import { LoginStateManager } from './login/LoginStateManager';\nimport type { IncommingMessageType, OutgoingMessageType } from './login/types';\n\nconst loginStateManager = new LoginStateManager();\n\nconst register = () => {\n    console.log('Bruker webworker for å kontrollere inlogging');\n    self.addEventListener('message', handleEventMessage);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n//biome-ignore lint/suspicious/noExplicitAny: biome migration\nconst handleEventMessage = (event: MessageEvent<{ type: IncommingMessageType; payload: any }>) => {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const { type, payload } = event.data;\n    switch (type) {\n        case 'STOP_WORKER':\n            loginStateManager.stopWork();\n            console.log('[loginWebWorker] Mottok melding: ', type);\n            return;\n        case 'AUTH_STATE_UPDATE':\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            loginStateManager.onUpdate(payload);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            console.log(`[loginWebWorker] Mottok melding: ${type}, med: ${payload.expirationDate}`);\n            return;\n        case 'USER_ACTIVE':\n            loginStateManager.onUserActive();\n            return;\n    }\n};\n\nconst sendRefreshMessage = () => {\n    sendMessage('REFRESH_TOKEN');\n};\n\nconst sendIsLoggedIn = ({ isLoggedIn }: { isLoggedIn: boolean }) => {\n    sendMessage('LOGIN_STATE_UPDATE', isLoggedIn);\n};\n\nconst sendMessage = <T>(type: OutgoingMessageType, payload?: T) => {\n    self.postMessage({ type, payload });\n};\n\nloginStateManager.initialize(sendRefreshMessage, sendIsLoggedIn);\n\nregister();\n"],"names":["ActivityMonitor","SECOND_IN_MS","MINUTE_IN_MS","RECALC_LOGIN_STATUS_INTERVAL_IN_MS","INACTIVITY_LIMIT_IN_MS","PREEMPTIVE_REFRESH_TIME_IN_MS","ESTIMATED_EXPIRATION_IN_MS","INVALID_EXPIRATION_DATE","timeToExpiration","expirationDate","currentDate","LoginStateManager","refreshToken","onLoginStateUpdate","timeToRefresh","activityMonitor","auth","timeLeft","loginStateManager","register","handleEventMessage","event","type","payload","sendRefreshMessage","sendMessage","sendIsLoggedIn","isLoggedIn"],"mappings":"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"}