{"version":3,"file":"utils-LiO40nVZ.js","sources":["../../src/components/Oppgave/List/Filter.tsx","../../src/components/Oppgave/List/utils.ts"],"sourcesContent":["import { Box, ExpansionCard, UNSAFE_Combobox, VStack } from '@navikt/ds-react';\nimport { atom, useAtom, useAtomValue } from 'jotai';\nimport { atomWithReset } from 'jotai/utils';\nimport { xor } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport DateRangeSelector, { getPeriodFromOption } from 'src/components/DateFilters/DatePeriodSelector';\nimport { type DateRange, PeriodType } from 'src/components/DateFilters/types';\nimport { useGsakTema } from 'src/lib/clients/modiapersonoversikt-api';\nimport { twMerge } from 'tailwind-merge';\n\nexport type OppgaveFilter = {\n    dateRange: DateRange;\n    tema: string[];\n};\n\nconst defaultDate = getPeriodFromOption(PeriodType.CUSTOM);\n\nexport const oppgaveFilterAtom = atomWithReset<OppgaveFilter>({\n    dateRange: defaultDate,\n    tema: []\n});\n\nconst oppgaveFilterTemaAtom = atom(\n    (get) => get(oppgaveFilterAtom).tema,\n    (_get, set, newVal: string) => {\n        set(oppgaveFilterAtom, (filters) => ({\n            ...filters,\n            tema: filters.tema ? xor(filters.tema, [newVal]) : [newVal]\n        }));\n    }\n);\n\nconst oppgaveFilterDateRangeAtom = atom(\n    (get) => get(oppgaveFilterAtom).dateRange,\n    (_get, set, dateRange: DateRange | null) => {\n        const range = dateRange ?? defaultDate;\n        set(oppgaveFilterAtom, (filters) => ({\n            ...filters,\n            dateRange: range\n        }));\n    }\n);\n\nconst DateFilter = () => {\n    const [value, setValue] = useAtom(oppgaveFilterDateRangeAtom);\n    return (\n        <DateRangeSelector resettable={false} range={value} onChange={setValue} defaultPeriodType={PeriodType.CUSTOM} />\n    );\n};\n\nconst TemaFilter = () => {\n    const [selectedTema, setSelectedTema] = useAtom(oppgaveFilterTemaAtom);\n    const { data: temaer } = useGsakTema();\n\n    const onToggleSelected = useCallback(\n        (option: string) => {\n            setSelectedTema(option);\n        },\n        [selectedTema]\n    );\n\n    return (\n        <UNSAFE_Combobox\n            size=\"small\"\n            label=\"Tema\"\n            options={temaer.map((o) => ({\n                label: `${o.tekst} [${o.kode}]`,\n                value: o.kode\n            }))}\n            isMultiSelect\n            selectedOptions={selectedTema}\n            onToggleSelected={onToggleSelected}\n        />\n    );\n};\n\nconst FilterTitle = () => {\n    const filters = useAtomValue(oppgaveFilterAtom);\n\n    const activeFilters = useMemo(() => {\n        let count = 0;\n        if (filters.tema && filters.tema.length > 0) {\n            count++;\n        }\n        if (filters.dateRange) {\n            count++;\n        }\n\n        return count ? `(${count})` : null;\n    }, [filters]);\n\n    return <>Filter {activeFilters}</>;\n};\n\nexport const OppgaveListFilter = () => {\n    const [open, setOpen] = useState(false);\n    const expansionFilterRef = useRef<HTMLDivElement>(null);\n\n    const handleExpansionChange = () => {\n        setTimeout(() => {\n            if (!expansionFilterRef.current) return;\n            setOpen(expansionFilterRef.current.classList.contains('aksel-expansioncard--open'));\n        }, 0);\n    };\n    return (\n        <Box.New marginInline=\"0 2\" maxHeight={open ? '100%' : {}}>\n            <ExpansionCard\n                size=\"small\"\n                aria-label=\"Filtrer oppgaver\"\n                ref={expansionFilterRef}\n                onClick={handleExpansionChange}\n                className={twMerge(open && 'max-h-full overflow-auto')}\n            >\n                <ExpansionCard.Header className=\"p-1\">\n                    <Box.New paddingInline=\"4\">\n                        <ExpansionCard.Title size=\"small\">\n                            <FilterTitle />\n                        </ExpansionCard.Title>\n                    </Box.New>\n                </ExpansionCard.Header>\n                <ExpansionCard.Content className=\"overflow-visible\">\n                    <VStack gap=\"2\">\n                        <Box.New maxWidth=\"17rem\">\n                            <TemaFilter />\n                        </Box.New>\n                        <Box.New>\n                            <DateFilter />\n                        </Box.New>\n                    </VStack>\n                </ExpansionCard.Content>\n            </ExpansionCard>\n        </Box.New>\n    );\n};\n","import dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai/index';\nimport { useMemo } from 'react';\nimport { type OppgaveFilter, oppgaveFilterAtom } from 'src/components/Oppgave/List/Filter';\nimport { usePersonOppgaver } from 'src/lib/clients/modiapersonoversikt-api';\nimport type { OppgaveDto } from 'src/lib/types/modiapersonoversikt-api';\nimport { datoSynkende } from 'src/utils/date-utils';\n\nconst filterOppdave = (oppgaver: OppgaveDto[], filters: OppgaveFilter): OppgaveDto[] => {\n    const { tema, dateRange } = filters;\n\n    if (!oppgaver || oppgaver.length === 0) {\n        return [];\n    }\n    let filteredList = oppgaver;\n\n    if (tema?.length) {\n        filteredList = filteredList.filter((oppgave) => tema.includes(oppgave.tema));\n    }\n\n    if (dateRange?.from && dateRange?.to) {\n        filteredList = filteredList.filter((oppgave) => {\n            const dato = dayjs(oppgave.aktivDato);\n            return dato.isSameOrAfter(dateRange.from) && dato.isSameOrBefore(dateRange.to);\n        });\n    }\n\n    return filteredList ?? [];\n};\n\nexport const useFilterOppgave = () => {\n    const filters = useAtomValue(oppgaveFilterAtom);\n    const { data } = usePersonOppgaver();\n\n    const oppgaver = data.sort(datoSynkende((v) => v.aktivDato));\n\n    return useMemo(() => filterOppdave(oppgaver, filters), [oppgaver, filters]);\n};\n\nexport const getOppgaveId = (oppgave: OppgaveDto) => {\n    return `Oppgave${oppgave.oppgaveId}`;\n};\n"],"names":["defaultDate","getPeriodFromOption","PeriodType","CUSTOM","oppgaveFilterAtom","atomWithReset","dateRange","tema","oppgaveFilterTemaAtom","atom","get","_get","set","newVal","filters","xor","oppgaveFilterDateRangeAtom","range","DateFilter","$","_c","value","setValue","useAtom","t0","jsx","DateRangeSelector","TemaFilter","selectedTema","setSelectedTema","data","temaer","useGsakTema","onToggleSelected","useCallback","option","UNSAFE_Combobox","map","o","label","tekst","kode","FilterTitle","useAtomValue","count","length","activeFilters","t1","jsxs","Fragment","OppgaveListFilter","open","setOpen","useState","expansionFilterRef","useRef","Symbol","for","setTimeout","current","classList","contains","handleExpansionChange","t2","t3","twMerge","t4","ExpansionCard","Box","t5","t6","VStack","t7","t8","filterOppdave","oppgaver","filteredList","filter","oppgave","includes","from","to","dato","dayjs","aktivDato","isSameOrAfter","isSameOrBefore","useFilterOppgave","usePersonOppgaver","sort","datoSynkende","v","useMemo","getOppgaveId","oppgaveId"],"mappings":"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"}