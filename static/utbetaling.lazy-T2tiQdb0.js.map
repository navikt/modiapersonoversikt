{"version":3,"file":"utbetaling.lazy-T2tiQdb0.js","sources":["../../src/components/Utbetaling/List/utils.ts","../../src/components/Utbetaling/List/Filter.tsx","../../src/components/Utbetaling/Detail/index.tsx","../../src/components/Utbetaling/List/UtbetalingItem.tsx","../../src/components/Utbetaling/List/index.tsx","../../src/components/Utbetaling/index.tsx","../../src/routes/new/person/utbetaling.lazy.tsx"],"sourcesContent":["import dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport { useMemo } from 'react';\nimport { type UtbetalingFilter, utbetalingFilterAtom } from 'src/components/Utbetaling/List/Filter';\nimport { useUtbetalinger } from 'src/lib/clients/modiapersonoversikt-api';\nimport { usePersonAtomValue } from 'src/lib/state/context';\nimport type { Utbetaling, Ytelse, YtelsePeriode } from 'src/lib/types/modiapersonoversikt-api';\nimport { datoSynkende } from 'src/utils/date-utils';\nimport { finnMiljoStreng } from 'src/utils/url-utils';\n\nconst filterUtbetalinger = (utbetalinger: Utbetaling[], filters: UtbetalingFilter): Utbetaling[] => {\n    const { ytelseTyper, utbetaltTil, dateRange } = filters;\n\n    if (!utbetalinger || utbetalinger.length === 0) {\n        return [];\n    }\n\n    let filteredList = utbetalinger;\n    if (ytelseTyper?.length) {\n        filteredList = filteredList.filter((utbetaling) =>\n            utbetaling.ytelser.some((item) => item.type && ytelseTyper.includes(item.type))\n        );\n    }\n\n    if (utbetaltTil?.length) {\n        filteredList = filteredList.filter(\n            (utbetaling) =>\n                (utbetaling.erUtbetaltTilOrganisasjon && utbetaltTil.includes(utbetaltTilOrganisasjon)) ||\n                (utbetaling.erUtbetaltTilSamhandler && utbetaltTil.includes(utbetaltTilSamhandler)) ||\n                (utbetaling.erUtbetaltTilPerson && utbetaltTil.includes(utbetaltTilBruker))\n        );\n    }\n\n    if (dateRange?.from && dateRange?.to) {\n        filteredList = filteredList.filter((utbetaling) => {\n            const dato = dayjs(utbetaling.posteringsdato);\n            return dato.isSameOrAfter(dateRange.from) && dato.isSameOrBefore(dateRange.to);\n        });\n    }\n\n    return filteredList;\n};\n\nexport const useFilterUtbetalinger = () => {\n    const filters = useAtomValue(utbetalingFilterAtom);\n    const startDato = filters.dateRange.from.format('YYYY-MM-DD');\n    const sluttDato = filters.dateRange.to.format('YYYY-MM-DD');\n    const { data } = useUtbetalinger(startDato, sluttDato);\n    const utbetalinger = data?.utbetalinger ?? [];\n\n    const sortedUtbetalinger = utbetalinger.toSorted(datoSynkende((t) => t.posteringsdato));\n\n    return useMemo(() => filterUtbetalinger(sortedUtbetalinger, filters), [utbetalinger, filters]);\n};\n\nexport const getNettoSumYtelser = (ytelser: Ytelse[]): number => {\n    return ytelser.reduce((acc: number, ytelse: Ytelse) => acc + ytelse.nettobelop, 0);\n};\n\nexport const getBruttoSumYtelser = (ytelser: Ytelse[]): number => {\n    return ytelser.reduce((acc: number, ytelse: Ytelse) => acc + ytelse.ytelseskomponentersum, 0);\n};\n\nexport const getTrekkSumYtelser = (ytelser: Ytelse[]): number => {\n    return ytelser.reduce((acc: number, ytelse: Ytelse) => acc + ytelse.skattsum + ytelse.trekksum, 0);\n};\n\nexport const filtrerBortUtbetalingerSomIkkeErUtbetalt = (utbetaling: Utbetaling): boolean => {\n    return utbetaling.status.toLowerCase() === 'utbetalt';\n};\n\nexport const reduceUtbetlingerTilYtelser = (utbetalinger: Utbetaling[]): Ytelse[] => {\n    return utbetalinger.flatMap((utbetaling) => utbetaling.ytelser ?? []);\n};\n\nexport const formaterNOK = (belop: number): string => {\n    return belop.toLocaleString('no', { minimumFractionDigits: 2 });\n};\n\nexport const summertBelopFraUtbetalinger = (\n    utbetalinger: Utbetaling[],\n    getSumFromYtelser: (ytelser: Ytelse[]) => number,\n    fjernUtbetalingerSomIkkeErUtbetalt: boolean\n): string => {\n    const ytelser = utbetalinger\n        .filter((utbetaling) => !fjernUtbetalingerSomIkkeErUtbetalt || utbetaling.status.toLowerCase() === 'utbetalt')\n        .flatMap((utbetaling) => utbetaling.ytelser ?? []);\n    const sum = getSumFromYtelser(ytelser);\n    return formaterNOK(sum);\n};\n\nexport const getTypeFromYtelse = (ytelse: Ytelse) => ytelse.type || 'Mangler beskrivelse';\n\nexport const getPeriodeFromYtelser = (ytelser: Ytelse[]): YtelsePeriode => {\n    return ytelser.reduce(\n        (acc: YtelsePeriode, ytelse: Ytelse) => {\n            if (!ytelse.periode) {\n                return acc;\n            }\n            return {\n                start: dayjs(ytelse.periode.start).isBefore(dayjs(acc.start)) ? ytelse.periode.start : acc.start,\n                slutt: dayjs(ytelse.periode.slutt).isAfter(dayjs(acc.slutt)) ? ytelse.periode.slutt : acc.slutt\n            };\n        },\n        {\n            start: dayjs().format(),\n            slutt: dayjs(0).format()\n        }\n    );\n};\n\nexport const arenaURL = () => {\n    const utbetalingUrlPart = '?oppstart_skj=UB_22_MELDEHISTORIKK&fodselsnr=';\n    const fnr = usePersonAtomValue();\n    const domainUrlPart = `http://arena${finnMiljoStreng()}.adeo.no/`;\n    const standardArenaUrlPart = `forms/arenaMod${finnMiljoStreng().replace('-', '_')}.html`;\n\n    return domainUrlPart + standardArenaUrlPart + utbetalingUrlPart + fnr;\n};\n\nexport const getUtbetalingId = (utbetaling: Utbetaling) =>\n    `${utbetaling.ytelser?.map((item) => item.type?.replace(/\\s+/g, ''))?.join('')}${utbetaling.posteringsdato}`;\n\nconst utbetaltTilBruker = 'Bruker';\nconst utbetaltTilOrganisasjon = 'Organisasjon';\nconst utbetaltTilSamhandler = 'Samhandler';\n\nexport const utbetalingMottakere = [utbetaltTilBruker, utbetaltTilOrganisasjon, utbetaltTilSamhandler];\n","import { Box, ExpansionCard, Fieldset, Skeleton, Switch, UNSAFE_Combobox, VStack } from '@navikt/ds-react';\nimport { atom, useAtom, useAtomValue } from 'jotai';\nimport { atomWithReset } from 'jotai/utils';\nimport { xor } from 'lodash';\nimport { Suspense, useCallback, useMemo, useRef, useState } from 'react';\nimport DateRangeSelector, { getPeriodFromOption } from 'src/components/DateFilters/DatePeriodSelector';\nimport { type DateRange, PeriodType } from 'src/components/DateFilters/types';\nimport { reduceUtbetlingerTilYtelser, utbetalingMottakere } from 'src/components/Utbetaling/List/utils';\nimport type { Utbetaling, Ytelse } from 'src/generated/modiapersonoversikt-api';\nimport { useUtbetalinger } from 'src/lib/clients/modiapersonoversikt-api';\nimport { sorterAlfabetisk } from 'src/utils/string-utils';\nimport { twMerge } from 'tailwind-merge';\n\nexport type UtbetalingFilter = {\n    dateRange: DateRange;\n    ytelseTyper: string[];\n    utbetaltTil: string[];\n};\n\nconst defaultDate = getPeriodFromOption(PeriodType.CUSTOM);\n\nexport const utbetalingFilterAtom = atomWithReset<UtbetalingFilter>({\n    dateRange: defaultDate,\n    ytelseTyper: [],\n    utbetaltTil: utbetalingMottakere\n});\n\nconst utbetalingFilterYtelseTypeAtom = atom(\n    (get) => get(utbetalingFilterAtom).ytelseTyper,\n    (_get, set, newVal: string) => {\n        set(utbetalingFilterAtom, (filters) => ({\n            ...filters,\n            ytelseTyper: filters.ytelseTyper ? xor(filters.ytelseTyper, [newVal]) : [newVal]\n        }));\n    }\n);\n\nconst utbetalingFilterUtbetaltTilAtom = atom(\n    (get) => get(utbetalingFilterAtom).utbetaltTil,\n    (_get, set, newVal: string) => {\n        set(utbetalingFilterAtom, (filters) => ({\n            ...filters,\n            utbetaltTil: xor(filters.utbetaltTil, [newVal])\n        }));\n    }\n);\n\nexport const utbetalingFilterDateRangeAtom = atom(\n    (get) => get(utbetalingFilterAtom).dateRange,\n    (_get, set, dateRange: DateRange | null) => {\n        const range = dateRange ?? defaultDate;\n        set(utbetalingFilterAtom, (filters) => ({\n            ...filters,\n            dateRange: range\n        }));\n    }\n);\n\nconst DateFilter = () => {\n    const [value, setValue] = useAtom(utbetalingFilterDateRangeAtom);\n    return <DateRangeSelector range={value} onChange={setValue} />;\n};\n\nconst UtbetalingYtelserFilter = () => {\n    const [selectedYtelse, setSelectedYtelse] = useAtom(utbetalingFilterYtelseTypeAtom);\n    const dateRange = useAtomValue(utbetalingFilterDateRangeAtom);\n    const startDato = dateRange.from.format('YYYY-MM-DD');\n    const sluttDato = dateRange.to.format('YYYY-MM-DD');\n    const { data } = useUtbetalinger(startDato, sluttDato);\n    const utbetalinger = data?.utbetalinger ?? [];\n\n    const onToggleSelected = useCallback(\n        (option: string) => {\n            setSelectedYtelse(option);\n        },\n        [setSelectedYtelse]\n    );\n\n    const getUnikeYtelser = (data: Utbetaling[]): string[] => {\n        const getTypeFromYtelse = (ytelse: Ytelse) => ytelse.type || 'Mangler beskrivelse';\n        const fjernDuplikater = (ytelse: string, index: number, self: Array<string>) => self.indexOf(ytelse) === index;\n        return reduceUtbetlingerTilYtelser(data).map(getTypeFromYtelse).filter(fjernDuplikater).sort(sorterAlfabetisk);\n    };\n\n    const unikeYtelser = getUnikeYtelser(utbetalinger);\n\n    return (\n        <UNSAFE_Combobox\n            size=\"small\"\n            label=\"Ytelse\"\n            options={unikeYtelser}\n            isMultiSelect\n            selectedOptions={selectedYtelse}\n            onToggleSelected={onToggleSelected}\n        />\n    );\n};\n\nconst UtbetaltTilFilter = () => {\n    const [selectedMottakere, setSelectedMottakere] = useAtom(utbetalingFilterUtbetaltTilAtom);\n    const onToggleSelected = useCallback(\n        (option: string) => {\n            setSelectedMottakere(option);\n        },\n        [setSelectedMottakere]\n    );\n\n    return (\n        <Fieldset size=\"small\" legend=\"Utbetaling til\">\n            <VStack gap=\"2\">\n                {utbetalingMottakere.map((mottaker) => (\n                    <Switch\n                        key={mottaker}\n                        size=\"small\"\n                        checked={selectedMottakere.includes(mottaker)}\n                        onChange={() => onToggleSelected(mottaker)}\n                    >\n                        {mottaker}\n                    </Switch>\n                ))}\n            </VStack>\n        </Fieldset>\n    );\n};\n\nconst FilterTitle = () => {\n    const filters = useAtomValue(utbetalingFilterAtom);\n\n    const activeFilters = useMemo(() => {\n        let count = 0;\n        if (filters.ytelseTyper && filters.ytelseTyper.length > 0) {\n            count++;\n        }\n        if (filters.utbetaltTil && filters.utbetaltTil.length > 0) {\n            count++;\n        }\n        if (filters.dateRange) {\n            count++;\n        }\n\n        return count ? `(${count})` : null;\n    }, [filters]);\n\n    return <>Filter {activeFilters}</>;\n};\n\nexport const UtbetalingListFilter = () => {\n    const [open, setOpen] = useState(false);\n    const expansionFilterRef = useRef<HTMLDivElement>(null);\n\n    const handleExpansionChange = () => {\n        setTimeout(() => {\n            if (!expansionFilterRef.current) return;\n            setOpen(expansionFilterRef.current.classList.contains('aksel-expansioncard--open'));\n        }, 0);\n    };\n    return (\n        <Box.New marginInline=\"0 2\" className={twMerge(open && 'max-h-full')}>\n            <ExpansionCard\n                onClick={handleExpansionChange}\n                ref={expansionFilterRef}\n                className={twMerge(open && 'max-h-full overflow-auto')}\n                size=\"small\"\n                aria-label=\"Filtrer utbetalinger\"\n            >\n                <ExpansionCard.Header className=\"p-1\">\n                    <Box.New paddingInline=\"4\">\n                        <ExpansionCard.Title size=\"small\">\n                            <FilterTitle />\n                        </ExpansionCard.Title>\n                    </Box.New>\n                </ExpansionCard.Header>\n                <ExpansionCard.Content className=\"overflow-visible\">\n                    <VStack gap=\"2\">\n                        <Box.New maxWidth=\"17rem\">\n                            <Suspense\n                                fallback={\n                                    <VStack gap=\"2\">\n                                        <span className=\"font-ax-bold\">Ytelse</span>\n                                        <Skeleton width=\"100%\" variant=\"rounded\" height=\"2rem\" />\n                                    </VStack>\n                                }\n                            >\n                                <UtbetalingYtelserFilter />\n                            </Suspense>\n                        </Box.New>\n                        <Box.New maxWidth=\"17rem\">\n                            <UtbetaltTilFilter />\n                        </Box.New>\n                        <Box.New>\n                            <DateFilter />\n                        </Box.New>\n                    </VStack>\n                </ExpansionCard.Content>\n            </ExpansionCard>\n        </Box.New>\n    );\n};\n","import { PrinterSmallIcon } from '@navikt/aksel-icons';\nimport {\n    Alert,\n    BodyLong,\n    BodyShort,\n    Box,\n    Button,\n    GuidePanel,\n    HGrid,\n    HStack,\n    Heading,\n    Skeleton,\n    Table,\n    VStack\n} from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai';\nimport { Suspense, useRef } from 'react';\nimport { useEffect } from 'react';\nimport Card from 'src/components/Card';\nimport type { DateRange } from 'src/components/DateFilters/types';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { utbetalingFilterAtom, utbetalingFilterDateRangeAtom } from 'src/components/Utbetaling/List/Filter';\nimport {\n    filtrerBortUtbetalingerSomIkkeErUtbetalt,\n    formaterNOK,\n    getBruttoSumYtelser,\n    getNettoSumYtelser,\n    getPeriodeFromYtelser,\n    getTrekkSumYtelser,\n    getTypeFromYtelse,\n    getUtbetalingId,\n    reduceUtbetlingerTilYtelser,\n    summertBelopFraUtbetalinger,\n    useFilterUtbetalinger\n} from 'src/components/Utbetaling/List/utils';\nimport type { Utbetaling, Ytelse } from 'src/generated/modiapersonoversikt-api';\nimport { utbetalingRouteMiddleware } from 'src/routes/new/person/utbetaling';\nimport { formatterDato } from 'src/utils/date-utils';\nimport { groupArray } from 'src/utils/groupArray';\nimport { loggEvent } from 'src/utils/logger/frontendLogger';\nimport usePrinter from 'src/utils/print/usePrinter';\nimport { formaterDato, sorterAlfabetisk } from 'src/utils/string-utils';\n\nconst getTypeOgAarFromYtelse = (ytelse: Ytelse): string => {\n    return `${getTypeFromYtelse(ytelse)} ${dayjs(ytelse.periode?.slutt).year()}`;\n};\n\nconst getAlleUtbetalteYtelserFraUtbetalinger = (utbetalinger: Utbetaling[]) => {\n    const utbetalteUtbetalinger = utbetalinger.filter(filtrerBortUtbetalingerSomIkkeErUtbetalt);\n    return reduceUtbetlingerTilYtelser(utbetalteUtbetalinger);\n};\n\nconst getAlleYtelsesKomponenterFraYtelser = (ytelser: Ytelse[]) => {\n    return ytelser.flatMap((ytelse) => ytelse.ytelseskomponentListe ?? []);\n};\n\nconst getYtelsesKomponentSammendragListe = (ytelser: Ytelse[]) => {\n    const alleYtelsesKomponenter = getAlleYtelsesKomponenterFraYtelser(ytelser);\n    const ytelsesKomponenterGruppertPaaType = groupArray(\n        alleYtelsesKomponenter,\n        (ytelseskomponent) => ytelseskomponent.ytelseskomponenttype\n    );\n    const listeKomponenter = ytelsesKomponenterGruppertPaaType.map((gruppe) => {\n        const sum = gruppe.array.reduce((acc, ytelsesKomponent) => acc + ytelsesKomponent.ytelseskomponentbelop, 0);\n        return (\n            <HStack wrap={false} gap=\"4\" justify=\"start\" key={gruppe.category}>\n                <BodyLong spacing>{gruppe.category}</BodyLong>\n                <BodyLong spacing>{formaterNOK(sum)}</BodyLong>\n            </HStack>\n        );\n    });\n\n    return <dl>{listeKomponenter}</dl>;\n};\n\nconst getYtelsesKomponentDetail = (ytelse: Ytelse) => {\n    const ytelseskomponentListe = ytelse.ytelseskomponentListe.map((komponent) => ({\n        type: komponent.ytelseskomponenttype,\n        sats: komponent.satsbelop ? formaterNOK(komponent.satsbelop) : '-',\n        antall: `${komponent.satsantall}`,\n        belop: formaterNOK(komponent.ytelseskomponentbelop)\n    }));\n\n    const skattListe = ytelse.skattListe.map((komponent) => ({\n        type: 'Skattetrekk',\n        sats: '-',\n        antall: '-',\n        belop: formaterNOK(komponent.skattebelop)\n    }));\n\n    const trekkListe = ytelse.trekkListe.map((komponent) => ({\n        type: komponent.trekktype,\n        sats: '-',\n        antall: '-',\n        belop: formaterNOK(komponent.trekkbelop)\n    }));\n\n    const komponenter = ytelseskomponentListe.concat(skattListe, trekkListe);\n\n    return (\n        <VStack align=\"end\" className=\"p-2 border border-border-subtle rounded-md\">\n            {komponenter.length > 0 && (\n                <Table size=\"small\" zebraStripes={true}>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.DataCell scope=\"col\" />\n                            <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                                Sats\n                            </Table.HeaderCell>\n                            <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                                Antall\n                            </Table.HeaderCell>\n                            <Table.HeaderCell scope=\"col\" className=\"w-24\">\n                                Beløp\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>\n                        {komponenter.map((komponent, i) => {\n                            return (\n                                <Table.Row key={i + komponent.type}>\n                                    <Table.DataCell>{komponent.type}</Table.DataCell>\n                                    <Table.DataCell>{komponent.sats}</Table.DataCell>\n                                    <Table.DataCell>{komponent.antall}</Table.DataCell>\n                                    <Table.DataCell>{komponent.belop}</Table.DataCell>\n                                </Table.Row>\n                            );\n                        })}\n                    </Table.Body>\n                </Table>\n            )}\n            <HStack justify=\"space-between\" gap=\"3\" className=\"my-4 mr-6\">\n                <BodyShort size=\"small\" weight=\"semibold\">\n                    Nettobeløp:\n                </BodyShort>\n                <BodyShort size=\"small\" weight=\"semibold\">\n                    {formaterNOK(ytelse.nettobelop)}\n                </BodyShort>\n            </HStack>\n        </VStack>\n    );\n};\n\nconst UtbetalingerYtelserSammendrag = ({ ytelser, expandTable }: { ytelser: Ytelse[]; expandTable: boolean }) => {\n    const ytelserGruppertPaaTema = groupArray(ytelser, getTypeOgAarFromYtelse);\n\n    return (\n        <Table size=\"small\">\n            <caption className=\"font-bold text-left \">Sammendrag</caption>\n            <Table.Header>\n                <Table.Row>\n                    <Table.DataCell />\n                    <Table.DataCell />\n                    <Table.HeaderCell className=\"w-56\">Periode</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Brutto</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Trekk</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Utbetalt</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {ytelserGruppertPaaTema\n                    .sort((a, b) => sorterAlfabetisk(a.category, b.category))\n                    .map((gruppe, i) => {\n                        const ytelser = gruppe.array;\n                        const ytelsesType = gruppe.category;\n                        const periode = getPeriodeFromYtelser(ytelser);\n                        const ytelsesKomponentSammendragListe = getYtelsesKomponentSammendragListe(ytelser);\n\n                        return (\n                            <Table.ExpandableRow\n                                key={i + gruppe.category}\n                                content={ytelsesKomponentSammendragListe}\n                                defaultOpen={expandTable}\n                            >\n                                <Table.HeaderCell scope=\"row\">{ytelsesType}</Table.HeaderCell>\n                                <Table.DataCell>\n                                    {formaterDato(periode.start)} - {formaterDato(periode.slutt)}\n                                </Table.DataCell>\n                                <Table.DataCell>{formaterNOK(getBruttoSumYtelser(ytelser))}</Table.DataCell>\n                                <Table.DataCell>{formaterNOK(getTrekkSumYtelser(ytelser))}</Table.DataCell>\n                                <Table.DataCell>{formaterNOK(getNettoSumYtelser(ytelser))}</Table.DataCell>\n                            </Table.ExpandableRow>\n                        );\n                    })}\n            </Table.Body>\n        </Table>\n    );\n};\n\nconst UtbetalingtYtelseDetaljer = ({ ytelser }: { ytelser: Ytelse[] }) => {\n    return (\n        <Table size=\"small\" title={'Ytelser'}>\n            <Table.Header>\n                <Table.Row>\n                    <Table.DataCell />\n                    <Table.DataCell />\n                    <Table.HeaderCell className=\"w-56\">Periode</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Brutto</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Trekk</Table.HeaderCell>\n                    <Table.HeaderCell className=\"w-28\">Netto</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {ytelser.map((ytelse, i) => {\n                    const ytelsesType = ytelse.type ?? '';\n                    const periode = ytelse.periode\n                        ? `${formaterDato(ytelse.periode?.start)} - ${formaterDato(ytelse.periode?.slutt)}`\n                        : '';\n\n                    return (\n                        <Table.ExpandableRow\n                            key={i + ytelsesType}\n                            content={getYtelsesKomponentDetail(ytelse)}\n                            defaultOpen={true}\n                        >\n                            <Table.HeaderCell scope=\"row\">{ytelsesType}</Table.HeaderCell>\n                            <Table.DataCell>{periode}</Table.DataCell>\n                            <Table.DataCell>{formaterNOK(ytelse.ytelseskomponentersum)}</Table.DataCell>\n                            <Table.DataCell>{formaterNOK(ytelse.skattsum + ytelse.trekksum)}</Table.DataCell>\n                            <Table.DataCell>{formaterNOK(ytelse.nettobelop)}</Table.DataCell>\n                        </Table.ExpandableRow>\n                    );\n                })}\n            </Table.Body>\n        </Table>\n    );\n};\n\nconst UtbetaltBelop = ({ brutto, trekk, netto }: { brutto: string; trekk: string; netto: string }) => {\n    return (\n        <HGrid gap=\"4\" columns={4} marginBlock=\"4\" paddingBlock=\"4\" className=\"border-t border-border-subtle\">\n            <VStack justify=\"space-between\">\n                <BodyShort size=\"small\" weight=\"semibold\">\n                    Brutto:\n                </BodyShort>\n                <BodyShort size=\"small\">{brutto}</BodyShort>\n            </VStack>\n            <VStack justify=\"space-between\">\n                <BodyShort size=\"small\" weight=\"semibold\">\n                    Trekk:\n                </BodyShort>\n                <BodyShort size=\"small\">{trekk}</BodyShort>\n            </VStack>\n            <VStack justify=\"space-between\">\n                <BodyShort size=\"small\" weight=\"semibold\">\n                    Utbetalt:\n                </BodyShort>\n                <BodyShort size=\"small\">{netto}</BodyShort>\n            </VStack>\n        </HGrid>\n    );\n};\nconst UtbetalingDetaljer = ({ utbetaling }: { utbetaling: Utbetaling }) => {\n    const printer = usePrinter();\n    const brutto = summertBelopFraUtbetalinger([utbetaling], getBruttoSumYtelser, false);\n    const trekk = summertBelopFraUtbetalinger([utbetaling], getTrekkSumYtelser, true);\n    const netto = summertBelopFraUtbetalinger([utbetaling], getNettoSumYtelser, true);\n    const ytelser = utbetaling.ytelser;\n\n    const handlePrint = () => {\n        loggEvent('UtskriftTotaltUtbetalt', 'usePrinter');\n        printer.triggerPrint();\n    };\n\n    const PrinterWrapper = printer.printerWrapper;\n\n    return (\n        <Card padding=\"4\" className=\"mt-4\">\n            <PrinterWrapper>\n                <HStack justify=\"space-between\">\n                    <Heading as=\"h4\" size=\"small\">\n                        {utbetaling.ytelser\n                            ?.map((item) => item.type)\n                            ?.unique()\n                            .join(', ')}\n                    </Heading>\n                    <Button\n                        size=\"small\"\n                        variant=\"tertiary\"\n                        iconPosition=\"right\"\n                        icon={<PrinterSmallIcon aria-hidden />}\n                        onClick={handlePrint}\n                    >\n                        Skriv ut\n                    </Button>\n                </HStack>\n                <HGrid gap=\"4\" columns={2} className=\"mt-4\">\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Forfallsdato:\n                        </BodyShort>\n                        <BodyShort size=\"small\">\n                            {utbetaling.forfallsdato ? formatterDato(utbetaling.forfallsdato) : ''}\n                        </BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Utbetalingsdato:\n                        </BodyShort>\n                        <BodyShort size=\"small\">\n                            {utbetaling.utbetalingsdato ? formatterDato(utbetaling.utbetalingsdato) : ''}\n                        </BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Utbetalt til:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{utbetaling.utbetaltTil}</BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Kontonummer:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{utbetaling.konto}</BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Utbetalingsmetode:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{utbetaling.metode}</BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Utbetalingsstatus:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{utbetaling.status}</BodyShort>\n                    </VStack>\n                    <VStack justify=\"space-between\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Melding:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{utbetaling.melding}</BodyShort>\n                    </VStack>\n                </HGrid>\n                <UtbetaltBelop brutto={brutto} trekk={trekk} netto={netto} />\n                {ytelser?.length > 0 && (\n                    <div className=\"my-8\">\n                        <UtbetalingtYtelseDetaljer ytelser={ytelser} />\n                    </div>\n                )}\n            </PrinterWrapper>\n        </Card>\n    );\n};\n\nconst UtbetalingerSammendrag = ({ utbetalinger, periode }: { utbetalinger: Utbetaling[]; periode: DateRange }) => {\n    const printer = usePrinter();\n    const fom = periode.from.format('YYYY-MM-DD');\n    const tom = periode.to.format('YYYY-MM-DD');\n    const utbetalingsPeriode = `${fom} - ${tom}`;\n    const brutto = summertBelopFraUtbetalinger(utbetalinger, getBruttoSumYtelser, false);\n    const trekk = summertBelopFraUtbetalinger(utbetalinger, getTrekkSumYtelser, true);\n    const netto = summertBelopFraUtbetalinger(utbetalinger, getNettoSumYtelser, true);\n    const ytelser = getAlleUtbetalteYtelserFraUtbetalinger(utbetalinger);\n\n    const handlePrint = () => {\n        printer.triggerPrint();\n    };\n\n    const PrinterWrapper = printer.printerWrapper;\n\n    return (\n        <Card padding=\"4\">\n            <PrinterWrapper>\n                <HStack justify=\"space-between\">\n                    <Heading as=\"h3\" size=\"small\">\n                        Totalt utbetalt ({utbetalingsPeriode})\n                    </Heading>\n                    <Button\n                        size=\"small\"\n                        variant=\"tertiary\"\n                        iconPosition=\"right\"\n                        icon={<PrinterSmallIcon aria-hidden />}\n                        onClick={handlePrint}\n                    >\n                        Skriv ut\n                    </Button>\n                </HStack>\n                <BodyShort size=\"small\">\n                    Det finnes {utbetalinger.length} utbetalinger for valgt periode og filtrering\n                </BodyShort>\n                <UtbetaltBelop brutto={brutto} trekk={trekk} netto={netto} />\n                <VStack gap=\"2\" className=\"mt-4\">\n                    {ytelser?.length > 0 && <UtbetalingerYtelserSammendrag ytelser={ytelser} expandTable={true} />}\n                </VStack>\n            </PrinterWrapper>\n        </Card>\n    );\n};\n\nconst routeApi = getRouteApi('/new/person/utbetaling');\n\nconst UtbetalingDetail = ({ utbetalinger }: { utbetalinger: Utbetaling[] }) => {\n    const { id } = routeApi.useSearch();\n    const selectedUtbetaling = utbetalinger.find((item) => getUtbetalingId(item) === id);\n    const filterAtomValue = useAtomValue(utbetalingFilterAtom);\n    const prevFilterRef = useRef(utbetalingFilterAtom);\n\n    // Fjern utbetalingid i URL og cache hvis filteret er endret og utbetalingen ikke finnes i filtrerte utbetalinger\n    useEffect(() => {\n        const filterEndret = JSON.stringify(prevFilterRef.current.init) !== JSON.stringify(filterAtomValue);\n        const utbetalingIkkeIListe = !selectedUtbetaling || !utbetalinger.includes(selectedUtbetaling);\n        if (filterEndret && utbetalingIkkeIListe) {\n            utbetalingRouteMiddleware.clear();\n        }\n    }, [selectedUtbetaling, utbetalinger, filterAtomValue]);\n\n    if (utbetalinger.length === 0) {\n        return (\n            <Alert className=\"mt-6\" variant=\"info\">\n                Fant ingen utbetalinger\n            </Alert>\n        );\n    }\n\n    if (!id) {\n        return (\n            <HStack margin=\"4\">\n                <GuidePanel>Velg en utbetaling fra listen til venstre for å se detaljer.</GuidePanel>\n            </HStack>\n        );\n    }\n\n    if (!selectedUtbetaling) {\n        return (\n            <VStack flexGrow=\"1\" minHeight=\"0\" className=\"mt-6\">\n                <Alert variant=\"error\">Utbetalingen du valgte, ble ikke funnet.</Alert>\n            </VStack>\n        );\n    }\n\n    return (\n        <Box.New>\n            <UtbetalingDetaljer utbetaling={selectedUtbetaling} />\n        </Box.New>\n    );\n};\n\nconst UtbetalingerDetail = () => {\n    const dateRange = useAtomValue(utbetalingFilterDateRangeAtom);\n    const utbetalinger = useFilterUtbetalinger();\n\n    return (\n        <VStack flexGrow=\"1\" minHeight=\"0\" maxHeight=\"100%\" className=\"overflow-scroll\">\n            <Box.New>\n                <UtbetalingerSammendrag utbetalinger={utbetalinger} periode={dateRange} />\n            </Box.New>\n            <UtbetalingDetail utbetalinger={utbetalinger} />\n        </VStack>\n    );\n};\n\nexport const UtbetalingerDetailPage = () => {\n    return (\n        <ErrorBoundary boundaryName=\"utbetalingDetaljer\">\n            <Suspense fallback={<Skeleton variant=\"rounded\" height=\"200\" />}>\n                <UtbetalingerDetail />\n            </Suspense>\n        </ErrorBoundary>\n    );\n};\n","import { ChevronRightIcon } from '@navikt/aksel-icons';\nimport { BodyShort, Button, HStack, Heading, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport Card from 'src/components/Card';\nimport { formaterNOK, getUtbetalingId } from 'src/components/Utbetaling/List/utils';\nimport type { Utbetaling } from 'src/generated/modiapersonoversikt-api';\nimport { formatterDato } from 'src/utils/date-utils';\n\nconst routeApi = getRouteApi('/new/person/utbetaling');\n\nexport const UtbetalingItem = ({\n    utbetaling,\n    handleClick\n}: {\n    utbetaling: Utbetaling;\n    handleClick: (id: string) => void;\n}) => {\n    const aktivUtbetaling = routeApi.useSearch().id;\n    const id = getUtbetalingId(utbetaling);\n    return (\n        <Card\n            padding=\"2\"\n            as=\"li\"\n            className={`cursor-pointer hover:hover:bg-ax-bg-neutral-moderate-hover group\n                ${aktivUtbetaling === id ? 'bg-ax-bg-neutral-moderate ' : ''}`}\n            onClick={() => handleClick(id)}\n        >\n            <HStack justify=\"space-between\" gap=\"1\" wrap={false}>\n                <VStack justify=\"center\" gap=\"1\">\n                    <Heading size=\"xsmall\" as=\"h3\" level=\"3\">\n                        {utbetaling.ytelser\n                            ?.map((item) => item.type)\n                            ?.unique()\n                            .join(', ')}\n                    </Heading>\n                    <BodyShort size=\"small\">{formaterNOK(utbetaling.nettobelop)}</BodyShort>\n                    <HStack gap=\"2\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Forfallsdato:\n                        </BodyShort>\n                        <BodyShort size=\"small\">\n                            {utbetaling.forfallsdato ? formatterDato(utbetaling.forfallsdato) : ''}\n                        </BodyShort>\n                    </HStack>\n                    <BodyShort size=\"small\" textColor=\"subtle\">\n                        {utbetaling.status}\n                    </BodyShort>\n                </VStack>\n                <Button\n                    variant=\"tertiary-neutral\"\n                    size=\"small\"\n                    name=\"Åpne\"\n                    aria-label=\"Åpne\"\n                    icon={<ChevronRightIcon className=\"translate-x-0 group-hover:translate-x-1 transition-transform\" />}\n                />\n            </HStack>\n        </Card>\n    );\n};\n","import { Heading, Skeleton, VStack } from '@navikt/ds-react';\nimport { useNavigate, useSearch } from '@tanstack/react-router';\nimport { Suspense, useCallback } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { PaginatedList } from 'src/components/PaginatedList';\nimport { UtbetalingItem } from 'src/components/Utbetaling/List/UtbetalingItem';\nimport { UtbetalingListFilter } from './Filter';\nimport { getUtbetalingId, useFilterUtbetalinger } from './utils';\n\nexport const UtbetalingerList = () => (\n    <VStack minHeight=\"0\" gap=\"2\">\n        <UtbetalingListFilter />\n        <ErrorBoundary boundaryName=\"UtbetalingerList\">\n            <Suspense\n                fallback={\n                    <VStack gap=\"2\" marginInline=\"0 2\">\n                        {Array(8)\n                            .keys()\n                            .map((i) => (\n                                <Skeleton key={i} variant=\"rounded\" height={68} />\n                            ))}\n                    </VStack>\n                }\n            >\n                <VStack minHeight=\"0\" gap=\"2\">\n                    <UtbetalingList />\n                </VStack>\n            </Suspense>\n        </ErrorBoundary>\n    </VStack>\n);\n\nconst UtbetalingList = () => {\n    const utbetalinger = useFilterUtbetalinger();\n    const navigate = useNavigate({ from: '/new/person/utbetaling' });\n\n    const handleClick = useCallback(\n        (id: string) => {\n            navigate({ search: { id } });\n        },\n        [navigate]\n    );\n\n    const selectedKey = useSearch({\n        from: '/new/person/utbetaling',\n        select: (p) => p.id\n    });\n\n    return (\n        <>\n            <Heading className=\"pl-1\" size=\"xsmall\" level=\"2\">\n                {utbetalinger.length} {utbetalinger.length === 1 ? 'utbetaling' : 'utbetalinger'}\n            </Heading>\n            {utbetalinger.length > 0 && (\n                <PaginatedList\n                    selectedKey={selectedKey}\n                    items={utbetalinger}\n                    keyExtractor={getUtbetalingId}\n                    renderItem={({ item }) => <UtbetalingItem utbetaling={item} handleClick={handleClick} />}\n                />\n            )}\n        </>\n    );\n};\n","import { ExternalLinkIcon } from '@navikt/aksel-icons';\nimport { Button, HGrid, HStack, Heading, VStack } from '@navikt/ds-react';\nimport { Link } from '@tanstack/react-router';\nimport { UtbetalingerDetailPage } from 'src/components/Utbetaling/Detail';\nimport { UtbetalingerList } from 'src/components/Utbetaling/List';\nimport { arenaURL } from 'src/components/Utbetaling/List/utils';\n\nexport const UtbetalingPage = () => {\n    return (\n        <HGrid\n            gap=\"1\"\n            columns={{ xs: 1, md: 'max-content 1fr' }}\n            height=\"100%\"\n            overflow={{ xs: 'scroll', md: 'hidden' }}\n        >\n            <VStack height=\"100%\" maxWidth={{ md: '16em' }} overflow={{ md: 'hidden' }}>\n                <HStack>\n                    <Button\n                        size=\"small\"\n                        variant=\"tertiary\"\n                        as={Link}\n                        to={arenaURL()}\n                        iconPosition=\"right\"\n                        aria-label=\"Se meldekort i Arena\"\n                        icon={<ExternalLinkIcon aria-hidden fontSize=\"1rem\" />}\n                    >\n                        Se meldekort i Arena\n                    </Button>\n                </HStack>\n                <Heading size=\"small\">Utbetalinger</Heading>\n                <UtbetalingerList />\n            </VStack>\n            <VStack overflow={{ xs: 'hidden', md: 'scroll' }} className=\"min-h-100 md:min-h-0\">\n                <UtbetalingerDetailPage />\n            </VStack>\n        </HGrid>\n    );\n};\n","import { createLazyFileRoute } from '@tanstack/react-router';\nimport { UtbetalingPage } from 'src/components/Utbetaling';\n\nexport const Route = createLazyFileRoute('/new/person/utbetaling')({\n    component: UtbetalingPage\n});\n"],"names":["filterUtbetalinger","utbetalinger","filters","ytelseTyper","utbetaltTil","dateRange","length","filteredList","filter","utbetaling","ytelser","some","item","type","includes","erUtbetaltTilOrganisasjon","utbetaltTilOrganisasjon","erUtbetaltTilSamhandler","utbetaltTilSamhandler","erUtbetaltTilPerson","utbetaltTilBruker","from","to","dato","dayjs","posteringsdato","isSameOrAfter","isSameOrBefore","useFilterUtbetalinger","$","_c","useAtomValue","utbetalingFilterAtom","t0","format","startDato","t1","sluttDato","data","useUtbetalinger","t2","t3","t4","sortedUtbetalinger","toSorted","datoSynkende","_temp","getNettoSumYtelser","reduce","acc","ytelse","nettobelop","getBruttoSumYtelser","ytelseskomponentersum","getTrekkSumYtelser","skattsum","trekksum","filtrerBortUtbetalingerSomIkkeErUtbetalt","status","toLowerCase","reduceUtbetlingerTilYtelser","flatMap","formaterNOK","belop","toLocaleString","minimumFractionDigits","summertBelopFraUtbetalinger","getSumFromYtelser","fjernUtbetalingerSomIkkeErUtbetalt","sum","getTypeFromYtelse","getPeriodeFromYtelser","periode","start","isBefore","slutt","isAfter","arenaURL","utbetalingUrlPart","fnr","usePersonAtomValue","domainUrlPart","finnMiljoStreng","standardArenaUrlPart","replace","getUtbetalingId","map","join","utbetalingMottakere","t","defaultDate","getPeriodFromOption","PeriodType","CUSTOM","atomWithReset","utbetalingFilterYtelseTypeAtom","atom","get","_get","set","newVal","xor","utbetalingFilterUtbetaltTilAtom","utbetalingFilterDateRangeAtom","range","DateFilter","value","setValue","useAtom","jsx","DateRangeSelector","UtbetalingYtelserFilter","selectedYtelse","setSelectedYtelse","option","onToggleSelected","getUnikeYtelser","_temp3","unikeYtelser","t5","UNSAFE_Combobox","UtbetaltTilFilter","selectedMottakere","setSelectedMottakere","mottaker","Switch","Fieldset","VStack","FilterTitle","count","activeFilters","jsxs","Fragment","UtbetalingListFilter","open","setOpen","useState","expansionFilterRef","useRef","Symbol","for","setTimeout","current","classList","contains","handleExpansionChange","twMerge","ExpansionCard","Box","t6","Suspense","Skeleton","t7","t8","t9","t10","_temp2","ytelse_0","index","self","indexOf","data_0","fjernDuplikater","sort","sorterAlfabetisk","getTypeOgAarFromYtelse","year","getAlleUtbetalteYtelserFraUtbetalinger","utbetalteUtbetalinger","getAlleYtelsesKomponenterFraYtelser","ytelseskomponentListe","getYtelsesKomponentSammendragListe","alleYtelsesKomponenter","listeKomponenter","groupArray","ytelseskomponent","ytelseskomponenttype","gruppe","array","ytelsesKomponent","ytelseskomponentbelop","HStack","BodyLong","category","getYtelsesKomponentDetail","komponent","sats","satsbelop","antall","satsantall","skattListe","skattebelop","trekkListe","trekktype","trekkbelop","komponenter","concat","Table","i","BodyShort","UtbetalingerYtelserSammendrag","expandTable","T0","T1","ytelserGruppertPaaTema","Body","ytelser_0","ytelsesType","ytelsesKomponentSammendragListe","formaterDato","UtbetalingtYtelseDetaljer","UtbetaltBelop","brutto","trekk","netto","HGrid","UtbetalingDetaljer","printer","usePrinter","loggEvent","triggerPrint","handlePrint","PrinterWrapper","printerWrapper","unique","Heading","PrinterSmallIcon","Button","t11","forfallsdato","formatterDato","t12","t13","t14","utbetalingsdato","t15","t16","t17","t18","t19","konto","t20","t21","metode","t22","t23","t24","t25","melding","t26","t27","t28","t29","Card","UtbetalingerSammendrag","fom","tom","utbetalingsPeriode","routeApi","getRouteApi","UtbetalingDetail","id","useSearch","find","selectedUtbetaling","filterAtomValue","prevFilterRef","filterEndret","JSON","stringify","init","utbetalingIkkeIListe","utbetalingRouteMiddleware","clear","useEffect","Alert","GuidePanel","UtbetalingerDetail","UtbetalingerDetailPage","ErrorBoundary","a","b","UtbetalingItem","handleClick","aktivUtbetaling","ChevronRightIcon","UtbetalingerList","Array","keys","UtbetalingList","navigate","useNavigate","search","select","selectedKey","PaginatedList","p","UtbetalingPage","xs","md","Link","ExternalLinkIcon","Route","createLazyFileRoute","component"],"mappings":"4vBAUA,MAAMA,GAAqBA,CAACC,EAA4BC,IAA4C,CAChG,KAAM,CAAEC,YAAAA,EAAaC,YAAAA,EAAaC,UAAAA,CAAAA,EAAcH,EAEhD,GAAI,CAACD,GAAgBA,EAAaK,SAAW,EACzC,MAAO,CAAA,EAGX,IAAIC,EAAeN,EACnB,OAAIE,GAAaG,SACbC,EAAeA,EAAaC,OAAQC,GAChCA,EAAWC,QAAQC,KAAMC,GAASA,EAAKC,MAAQV,EAAYW,SAASF,EAAKC,IAAI,CAAC,CAClF,GAGAT,GAAaE,SACbC,EAAeA,EAAaC,OACvBC,GACIA,EAAWM,2BAA6BX,EAAYU,SAASE,EAAuB,GACpFP,EAAWQ,yBAA2Bb,EAAYU,SAASI,EAAqB,GAChFT,EAAWU,qBAAuBf,EAAYU,SAASM,EAAiB,CACjF,GAGAf,GAAWgB,MAAQhB,GAAWiB,KAC9Bf,EAAeA,EAAaC,OAAQC,GAAe,CAC/C,MAAMc,EAAOC,EAAMf,EAAWgB,cAAc,EAC5C,OAAOF,EAAKG,cAAcrB,EAAUgB,IAAI,GAAKE,EAAKI,eAAetB,EAAUiB,EAAE,CACjF,CAAC,GAGEf,CACX,EAEaqB,GAAwBA,IAAA,CAAA,MAAAC,EAAAC,EAAAA,EAAA,EAAA,EACjC5B,EAAgB6B,EAAAC,CAAiC,EAAE,IAAAC,EAAAJ,EAAA,CAAA,IAAA3B,EAAAG,UAAAgB,MACjCY,EAAA/B,EAAOG,UAAAgB,KAAAa,OAAuB,YAAY,EAACL,EAAA,CAAA,EAAA3B,EAAAG,UAAAgB,KAAAQ,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAA7D,MAAAM,EAAkBF,EAA4C,IAAAG,EAAAP,EAAA,CAAA,IAAA3B,EAAAG,UAAAiB,IAC5Cc,EAAAlC,EAAOG,UAAAiB,GAAAY,OAAqB,YAAY,EAACL,EAAA,CAAA,EAAA3B,EAAAG,UAAAiB,GAAAO,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAA3D,MAAAQ,EAAkBD,EAClB,CAAAE,KAAAA,CAAAA,EAAiBC,GAAgBJ,EAAWE,CAAS,EAAE,IAAAG,EAAAX,EAAA,CAAA,IAAAS,GAAArC,cAClCuC,EAAAF,GAAIrC,cAAA,CAAA,EAAoB4B,EAAA,CAAA,EAAAS,GAAArC,aAAA4B,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAA7C,MAAA5B,EAAqBuC,EAAyB,IAAAC,EAAAC,EAAA,GAAAb,EAAA,CAAA,IAAA3B,GAAA2B,OAAA5B,EAAA,CAE9C,MAAA0C,EAA2B1C,EAAY2C,SAAUC,GAAAC,EAAoC,CAAC,EAEjEL,EAAAzC,GAAmB2C,EAAoBzC,CAAO,EAAC2B,KAAA3B,EAAA2B,KAAA5B,EAAA4B,KAAAY,EAAAZ,KAAAa,CAAA,MAAAD,EAAAZ,EAAA,CAAA,EAAAa,EAAAb,EAAA,CAAA,EAAAa,OAAAA,EAA/CD,EAAdC,CAAuF,EAGrFK,GAAsBrC,GACxBA,EAAQsC,OAAO,CAACC,EAAaC,IAAmBD,EAAMC,EAAOC,WAAY,CAAC,EAGxEC,GAAuB1C,GACzBA,EAAQsC,OAAO,CAACC,EAAaC,IAAmBD,EAAMC,EAAOG,sBAAuB,CAAC,EAGnFC,GAAsB5C,GACxBA,EAAQsC,OAAO,CAACC,EAAaC,IAAmBD,EAAMC,EAAOK,SAAWL,EAAOM,SAAU,CAAC,EAGxFC,GAA4ChD,GAC9CA,EAAWiD,OAAOC,YAAAA,IAAkB,WAGlCC,GAA+B3D,GACjCA,EAAa4D,QAASpD,GAAeA,EAAWC,SAAW,EAAE,EAG3DoD,EAAeC,GACjBA,EAAMC,eAAe,KAAM,CAAEC,sBAAuB,CAAA,CAAG,EAGrDC,EAA8BA,CACvCjE,EACAkE,EACAC,IACS,CACT,MAAM1D,EAAUT,EACXO,OAAQC,GAAe,CAAC2D,GAAsC3D,EAAWiD,OAAOC,YAAAA,IAAkB,UAAU,EAC5GE,WAAwBpD,EAAWC,SAAW,EAAE,EAC/C2D,EAAMF,EAAkBzD,CAAO,EACrC,OAAOoD,EAAYO,CAAG,CAC1B,EAEaC,GAAqBpB,GAAmBA,EAAOrC,MAAQ,sBAEvD0D,GAAyB7D,GAC3BA,EAAQsC,OACX,CAACC,EAAoBC,IACZA,EAAOsB,QAGL,CACHC,MAAOjD,EAAM0B,EAAOsB,QAAQC,KAAK,EAAEC,SAASlD,EAAMyB,EAAIwB,KAAK,CAAC,EAAIvB,EAAOsB,QAAQC,MAAQxB,EAAIwB,MAC3FE,MAAOnD,EAAM0B,EAAOsB,QAAQG,KAAK,EAAEC,QAAQpD,EAAMyB,EAAI0B,KAAK,CAAC,EAAIzB,EAAOsB,QAAQG,MAAQ1B,EAAI0B,KAAAA,EAJnF1B,EAOf,CACIwB,MAAOjD,EAAAA,EAAQU,OAAAA,EACfyC,MAAOnD,EAAM,CAAC,EAAEU,OAAAA,CAAO,CAE/B,EAGS2C,GAAWA,IAAM,CAC1B,MAAMC,EAAoB,gDACpBC,EAAMC,GAAAA,EACNC,EAAgB,eAAeC,GAAAA,CAAiB,YAChDC,EAAuB,iBAAiBD,GAAAA,EAAkBE,QAAQ,IAAK,GAAG,CAAC,QAEjF,OAAOH,EAAgBE,EAAuBL,EAAoBC,CACtE,EAEaM,GAAmB5E,GAC5B,GAAGA,EAAWC,SAAS4E,OAAc1E,EAAKC,MAAMuE,QAAQ,OAAQ,EAAE,CAAC,GAAGG,KAAK,EAAE,CAAC,GAAG9E,EAAWgB,cAAc,GAExGL,GAAoB,SACpBJ,GAA0B,eAC1BE,GAAwB,aAEjBsE,GAAsB,CAACpE,GAAmBJ,GAAyBE,EAAqB,EApFhE,SAAA4B,GAAA2C,EAAA,CAAA,OAOoCA,EAAChE,cAAA,CC/B1E,MAAMiE,GAAcC,GAAoBC,GAAWC,MAAM,EAE5C7D,EAAuB8D,GAAgC,CAChEzF,UAAWqF,GACXvF,YAAa,CAAA,EACbC,YAAaoF,EACjB,CAAC,EAEKO,GAAiCC,GAClCC,GAAQA,EAAIjE,CAAoB,EAAE7B,YACnC,CAAC+F,EAAMC,EAAKC,IAAmB,CAC3BD,EAAInE,EAAuB9B,IAAa,CACpC,GAAGA,EACHC,YAAaD,EAAQC,YAAckG,OAAInG,EAAQC,YAAa,CAACiG,CAAM,CAAC,EAAI,CAACA,CAAM,CAAA,EACjF,CACN,CACJ,EAEME,GAAkCN,GACnCC,GAAQA,EAAIjE,CAAoB,EAAE5B,YACnC,CAAC8F,EAAMC,EAAKC,IAAmB,CAC3BD,EAAInE,EAAuB9B,IAAa,CACpC,GAAGA,EACHE,YAAaiG,GAAAA,IAAInG,EAAQE,YAAa,CAACgG,CAAM,CAAC,CAAA,EAChD,CACN,CACJ,EAEaG,GAAgCP,GACxCC,GAAQA,EAAIjE,CAAoB,EAAE3B,UACnC,CAAC6F,EAAMC,EAAK9F,IAAgC,CACxC,MAAMmG,EAAQnG,GAAaqF,GAC3BS,EAAInE,EAAuB9B,IAAa,CACpC,GAAGA,EACHG,UAAWmG,CAAAA,EACb,CACN,CACJ,EAEMC,GAAaA,IAAA,CAAA,MAAA5E,EAAAC,EAAAA,EAAA,CAAA,EACf,CAAA4E,EAAAC,CAAA,EAA0BC,GAAAL,EAAqC,EAAE,IAAAtE,EAAA,OAAAJ,EAAA,CAAA,IAAA8E,GAAA9E,OAAA6E,GAC1DzE,EAAA4E,EAAAA,IAACC,GAAA,CAAyBJ,MAAAA,EAAiBC,SAAAA,EAAQ,EAAI9E,KAAA8E,EAAA9E,KAAA6E,EAAA7E,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAAvDI,CAAuD,EAG5D8E,GAA0BA,IAAA,CAAA,MAAAlF,EAAAC,EAAAA,EAAA,EAAA,EAC5B,CAAAkF,EAAAC,CAAA,EAA4CL,GAAAb,EAAsC,EAClF1F,EAAkB0B,EAAAwE,EAA0C,EAAE,IAAAtE,EAAAJ,EAAA,CAAA,IAAAxB,EAAAgB,MAC5CY,EAAA5B,EAASgB,KAAAa,OAAa,YAAY,EAACL,EAAA,CAAA,EAAAxB,EAAAgB,KAAAQ,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAArD,MAAAM,EAAkBF,EAAoC,IAAAG,EAAAP,EAAA,CAAA,IAAAxB,EAAAiB,IACpCc,EAAA/B,EAASiB,GAAAY,OAAW,YAAY,EAACL,EAAA,CAAA,EAAAxB,EAAAiB,GAAAO,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAnD,MAAAQ,EAAkBD,EAClB,CAAAE,KAAAA,CAAAA,EAAiBC,GAAgBJ,EAAWE,CAAS,EAAE,IAAAG,EAAAX,EAAA,CAAA,IAAAS,GAAArC,cAClCuC,EAAAF,GAAIrC,cAAA,CAAA,EAAoB4B,EAAA,CAAA,EAAAS,GAAArC,aAAA4B,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAA7C,MAAA5B,EAAqBuC,EAAyB,IAAAC,EAAAZ,OAAAoF,GAG1CxE,EAAAyE,GAAA,CACID,EAAkBC,CAAM,CAAC,EAC5BrF,KAAAoF,EAAApF,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAHL,MAAAsF,EAAyB1E,EAOzB2E,EAAAC,GAIE,IAAA3E,EAAAb,OAAA5B,GAEmByC,EAAA0E,EAAgBnH,CAAY,EAAC4B,KAAA5B,EAAA4B,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAlD,MAAAyF,EAAqB5E,EAA8B,IAAA6E,EAAA,OAAA1F,EAAA,EAAA,IAAAsF,GAAAtF,QAAAmF,GAAAnF,EAAA,EAAA,IAAAyF,GAG/CC,EAAAV,EAAAA,IAACW,GAAA,CACQ,KAAA,QACC,MAAA,SACGF,QAAAA,EACT,cAAA,GACiBN,gBAAAA,EACCG,iBAAAA,EAAgB,EACpCtF,MAAAsF,EAAAtF,MAAAmF,EAAAnF,MAAAyF,EAAAzF,MAAA0F,GAAAA,EAAA1F,EAAA,EAAA,EAPF0F,CAOE,EAIJE,GAAoBA,IAAA,CAAA,MAAA5F,EAAAC,EAAAA,EAAA,CAAA,EACtB,CAAA4F,EAAAC,CAAA,EAAkDf,GAAAN,EAAuC,EAAE,IAAArE,EAAAJ,OAAA8F,GAEvF1F,EAAAiF,GAAA,CACIS,EAAqBT,CAAM,CAAC,EAC/BrF,KAAA8F,EAAA9F,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAHL,MAAAsF,EAAyBlF,EAKvB,IAAAG,EAAAP,EAAA,CAAA,IAAAsF,GAAAtF,OAAA6F,GAKWtF,EAAAoD,GAAAF,IAAAsC,SACIC,GAAA,CAEQ,KAAA,QACI,QAAAH,EAAiB5G,SAAU8G,CAAQ,EAClC,SAAA,IAAMT,EAAiBS,CAAQ,EAExCA,SAAAA,IACL,CACH,EAAC/F,KAAAsF,EAAAtF,KAAA6F,EAAA7F,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAA,IAAAW,EAAA,OAAAX,OAAAO,GAXVI,EAAAqE,EAAAA,IAACiB,GAAA,CAAc,KAAA,QAAe,OAAA,iBAC1B,SAAAjB,EAAAA,IAACkB,EAAA,CAAW,IAAA,IACP3F,SAAAA,CAAAA,CAUL,EACJ,EAAWP,KAAAO,EAAAP,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAbXW,CAaW,EAIbwF,GAAcA,IAAA,CAAA,MAAAnG,EAAAC,EAAAA,EAAA,CAAA,EAChB5B,EAAgB6B,EAAAC,CAAiC,EAAE,IAAAC,EAG/CgG,EAAA,EACI/H,EAAOC,aAAgBD,EAAOC,YAAAG,OAAA,GAC9B2H,IAEA/H,EAAOE,aAAgBF,EAAOE,YAAAE,OAAA,GAC9B2H,IAEA/H,EAAOG,WACP4H,IAGJhG,EAAOgG,EAAQ,IAAIA,CAAK,IAAG,KAZ/B,MAAAC,EAAsBjG,EAaR,IAAAG,EAAA,OAAAP,OAAAqG,GAEP9F,EAAA+F,EAAAA,KAAAC,WAAA,CAAE,SAAA,CAAA,UAAQF,CAAAA,EAAa,EAAIrG,KAAAqG,EAAArG,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAA3BO,CAA2B,EAGzBiG,GAAuBA,IAAA,CAAA,MAAAxG,EAAAC,EAAAA,EAAA,EAAA,EAChC,CAAAwG,EAAAC,CAAA,EAAwBC,EAAAA,WAAc,EACtCC,EAA2BC,EAAAA,OAAA,IAA2B,EAAE,IAAAzG,EAAAJ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAE1B3G,EAAAA,IAAA,CAC1B4G,WAAA,IAAA,CACSJ,EAAkBK,SACvBP,EAAQE,EAAkBK,QAAAC,UAAAC,SAA4B,2BAA2B,CAAC,CAAC,EAAA,CACnF,CAAC,EACRnH,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EALD,MAAAoH,EAA8BhH,EAOqBG,EAAAkG,GAAQ,aAAY,IAAA9F,EAAAX,OAAAO,GAA5BI,EAAA0G,GAAQ9G,CAAoB,EAACP,KAAAO,EAAAP,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAIzC,MAAAY,EAAA6F,GAAQ,2BAA0B,IAAA5F,EAAAb,OAAAY,GAA1CC,EAAAwG,GAAQzG,CAAkC,EAACZ,KAAAY,EAAAZ,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAItDrB,EAAAV,EAAAA,IAAAsC,EAAA,OAAA,CAAgC,UAAA,MAC5B,SAAAtC,EAAAA,IAAAuC,EAAA,IAAA,CAAuB,cAAA,IACnB,SAAAvC,EAAAA,aAA0B,KAAA,QACtB,SAAAA,EAAAA,IAACmB,GAAA,CAAA,CAAW,EAChB,CAAA,CACJ,CAAA,CACJ,EAAuBnG,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAAA,IAAAwH,EAAAxH,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAGfS,EAAAxC,EAAAA,IAAAuC,EAAA,IAAA,CAAkB,SAAA,QACd,SAAAvC,EAAAA,IAACyC,EAAAA,SAAA,CAEO,SAAAnB,OAACJ,EAAA,CAAW,IAAA,IACR,SAAA,CAAAlB,EAAAA,IAAA,OAAA,CAAgB,UAAA,eAAe,SAAA,SAAM,QACpC0C,GAAA,CAAe,MAAA,OAAe,QAAA,UAAiB,OAAA,MAAA,CAAM,CAAA,CAAA,CAC1D,EAGJ,SAAA1C,EAAAA,IAACE,GAAA,CAAA,CAAuB,CAAA,CAC5B,EACJ,EAAUlF,KAAAwH,GAAAA,EAAAxH,EAAA,CAAA,EAAA,IAAA2H,EAAA3H,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GACVY,EAAA3C,EAAAA,IAAAuC,EAAA,IAAA,CAAkB,SAAA,QACd,SAAAvC,EAAAA,IAACY,OACL,EAAU5F,KAAA2H,GAAAA,EAAA3H,EAAA,CAAA,EAAA,IAAA4H,EAAA5H,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAhBlBa,EAAA5C,EAAAA,IAAAsC,EAAA,QAAA,CAAiC,UAAA,mBAC7B,SAAAhB,EAAAA,KAACJ,EAAA,CAAW,IAAA,IACRsB,SAAAA,CAAAA,EAYAG,QAGAJ,EAAA,IAAA,CACI,SAAAvC,MAACJ,KAAU,CAAA,CACf,CAAA,CAAA,CACJ,CAAA,CACJ,EAAwB5E,KAAA4H,GAAAA,EAAA5H,EAAA,CAAA,EAAA,IAAA6H,EAAA7H,OAAAa,GAnC5BgH,EAAAvB,EAAAA,KAACgB,EAAA,CACYF,QAAAA,EACJR,IAAAA,EACM,UAAA/F,EACN,KAAA,QACM,aAAA,uBAEX6E,SAAAA,CAAAA,EAOAkC,CAAAA,EAsBJ,EAAgB5H,KAAAa,EAAAb,MAAA6H,GAAAA,EAAA7H,EAAA,EAAA,EAAA,IAAA8H,EAAA,OAAA9H,EAAA,EAAA,IAAAW,GAAAX,QAAA6H,GArCpBC,EAAA9C,EAAAA,IAAAuC,EAAA,IAAA,CAAsB,aAAA,MAAiB,UAAA5G,EACnCkH,SAAAA,CAAAA,CAqCJ,EAAU7H,MAAAW,EAAAX,MAAA6H,EAAA7H,MAAA8H,GAAAA,EAAA9H,EAAA,EAAA,EAtCV8H,CAsCU,EApIc,SAAA7G,GAAAI,EAAA,CAAA,OAgBsBA,EAAMrC,MAAS,qBAAqB,CAhB1D,SAAA+I,GAAAC,EAAAC,EAAAC,EAAA,CAAA,OAiBwDA,EAAIC,QAAS9G,CAAM,IAAM4G,CAAK,CAjBtF,SAAAzC,GAAA4C,EAAA,CAgBxB,MAAA3F,EAAAxB,GACAoH,EAAAN,GAA+G,OACxGhG,GAA4BtB,CAAI,EAACgD,IAAKhB,CAAiB,EAAC9D,OAAQ0J,CAAe,EAACC,KAAAC,EAAsB,CAAC,CCpCtH,MAAMC,GAA0BnH,GACrB,GAAGoB,GAAkBpB,CAAM,CAAC,IAAI1B,EAAM0B,EAAOsB,SAASG,KAAK,EAAE2F,KAAAA,CAAM,GAGxEC,GAA0CtK,GAA+B,CAC3E,MAAMuK,EAAwBvK,EAAaO,OAAOiD,EAAwC,EAC1F,OAAOG,GAA4B4G,CAAqB,CAC5D,EAEMC,GAAuC/J,GAClCA,EAAQmD,QAASX,GAAWA,EAAOwH,uBAAyB,EAAE,EAGnEC,GAAsCjK,GAAsB,CAC9D,MAAMkK,EAAyBH,GAAoC/J,CAAO,EAKpEmK,EAJoCC,GACtCF,EACCG,GAAqBA,EAAiBC,oBAC3C,EAC2D1F,IAAK2F,GAAW,CACvE,MAAM5G,EAAM4G,EAAOC,MAAMlI,OAAO,CAACC,EAAKkI,IAAqBlI,EAAMkI,EAAiBC,sBAAuB,CAAC,EAC1G,cACKC,EAAA,CAAO,KAAM,GAAO,IAAI,IAAI,QAAQ,QACjC,SAAA,CAAAxE,EAAAA,IAACyE,GAAA,CAAS,QAAO,GAAEL,SAAAA,EAAOM,SAAS,QAClCD,GAAA,CAAS,QAAO,GAAExH,SAAAA,EAAYO,CAAG,CAAA,CAAE,CAAA,CAAA,EAFU4G,EAAOM,QAGzD,CAER,CAAC,EAED,OAAO1E,EAAAA,IAAC,MAAIgE,SAAAA,CAAAA,CAAiB,CACjC,EAEMW,GAA6BtI,GAAmB,CAClD,MAAMwH,EAAwBxH,EAAOwH,sBAAsBpF,IAAKmG,IAAe,CAC3E5K,KAAM4K,EAAUT,qBAChBU,KAAMD,EAAUE,UAAY7H,EAAY2H,EAAUE,SAAS,EAAI,IAC/DC,OAAQ,GAAGH,EAAUI,UAAU,GAC/B9H,MAAOD,EAAY2H,EAAUL,qBAAqB,CAAA,EACpD,EAEIU,EAAa5I,EAAO4I,WAAWxG,IAAKmG,IAAe,CACrD5K,KAAM,cACN6K,KAAM,IACNE,OAAQ,IACR7H,MAAOD,EAAY2H,EAAUM,WAAW,CAAA,EAC1C,EAEIC,EAAa9I,EAAO8I,WAAW1G,IAAKmG,IAAe,CACrD5K,KAAM4K,EAAUQ,UAChBP,KAAM,IACNE,OAAQ,IACR7H,MAAOD,EAAY2H,EAAUS,UAAU,CAAA,EACzC,EAEIC,EAAczB,EAAsB0B,OAAON,EAAYE,CAAU,EAEvE,OACI7D,EAAAA,KAACJ,EAAA,CAAO,MAAM,MAAM,UAAU,6CACzBoE,SAAAA,CAAAA,EAAY7L,OAAS,GAClB6H,EAAAA,KAACkE,GAAM,KAAK,QAAQ,aAAc,GAC9B,SAAA,CAAAxF,MAACwF,EAAM,OAAN,CACG,SAAAlE,EAAAA,KAACkE,EAAM,IAAN,CACG,SAAA,CAAAxF,EAAAA,IAACwF,EAAM,SAAN,CAAe,MAAM,KAAA,CAAK,EAC3BxF,MAACwF,EAAM,WAAN,CAAiB,MAAM,MAAM,UAAU,OAAM,SAAA,OAE9C,EACAxF,MAACwF,EAAM,WAAN,CAAiB,MAAM,MAAM,UAAU,OAAM,SAAA,SAE9C,EACAxF,MAACwF,EAAM,WAAN,CAAiB,MAAM,MAAM,UAAU,OAAM,SAAA,OAAA,CAE9C,CAAA,CAAA,CACJ,CAAA,CACJ,EACAxF,MAACwF,EAAM,KAAN,CACIF,WAAY7G,IAAI,CAACmG,EAAWa,IAErBnE,OAACkE,EAAM,IAAN,CACG,SAAA,CAAAxF,EAAAA,IAACwF,EAAM,SAAN,CAAgBZ,SAAAA,EAAU5K,KAAK,EAChCgG,EAAAA,IAACwF,EAAM,SAAN,CAAgBZ,WAAUC,KAAK,EAChC7E,EAAAA,IAACwF,EAAM,SAAN,CAAgBZ,WAAUG,OAAO,EAClC/E,EAAAA,IAACwF,EAAM,SAAN,CAAgBZ,WAAU1H,KAAAA,CAAM,CAAA,GAJrBuI,EAAIb,EAAU5K,IAK9B,CAEP,CAAA,CACL,CAAA,EACJ,SAEHwK,EAAA,CAAO,QAAQ,gBAAgB,IAAI,IAAI,UAAU,YAC9C,SAAA,CAAAxE,MAAC0F,EAAA,CAAU,KAAK,QAAQ,OAAO,WAAU,SAAA,cAEzC,EACA1F,EAAAA,IAAC0F,GAAU,KAAK,QAAQ,OAAO,WAC1BzI,SAAAA,EAAYZ,EAAOC,UAAU,CAAA,CAClC,CAAA,CAAA,CACJ,CAAA,EACJ,CAER,EAEMqJ,GAAgCvK,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAApB,QAAAA,EAAA+L,YAAAA,CAAAA,EAAAxK,EAAqE,IAAAyK,EAAAC,EAAAvK,EAAAI,EAAAC,EAAAC,EAAA,GAAAb,EAAA,CAAA,IAAA4K,GAAA5K,OAAAnB,EAAA,CACxG,MAAAkM,EAA+B9B,GAAWpK,EAAO2J,EAAwB,EAGpEsC,EAAAN,EAAW7J,EAAA,QAAOX,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GACfnG,EAAAoE,EAAAA,IAAA,UAAA,CAAmB,UAAA,uBAAuB,SAAA,aAAU,EAAUhF,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAAAA,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAC9DlG,QAAA2J,EAAA,OAAA,CACI,SAAAlE,EAAAA,KAAAkE,EAAA,IAAA,CACI,SAAA,CAAAxF,MAAAwF,EAAA,SAAA,EAAA,EACAxF,MAAAwF,EAAA,SAAA,EAAA,sBAC4B,UAAA,OAAO,SAAA,UAAO,QAC1CA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,SAAM,QACzCA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,QAAK,QACxCA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,UAAA,CAAQ,CAAA,CAAA,CAC/C,CAAA,CACJ,EAAexK,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EACd6K,EAAAL,EAAAQ,KAAU,IAAAtF,EAAA1F,QAAA4K,GAGElF,EAAAA,CAAA0D,EAAAqB,IAAA,CACD,MAAAQ,EAAgB7B,EAAMC,MACtB6B,EAAoB9B,EAAMM,SAC1B/G,EAAgBD,GAAsB7D,CAAO,EAC7CsM,EAAwCrC,GAAmCjK,CAAO,EAAE,+BAKnEsM,QAAAA,EACIP,YAAAA,EAEb,SAAA,CAAA5F,EAAAA,IAAAwF,EAAA,WAAA,CAAwB,MAAA,MAAOU,SAAAA,EAAY,EAC3C5E,EAAAA,KAAAkE,EAAA,SAAA,CACKY,SAAAA,CAAAA,GAAazI,EAAOC,KAAM,EAAE,MAAIwI,GAAazI,EAAOG,KAAM,CAAA,EAC/D,EACAkC,MAAAwF,EAAA,SAAA,CAAiBvI,WAAYV,GAAoB1C,CAAO,CAAC,EAAE,EAC3DmG,MAAAwF,EAAA,SAAA,CAAiBvI,WAAYR,GAAmB5C,CAAO,CAAC,EAAE,EAC1DmG,MAAAwF,EAAA,SAAA,CAAiBvI,WAAYf,GAAmBrC,CAAO,CAAC,CAAA,CAAE,CAAA,GAVrD4L,EAAIrB,EAAMM,QAWnB,CAAsB,EAE7B1J,MAAA4K,EAAA5K,MAAA0F,GAAAA,EAAA1F,EAAA,EAAA,EAvBJO,EAAAwK,EAAsBzC,KAAArH,EACqC,EAACwC,IACpDiC,CAqBJ,EAAC1F,KAAA4K,EAAA5K,KAAAnB,EAAAmB,KAAA6K,EAAA7K,KAAA8K,EAAA9K,KAAAO,EAAAP,KAAAW,EAAAX,KAAAY,EAAAZ,KAAAa,CAAA,MAAAgK,EAAA7K,EAAA,CAAA,EAAA8K,EAAA9K,EAAA,CAAA,EAAAO,EAAAP,EAAA,CAAA,EAAAW,EAAAX,EAAA,CAAA,EAAAY,EAAAZ,EAAA,CAAA,EAAAa,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,EAAA,EAAA,IAAA6K,GAAA7K,QAAAO,GAxBVmF,EAAAV,EAAAA,IAAC6F,GACItK,SAAAA,CAAAA,CAwBL,EAAaP,MAAA6K,EAAA7K,MAAAO,EAAAP,MAAA0F,GAAAA,EAAA1F,EAAA,EAAA,EAAA,IAAAwH,EAAA,OAAAxH,EAAA,EAAA,IAAA8K,GAAA9K,EAAA,EAAA,IAAAW,GAAAX,EAAA,EAAA,IAAAY,GAAAZ,EAAA,EAAA,IAAAa,GAAAb,QAAA0F,GArCjB8B,EAAAlB,EAAAA,KAACwE,EAAA,CAAW,KAAAnK,EACRC,SAAAA,CAAAA,EACAC,EAUA6E,CAAAA,EA0BJ,EAAQ1F,MAAA8K,EAAA9K,MAAAW,EAAAX,MAAAY,EAAAZ,MAAAa,EAAAb,MAAA0F,EAAA1F,MAAAwH,GAAAA,EAAAxH,EAAA,EAAA,EAtCRwH,CAsCQ,EAIV6D,GAA4BjL,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,CAAA,EAAC,CAAApB,QAAAA,CAAAA,EAAAuB,EAAkC,IAAAG,EAAAP,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAGzDxG,QAAAiK,EAAA,OAAA,CACI,SAAAlE,EAAAA,KAAAkE,EAAA,IAAA,CACI,SAAA,CAAAxF,MAAAwF,EAAA,SAAA,EAAA,EACAxF,MAAAwF,EAAA,SAAA,EAAA,sBAC4B,UAAA,OAAO,SAAA,UAAO,QAC1CA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,SAAM,QACzCA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,QAAK,QACxCA,EAAA,WAAA,CAA4B,UAAA,OAAO,SAAA,OAAA,CAAK,CAAA,CAAA,CAC5C,CAAA,CACJ,EAAexK,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAA,IAAAW,EAAAX,OAAAnB,GAEV8B,EAAA9B,EAAO4E,IAAAsE,EAmBP,EAAC/H,KAAAnB,EAAAmB,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAAA,IAAAY,EAAA,OAAAZ,OAAAW,GA/BVC,EAAA0F,EAAAA,KAACkE,EAAA,CAAW,KAAA,QAAe,MAAA,UACvBjK,SAAAA,CAAAA,EAUAyE,EAAAA,IAAAwF,EAAA,KAAA,CACK7J,SAAAA,CAAAA,CAoBL,CAAA,EACJ,EAAQX,KAAAW,EAAAX,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAjCRY,CAiCQ,EAIV0K,GAAgBlL,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAAsL,OAAAA,EAAAC,MAAAA,EAAAC,MAAAA,CAAAA,EAAArL,EAA0E,IAAAG,EAAAP,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAIjFxG,QAACmK,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,UAE1C,EAAY1K,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAA,IAAAW,EAAAX,OAAAuL,GAHhB5K,EAAA2F,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZ3F,SAAAA,CAAAA,EAGAyE,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAASa,SAAAA,CAAAA,CAAO,CAAA,EACpC,EAASvL,KAAAuL,EAAAvL,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAAA,IAAAY,EAAAZ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELnG,QAAC8J,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,SAE1C,EAAY1K,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAAA,IAAAa,EAAAb,OAAAwL,GAHhB3K,EAAAyF,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZtF,SAAAA,CAAAA,EAGAoE,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAASc,SAAAA,CAAAA,CAAM,CAAA,EACnC,EAASxL,KAAAwL,EAAAxL,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELrB,QAACgF,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,YAE1C,EAAY1K,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAAA,IAAAwH,EAAAxH,OAAAyL,GAHhBjE,EAAAlB,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZR,SAAAA,CAAAA,EAGAV,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAASe,SAAAA,CAAAA,CAAM,CAAA,EACnC,EAASzL,KAAAyL,EAAAzL,KAAAwH,GAAAA,EAAAxH,EAAA,CAAA,EAAA,IAAA2H,EAAA,OAAA3H,EAAA,CAAA,IAAAW,GAAAX,QAAAa,GAAAb,EAAA,EAAA,IAAAwH,GAlBbG,EAAArB,EAAAA,KAACoF,GAAA,CAAU,IAAA,IAAa,UAAe,YAAA,IAAiB,aAAA,IAAc,UAAA,gCAClE/K,SAAAA,CAAAA,EAMAE,EAMA2G,CAAAA,EAMJ,EAAQxH,KAAAW,EAAAX,MAAAa,EAAAb,MAAAwH,EAAAxH,MAAA2H,GAAAA,EAAA3H,EAAA,EAAA,EAnBR2H,CAmBQ,EAGVgE,GAAqBvL,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAArB,WAAAA,CAAAA,EAAAwB,EACxBwL,EAAgBC,GAAAA,EAAa,IAAAtL,EAAAP,OAAApB,GACd2B,EAAA8B,EAAA,CAA6BzD,CAAU,EAAA2C,KAA6B,EAACvB,KAAApB,EAAAoB,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAApF,MAAAuL,EAAehL,EAAsE,IAAAI,EAAAX,OAAApB,GACvE+B,EAAA0B,EAAA,CAA6BzD,CAAU,EAAA6C,KAA2B,EAACzB,KAAApB,EAAAoB,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAAjF,MAAAwL,EAAc7K,EAAoE,IAAAC,EAAAZ,OAAApB,GACpEgC,EAAAyB,EAAA,CAA6BzD,CAAU,EAAAsC,KAA2B,EAAClB,KAAApB,EAAAoB,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAAjF,MAAAyL,EAAc7K,EACd/B,EAAgBD,EAAUC,QAAS,IAAAgC,EAAAb,OAAA4L,GAEf/K,EAAAA,IAAA,CAChBiL,GAAU,yBAA0B,YAAY,EAChDF,EAAOG,aAAAA,CAAe,EACzB/L,KAAA4L,EAAA5L,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAHD,MAAAgM,EAAoBnL,EAKpBoL,EAAuBL,EAAOM,eAAgB,IAAAxG,EAAA1F,EAAA,CAAA,IAAApB,EAAAC,SAOzB6G,EAAA9G,EAAUC,SAAA4E,IAAA+B,EAAA,GAAA2G,OAAAA,EAAAzI,KAGD,IAAI,EAAC1D,EAAA,CAAA,EAAApB,EAAAC,QAAAmB,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAAA,IAAAwH,EAAAxH,QAAA0F,GAJnB8B,QAAC4E,EAAA,CAAW,GAAA,KAAU,KAAA,QACjB1G,SAAAA,EAIL,EAAU1F,MAAA0F,EAAA1F,MAAAwH,GAAAA,EAAAxH,EAAA,EAAA,EAAA,IAAA2H,EAAA3H,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAKAY,QAAC0E,GAAA,CAAiB,cAAA,EAAA,CAAW,EAAGrM,MAAA2H,GAAAA,EAAA3H,EAAA,EAAA,EAAA,IAAA4H,EAAA5H,QAAAgM,GAJ1CpE,EAAA5C,EAAAA,IAACsH,GAAA,CACQ,KAAA,QACG,QAAA,WACK,aAAA,QACP,KAAA3E,EACGqE,QAAAA,EACZ,SAAA,WAED,EAAShM,MAAAgM,EAAAhM,MAAA4H,GAAAA,EAAA5H,EAAA,EAAA,EAAA,IAAA6H,EAAA7H,EAAA,EAAA,IAAAwH,GAAAxH,QAAA4H,GAfbC,EAAAvB,EAAAA,KAACkD,EAAA,CAAe,QAAA,gBACZhC,SAAAA,CAAAA,EAMAI,CAAAA,EASJ,EAAS5H,MAAAwH,EAAAxH,MAAA4H,EAAA5H,MAAA6H,GAAAA,EAAA7H,EAAA,EAAA,EAAA,IAAA8H,EAAA9H,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAGDe,QAAC4C,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,gBAE1C,EAAY1K,MAAA8H,GAAAA,EAAA9H,EAAA,EAAA,EAAA,IAAAuM,EAAAvM,EAAA,EAAA,IAAApB,EAAA4N,cAEPD,EAAA3N,EAAU4N,aAAgBC,GAAc7N,EAAU4N,YAAa,EAAI,GAAExM,EAAA,EAAA,EAAApB,EAAA4N,aAAAxM,MAAAuM,GAAAA,EAAAvM,EAAA,EAAA,EAAA,IAAA0M,EAAA1M,QAAAuM,GAL9EG,EAAApG,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZ4B,SAAAA,CAAAA,EAGA9C,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QACX6B,SAAAA,CAAAA,CACL,CAAA,EACJ,EAASvM,MAAAuM,EAAAvM,MAAA0M,GAAAA,EAAA1M,EAAA,EAAA,EAAA,IAAA2M,EAAA3M,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAEL4F,QAACjC,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,mBAE1C,EAAY1K,MAAA2M,GAAAA,EAAA3M,EAAA,EAAA,EAAA,IAAA4M,EAAA5M,EAAA,EAAA,IAAApB,EAAAiO,iBAEPD,EAAAhO,EAAUiO,gBAAmBJ,GAAc7N,EAAUiO,eAAgB,EAAI,GAAE7M,EAAA,EAAA,EAAApB,EAAAiO,gBAAA7M,MAAA4M,GAAAA,EAAA5M,EAAA,EAAA,EAAA,IAAA8M,EAAA9M,QAAA4M,GALpFE,EAAAxG,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZyG,SAAAA,CAAAA,EAGA3H,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QACXkC,SAAAA,CAAAA,CACL,CAAA,EACJ,EAAS5M,MAAA4M,EAAA5M,MAAA8M,GAAAA,EAAA9M,EAAA,EAAA,EAAA,IAAA+M,EAAA/M,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELgG,QAACrC,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,gBAE1C,EAAY1K,MAAA+M,GAAAA,EAAA/M,EAAA,EAAA,EAAA,IAAAgN,EAAAhN,EAAA,EAAA,IAAApB,EAAAL,aAHhByO,EAAA1G,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZ6G,SAAAA,CAAAA,EAGA/H,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAAS9L,WAAUL,WAAAA,CAAa,CAAA,EACpD,EAASyB,EAAA,EAAA,EAAApB,EAAAL,YAAAyB,MAAAgN,GAAAA,EAAAhN,EAAA,EAAA,EAAA,IAAAiN,EAAAjN,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELkG,QAACvC,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,eAE1C,EAAY1K,MAAAiN,GAAAA,EAAAjN,EAAA,EAAA,EAAA,IAAAkN,EAAAlN,EAAA,EAAA,IAAApB,EAAAuO,OAHhBD,EAAA5G,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZ+G,SAAAA,CAAAA,EAGAjI,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAAS9L,WAAUuO,KAAAA,CAAO,CAAA,EAC9C,EAASnN,EAAA,EAAA,EAAApB,EAAAuO,MAAAnN,MAAAkN,GAAAA,EAAAlN,EAAA,EAAA,EAAA,IAAAoN,EAAApN,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELqG,QAAC1C,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,qBAE1C,EAAY1K,MAAAoN,GAAAA,EAAApN,EAAA,EAAA,EAAA,IAAAqN,EAAArN,EAAA,EAAA,IAAApB,EAAA0O,QAHhBD,EAAA/G,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZkH,SAAAA,CAAAA,EAGApI,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAAS9L,WAAU0O,MAAAA,CAAQ,CAAA,EAC/C,EAAStN,EAAA,EAAA,EAAApB,EAAA0O,OAAAtN,MAAAqN,GAAAA,EAAArN,EAAA,EAAA,EAAA,IAAAuN,EAAAvN,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAELwG,QAAC7C,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,qBAE1C,EAAY1K,MAAAuN,GAAAA,EAAAvN,EAAA,EAAA,EAAA,IAAAwN,EAAAxN,EAAA,EAAA,IAAApB,EAAAiD,QAHhB2L,EAAAlH,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZqH,SAAAA,CAAAA,EAGAvI,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAAS9L,WAAUiD,MAAAA,CAAQ,CAAA,EAC/C,EAAS7B,EAAA,EAAA,EAAApB,EAAAiD,OAAA7B,MAAAwN,GAAAA,EAAAxN,EAAA,EAAA,EAAA,IAAAyN,EAAAzN,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAEL0G,QAAC/C,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,WAE1C,EAAY1K,MAAAyN,GAAAA,EAAAzN,EAAA,EAAA,EAAA,IAAA0N,EAAA1N,EAAA,EAAA,IAAApB,EAAA+O,SAHhBD,EAAApH,EAAAA,KAACJ,EAAA,CAAe,QAAA,gBACZuH,SAAAA,CAAAA,EAGAzI,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAAS9L,WAAU+O,OAAAA,CAAS,CAAA,EAChD,EAAS3N,EAAA,EAAA,EAAApB,EAAA+O,QAAA3N,MAAA0N,GAAAA,EAAA1N,EAAA,EAAA,EAAA,IAAA4N,EAAA5N,EAAA,EAAA,IAAA0M,GAAA1M,EAAA,EAAA,IAAA8M,GAAA9M,EAAA,EAAA,IAAAgN,GAAAhN,QAAAkN,GAAAlN,EAAA,EAAA,IAAAqN,GAAArN,EAAA,EAAA,IAAAwN,GAAAxN,EAAA,EAAA,IAAA0N,GA9CbE,SAAClC,GAAA,CAAU,IAAA,IAAa,QAAA,EAAa,UAAA,OACjCgB,SAAAA,CAAAA,EAQAI,EAQAE,EAMAE,EAMAG,EAMAG,EAMAE,CAAAA,EAMJ,EAAQ1N,MAAA0M,EAAA1M,MAAA8M,EAAA9M,MAAAgN,EAAAhN,MAAAkN,EAAAlN,MAAAqN,EAAArN,MAAAwN,EAAAxN,MAAA0N,EAAA1N,MAAA4N,GAAAA,EAAA5N,EAAA,EAAA,EAAA,IAAA6N,EAAA7N,EAAA,EAAA,IAAAuL,GAAAvL,QAAAyL,GAAAzL,EAAA,EAAA,IAAAwL,GACRqC,QAACvC,GAAA,CAAsBC,OAAAA,EAAeC,MAAAA,EAAcC,MAAAA,EAAK,EAAIzL,MAAAuL,EAAAvL,MAAAyL,EAAAzL,MAAAwL,EAAAxL,MAAA6N,GAAAA,EAAA7N,EAAA,EAAA,EAAA,IAAA8N,EAAA9N,QAAAnB,GAC5DiP,EAAAjP,GAAOJ,UACJuG,EAAAA,IAAA,MAAA,CAAe,UAAA,OACX,SAAAA,EAAAA,IAACqG,GAAA,CAAmCxM,QAAAA,CAAAA,CAAO,CAAA,CAC/C,EACHmB,MAAAnB,EAAAmB,MAAA8N,GAAAA,EAAA9N,EAAA,EAAA,EAAA,IAAA+N,EAAA,OAAA/N,EAAA,EAAA,IAAAiM,GAAAjM,EAAA,EAAA,IAAA4N,GAAA5N,EAAA,EAAA,IAAA6N,GAAA7N,EAAA,EAAA,IAAA8N,GAAA9N,QAAA6H,GAxETkG,QAACC,GAAA,CAAa,QAAA,IAAc,UAAA,OACxB,gBAAC/B,EAAA,CACGpE,SAAAA,CAAAA,EAiBA+F,EAgDAC,EACCC,CAAAA,CAAAA,CAKL,CAAA,CACJ,EAAO9N,MAAAiM,EAAAjM,MAAA4N,EAAA5N,MAAA6N,EAAA7N,MAAA8N,EAAA9N,MAAA6H,EAAA7H,MAAA+N,GAAAA,EAAA/N,EAAA,EAAA,EA1EP+N,CA0EO,EAITE,GAAyB7N,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAA7B,aAAAA,EAAAuE,QAAAA,CAAAA,EAAAvC,EAC5BwL,EAAgBC,GAAAA,EAChBqC,EAAYvL,EAAOnD,KAAAa,OAAa,YAAY,EAC5C8N,EAAYxL,EAAOlD,GAAAY,OAAW,YAAY,EAC1C+N,EAA2B,GAAGF,CAAG,MAAMC,CAAG,GAAG,IAAA5N,EAAAP,OAAA5B,GAC9BmC,EAAA8B,EAA4BjE,EAAYmD,KAA4B,EAACvB,KAAA5B,EAAA4B,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAApF,MAAAuL,EAAehL,EAAsE,IAAAI,EAAAX,OAAA5B,GACvEuC,EAAA0B,EAA4BjE,EAAYqD,KAA0B,EAACzB,KAAA5B,EAAA4B,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAAjF,MAAAwL,EAAc7K,EAAoE,IAAAC,EAAAZ,OAAA5B,GACpEwC,EAAAyB,EAA4BjE,EAAY8C,KAA0B,EAAClB,KAAA5B,EAAA4B,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAAjF,MAAAyL,EAAc7K,EAAoE,IAAAC,EAAAb,OAAA5B,GAClEyC,EAAA6H,GAAuCtK,CAAY,EAAC4B,KAAA5B,EAAA4B,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAApE,MAAAnB,EAAgBgC,EAAqD,IAAA6E,EAAA1F,OAAA4L,GAEjDlG,EAAAA,IAAA,CAChBkG,EAAOG,aAAAA,CAAe,EACzB/L,KAAA4L,EAAA5L,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAFD,MAAAgM,EAAoBtG,EAIpBuG,EAAuBL,EAAOM,eAAgB,IAAA1E,EAAAxH,QAAAoO,GAM9B5G,SAAC4E,EAAA,CAAW,GAAA,KAAU,KAAA,QAAQ,SAAA,CAAA,oBACRgC,EAAmB,GAAA,EACzC,EAAUpO,MAAAoO,EAAApO,MAAAwH,GAAAA,EAAAxH,EAAA,EAAA,EAAA,IAAA2H,EAAA3H,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAKAY,QAAC0E,GAAA,CAAiB,cAAA,EAAA,CAAW,EAAGrM,MAAA2H,GAAAA,EAAA3H,EAAA,EAAA,EAAA,IAAA4H,EAAA5H,QAAAgM,GAJ1CpE,EAAA5C,EAAAA,IAACsH,GAAA,CACQ,KAAA,QACG,QAAA,WACK,aAAA,QACP,KAAA3E,EACGqE,QAAAA,EACZ,SAAA,WAED,EAAShM,MAAAgM,EAAAhM,MAAA4H,GAAAA,EAAA5H,EAAA,EAAA,EAAA,IAAA6H,EAAA7H,EAAA,EAAA,IAAAwH,GAAAxH,QAAA4H,GAZbC,EAAAvB,EAAAA,KAACkD,EAAA,CAAe,QAAA,gBACZhC,SAAAA,CAAAA,EAGAI,CAAAA,EASJ,EAAS5H,MAAAwH,EAAAxH,MAAA4H,EAAA5H,MAAA6H,GAAAA,EAAA7H,EAAA,EAAA,EAAA,IAAA8H,EAAA9H,EAAA,EAAA,IAAA5B,EAAAK,QACTqJ,SAAC4C,EAAA,CAAe,KAAA,QAAQ,SAAA,CAAA,cACRtM,EAAYK,OAAQ,+CAAA,EACpC,EAAYuB,EAAA,EAAA,EAAA5B,EAAAK,OAAAuB,MAAA8H,GAAAA,EAAA9H,EAAA,EAAA,EAAA,IAAAuM,EAAAvM,EAAA,EAAA,IAAAuL,GAAAvL,QAAAyL,GAAAzL,EAAA,EAAA,IAAAwL,GACZe,QAACjB,GAAA,CAAsBC,OAAAA,EAAeC,MAAAA,EAAcC,MAAAA,EAAK,EAAIzL,MAAAuL,EAAAvL,MAAAyL,EAAAzL,MAAAwL,EAAAxL,MAAAuM,GAAAA,EAAAvM,EAAA,EAAA,EAAA,IAAA0M,EAAA1M,QAAAnB,GAExD6N,EAAA7N,GAAOJ,OAAA,SAAiBkM,GAAA,CAAuC9L,QAAAA,EAAsB,YAAA,GAAI,EAAImB,MAAAnB,EAAAmB,MAAA0M,GAAAA,EAAA1M,EAAA,EAAA,EAAA,IAAA2M,EAAA3M,QAAA0M,GADlGC,QAACzG,EAAA,CAAW,IAAA,IAAc,UAAA,OACrBwG,SAAAA,EACL,EAAS1M,MAAA0M,EAAA1M,MAAA2M,GAAAA,EAAA3M,EAAA,EAAA,EAAA,IAAA4M,EAAA,OAAA5M,EAAA,EAAA,IAAAiM,GAAAjM,EAAA,EAAA,IAAA8H,GAAA9H,EAAA,EAAA,IAAAuM,GAAAvM,EAAA,EAAA,IAAA2M,GAAA3M,QAAA6H,GAtBjB+E,EAAA5H,EAAAA,IAACgJ,GAAA,CAAa,QAAA,IACV,gBAAC/B,EAAA,CACGpE,SAAAA,CAAAA,EAcAC,EAGAyE,EACAI,CAAAA,CAAAA,CAGJ,CAAA,CACJ,EAAO3M,MAAAiM,EAAAjM,MAAA8H,EAAA9H,MAAAuM,EAAAvM,MAAA2M,EAAA3M,MAAA6H,EAAA7H,MAAA4M,GAAAA,EAAA5M,EAAA,EAAA,EAxBP4M,CAwBO,EAITyB,GAAWC,GAAY,wBAAwB,EAE/CC,GAAmBnO,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAA7B,aAAAA,CAAAA,EAAAgC,EACtB,CAAAoO,GAAAA,CAAAA,EAAeH,GAAAI,UAAAA,EAAqB,IAAAlO,EAAA,GAAAP,EAAA,CAAA,IAAAwO,GAAAxO,OAAA5B,EAAA,CAAA,IAAAuC,EAAAX,OAAAwO,GACS7N,EAAA5B,GAAUyE,GAAgBzE,CAAI,IAAMyP,EAAExO,KAAAwO,EAAAxO,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAAxDO,EAAAnC,EAAYsQ,KAAM/N,CAAsC,EAACX,KAAAwO,EAAAxO,KAAA5B,EAAA4B,KAAAO,CAAA,MAAAA,EAAAP,EAAA,CAAA,EAApF,MAAA2O,EAA2BpO,EAC3BqO,EAAwB1O,EAAAC,CAAiC,EACzD0O,EAAsBhI,EAAAA,OAAA1G,CAA2B,EAAE,IAAAQ,EAAAC,EASI,GATJZ,EAAA,CAAA,IAAA4O,GAAA5O,OAAA2O,GAAA3O,EAAA,CAAA,IAAA5B,GAGzCuC,EAAAA,IAAA,CACN,MAAAmO,EAAqBC,KAAAC,UAAeH,EAAa5H,QAAAgI,IAAa,IAAMF,KAAAC,UAAeJ,CAAe,EAClGM,EAA6B,CAACP,GAAkB,CAAKvQ,EAAYa,SAAU0P,CAAkB,EACzFG,GAAgBI,GAChBC,GAAAC,MAAAA,CAAiC,EAEtCxO,EAAA,CAAC+N,EAAoBvQ,EAAcwQ,CAAe,EAAC5O,KAAA4O,EAAA5O,KAAA2O,EAAA3O,KAAA5B,EAAA4B,KAAAW,EAAAX,KAAAY,IAAAD,EAAAX,EAAA,CAAA,EAAAY,EAAAZ,EAAA,CAAA,GANtDqP,EAAAA,UAAU1O,EAMPC,CAAmD,EAElDxC,EAAYK,SAAA,EAAa,CAAA,IAAAoC,EAAA,OAAAb,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAErBlG,EAAAmE,EAAAA,IAACsK,GAAA,CAAgB,UAAA,OAAe,QAAA,OAAO,SAAA,0BAEvC,EAAQtP,MAAAa,GAAAA,EAAAb,EAAA,EAAA,EAFRa,CAEQ,CAAA,GAAA,CAIX2N,EAAE,CAAA,IAAA3N,EAAA,OAAAb,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAEClG,QAAC2I,EAAA,CAAc,OAAA,IACX,SAAAxE,EAAAA,IAACuK,GAAA,CAAW,wEAA4D,CAAA,CAC5E,EAASvP,MAAAa,GAAAA,EAAAb,EAAA,EAAA,EAFTa,CAES,CAAA,GAAA,CAIZ8N,EAAkB,CAAA,IAAA9N,EAAA,OAAAb,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAEflG,EAAAmE,EAAAA,IAACkB,EAAA,CAAgB,SAAA,IAAc,UAAA,IAAc,UAAA,OACzC,SAAAlB,EAAAA,IAACsK,GAAA,CAAc,QAAA,QAAQ,oDAAwC,EACnE,EAAStP,MAAAa,GAAAA,EAAAb,EAAA,EAAA,EAFTa,CAES,CAAA,IAAAA,EAAA,OAAAb,QAAA2O,GAKb9N,EAAAmE,EAAAA,IAAAuC,EAAA,IAAA,CACI,eAACoE,GAAA,CAA+BgD,WAAAA,EAAkB,CAAA,CACtD,EAAU3O,MAAA2O,EAAA3O,MAAAa,GAAAA,EAAAb,EAAA,EAAA,EAFVa,CAEU,EAIZ2O,GAAqBA,IAAA,CAAA,MAAAxP,EAAAC,EAAAA,EAAA,CAAA,EACvBzB,EAAkB0B,EAAAwE,EAA0C,EAC5DtG,EAAqB2B,GAAAA,EAAwB,IAAAK,EAAAJ,EAAA,CAAA,IAAAxB,GAAAwB,OAAA5B,GAIrCgC,EAAA4E,EAAAA,IAAAuC,EAAA,IAAA,CACI,eAAC0G,GAAA,CAAqC7P,aAAAA,EAAuBI,QAAAA,CAAAA,GACjE,EAAUwB,KAAAxB,EAAAwB,KAAA5B,EAAA4B,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAAA,IAAAO,EAAAP,OAAA5B,GACVmC,QAACgO,IAA+BnQ,aAAAA,CAAAA,CAAY,EAAI4B,KAAA5B,EAAA4B,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAA,IAAAW,EAAA,OAAAX,EAAA,CAAA,IAAAI,GAAAJ,OAAAO,GAJpDI,EAAA2F,EAAAA,KAACJ,GAAgB,SAAA,IAAc,UAAA,IAAc,UAAA,OAAiB,UAAA,kBAC1D9F,SAAAA,CAAAA,EAGAG,CAAAA,EACJ,EAASP,KAAAI,EAAAJ,KAAAO,EAAAP,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EALTW,CAKS,EAIJ8O,GAAyBA,IAAA,CAAA,MAAAzP,EAAAC,EAAAA,EAAA,CAAA,EAAA,IAAAG,EAAA,OAAAJ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAE9B3G,QAACsP,GAAA,CAA2B,aAAA,qBACxB,SAAA1K,MAACyC,EAAAA,UAAmB,SAAAzC,EAAAA,IAAC0C,GAAA,CAAiB,QAAA,UAAiB,OAAA,QACnD,SAAA1C,EAAAA,IAACwK,GAAA,IACL,CAAA,CACJ,EAAgBxP,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAJhBI,CAIgB,EA3Tc,SAAAa,GAAA0O,EAAAC,EAAA,CAAA,OAkBFrH,GAAiBoH,EAACjG,SAAWkG,EAAClG,QAAS,CAAC,CA4B1C,SAAA3B,GAAA1G,EAAAoJ,EAAA,CAed,MAAAS,EAAoB7J,EAAMrC,MAAS,GACnC2D,EAAgBtB,EAAMsB,QAChB,GAAGyI,GAAa/J,EAAMsB,SAAAC,KAAe,CAAC,MAAMwI,GAAa/J,EAAMsB,SAAAG,KAAe,CAAC,GAC/E,GAAG,OAGLwD,OAAAkE,EAAA,cAAA,CAEa,QAAAb,GAA0BtI,CAAM,EAC5B,YAAA,GAEb,SAAA,CAAA2D,EAAAA,IAAAwF,EAAA,WAAA,CAAwB,MAAA,MAAOU,SAAAA,EAAY,EAC3ClG,EAAAA,IAAAwF,EAAA,SAAA,CAAiB7H,SAAAA,CAAAA,CAAQ,QACzB6H,EAAA,SAAA,CAAiBvI,SAAAA,EAAYZ,EAAMG,qBAAsB,EAAE,EAC3DwD,EAAAA,IAAAwF,EAAA,SAAA,CAAiBvI,WAAYZ,EAAMK,SAAYL,EAAMM,QAAS,EAAE,QAChE6I,EAAA,SAAA,CAAiBvI,SAAAA,EAAYZ,EAAMC,UAAW,CAAA,CAAE,CAAA,CAAA,EAR3CmJ,EAAIS,CASb,CAAsB,CAgCnB,SAAA1F,GAAAzG,EAAA,CAAA,OAoBiBA,EAAIC,IAAA,CC1QhD,MAAMqP,GAAWC,GAAY,wBAAwB,EAExCuB,GAAiBzP,GAAA,CAAA,MAAAJ,EAAAC,EAAAA,EAAA,EAAA,EAAC,CAAArB,WAAAA,EAAAkR,YAAAA,CAAAA,EAAA1P,EAO3B2P,EAAwB1B,GAAAI,UAAAA,EAAoBD,GAAI,IAAAjO,EAAAP,OAAApB,GACrC2B,EAAAiD,GAAgB5E,CAAU,EAACoB,KAAApB,EAAAoB,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAtC,MAAAwO,EAAWjO,EAKQI,EAAA;AAAA,kBACLoP,IAAoBvB,EAAK,6BAA+B,EAAE,GAAE,IAAA5N,EAAAZ,EAAA,CAAA,IAAA8P,GAAA9P,OAAAwO,GACzD5N,EAAAA,IAAMkP,EAAYtB,CAAE,EAACxO,KAAA8P,EAAA9P,KAAAwO,EAAAxO,KAAAY,GAAAA,EAAAZ,EAAA,CAAA,EAAA,IAAAa,EAAAb,EAAA,CAAA,IAAApB,EAAAC,SAKjBgC,EAAAjC,EAAUC,SAAA4E,IAAAxC,EAAA,GAAAkL,OAAAA,EAAAzI,KAGD,IAAI,EAAC1D,EAAA,CAAA,EAAApB,EAAAC,QAAAmB,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,OAAAa,GAJnB6E,EAAAV,EAAAA,IAACoH,GAAa,KAAA,SAAY,GAAA,KAAW,MAAA,IAChCvL,SAAAA,CAAAA,CAIL,EAAUb,KAAAa,EAAAb,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAAA,IAAAwH,EAAAxH,EAAA,CAAA,IAAApB,EAAA0C,YACekG,EAAAvF,EAAYrD,EAAU0C,UAAW,EAACtB,EAAA,CAAA,EAAApB,EAAA0C,WAAAtB,MAAAwH,GAAAA,EAAAxH,EAAA,EAAA,EAAA,IAAA2H,EAAA3H,QAAAwH,GAA3DG,EAAA3C,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QAASlD,SAAAA,EAAmC,EAAYxH,MAAAwH,EAAAxH,MAAA2H,GAAAA,EAAA3H,EAAA,EAAA,EAAA,IAAA4H,EAAA5H,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAEpEa,QAAC8C,EAAA,CAAe,KAAA,QAAe,OAAA,WAAW,SAAA,gBAE1C,EAAY1K,MAAA4H,GAAAA,EAAA5H,EAAA,EAAA,EAAA,IAAA6H,EAAA7H,EAAA,EAAA,IAAApB,EAAA4N,cAEP3E,EAAAjJ,EAAU4N,aAAgBC,GAAc7N,EAAU4N,YAAa,EAAI,GAAExM,EAAA,EAAA,EAAApB,EAAA4N,aAAAxM,MAAA6H,GAAAA,EAAA7H,EAAA,EAAA,EAAA,IAAA8H,EAAA9H,QAAA6H,GAL9EC,EAAAxB,EAAAA,KAACkD,EAAA,CAAW,IAAA,IACR5B,SAAAA,CAAAA,EAGA5C,EAAAA,IAAC0F,EAAA,CAAe,KAAA,QACX7C,SAAAA,CAAAA,CACL,CAAA,EACJ,EAAS7H,MAAA6H,EAAA7H,MAAA8H,GAAAA,EAAA9H,EAAA,EAAA,EAAA,IAAAuM,EAAAvM,EAAA,EAAA,IAAApB,EAAAiD,QACT0K,QAAC7B,EAAA,CAAe,KAAA,QAAkB,UAAA,SAC7B9L,WAAUiD,MAAAA,CACf,EAAY7B,EAAA,EAAA,EAAApB,EAAAiD,OAAA7B,MAAAuM,GAAAA,EAAAvM,EAAA,EAAA,EAAA,IAAA0M,EAAA1M,EAAA,EAAA,IAAA8H,GAAA9H,EAAA,EAAA,IAAAuM,GAAAvM,EAAA,EAAA,IAAA0F,GAAA1F,QAAA2H,GAlBhB+E,EAAApG,EAAAA,KAACJ,EAAA,CAAe,QAAA,SAAa,IAAA,IACzBR,SAAAA,CAAAA,EAMAiC,EACAG,EAQAyE,CAAAA,EAGJ,EAASvM,MAAA8H,EAAA9H,MAAAuM,EAAAvM,MAAA0F,EAAA1F,MAAA2H,EAAA3H,MAAA0M,GAAAA,EAAA1M,EAAA,EAAA,EAAA,IAAA2M,EAAA3M,EAAA,EAAA,IAAA8G,OAAAC,IAAA,2BAAA,GACT4F,EAAA3H,EAAAA,IAACsH,GAAA,CACW,QAAA,mBACH,KAAA,QACA,KAAA,OACM,aAAA,OACL,KAAAtH,MAACgL,GAAA,CAA2B,UAAA,+DAA8D,EAAG,EACrGhQ,MAAA2M,GAAAA,EAAA3M,EAAA,EAAA,EAAA,IAAA4M,EAAA5M,QAAA0M,GA3BNE,SAACpD,EAAA,CAAe,QAAA,gBAAoB,IAAA,IAAU,KAAA,GAC1CkD,SAAAA,CAAAA,EAoBAC,CAAAA,EAOJ,EAAS3M,MAAA0M,EAAA1M,MAAA4M,GAAAA,EAAA5M,EAAA,EAAA,EAAA,IAAA8M,EAAA,OAAA9M,EAAA,EAAA,IAAA4M,GAAA5M,QAAAW,GAAAX,EAAA,EAAA,IAAAY,GAnCbkM,EAAA9H,EAAAA,IAACgJ,GAAA,CACW,QAAA,IACL,GAAA,KACQ,UAAArN,EAEF,QAAAC,EAETgM,SAAAA,CAAAA,CA6BJ,EAAO5M,MAAA4M,EAAA5M,MAAAW,EAAAX,MAAAY,EAAAZ,MAAA8M,GAAAA,EAAA9M,EAAA,EAAA,EApCP8M,CAoCO,EA9Ce,SAAA7L,GAAAlC,EAAA,CAAA,OAqBcA,EAAIC,IAAA,CCtBzC,MAAMiR,GAAmBA,IAC5B3J,EAAAA,KAACJ,GAAO,UAAU,IAAI,IAAI,IACtB,SAAA,CAAAlB,EAAAA,IAACwB,GAAA,EAAoB,QACpBkJ,GAAA,CAAc,aAAa,mBACxB,SAAA1K,EAAAA,IAACyC,WAAA,CACG,SACIzC,EAAAA,IAACkB,EAAA,CAAO,IAAI,IAAI,aAAa,MACxBgK,SAAAA,MAAM,CAAC,EACHC,KAAAA,EACA1M,IAAKgH,GACFzF,MAAC0C,GAAA,CAAiB,QAAQ,UAAU,OAAQ,IAA7B+C,EAClB,EACT,EAGJ,SAAAzF,EAAAA,IAACkB,EAAA,CAAO,UAAU,IAAI,IAAI,IACtB,eAACkK,GAAA,CAAA,CAAc,CAAA,CACnB,EACJ,CAAA,CACJ,CAAA,EACJ,EAGEA,GAAiBA,IAAA,CAAA,MAAApQ,EAAAC,EAAAA,EAAA,EAAA,EACnB7B,EAAqB2B,GAAAA,EAAwB,IAAAK,EAAAJ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAChB3G,EAAA,CAAAZ,KAAQ,wBAAA,EAA0BQ,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAA/D,MAAAqQ,EAAiBC,GAAYlQ,CAAkC,EAAE,IAAAG,EAAAP,OAAAqQ,GAG7D9P,EAAAiO,GAAA,CACI6B,EAAQ,CAAAE,OAAA,CAAA/B,GAAAA,CAAAA,CAAA,CAAmB,CAAC,EAC/BxO,KAAAqQ,EAAArQ,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAHL,MAAA8P,EAAoBvP,EAKlB,IAAAI,EAAAX,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAE4BpG,EAAA,CAAAnB,KACpB,yBAAwBgR,OAAAvP,EAAAA,EAEjCjB,KAAAW,GAAAA,EAAAX,EAAA,CAAA,EAHD,MAAAyQ,EAAoBhC,GAAU9N,CAG7B,EAKkCC,EAAAxC,EAAYK,SAAA,EAAgB,aAAe,eAAc,IAAAoC,EAAAb,OAAAY,GAAAZ,EAAA,CAAA,IAAA5B,EAAAK,QADpFoC,SAACuL,EAAA,CAAkB,UAAA,OAAY,KAAA,SAAe,MAAA,IACzChO,SAAAA,CAAAA,EAAYK,OAAQ,IAAEmC,CAAAA,EAC3B,EAAUZ,KAAAY,EAAAZ,EAAA,CAAA,EAAA5B,EAAAK,OAAAuB,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,EAAA,CAAA,IAAA8P,GAAA9P,OAAAyQ,GAAAzQ,EAAA,CAAA,IAAA5B,GACTsH,EAAAtH,EAAYK,OAAA,GACTuG,EAAAA,IAAC0L,GAAA,CACgBD,YAAAA,EACNrS,MAAAA,EACOoF,aAAAA,GACF,WAAAgE,GAAA,CAAC,KAAA,CAAAzI,KAAAA,CAAAA,EAAAyI,EAAQ,OAAKxC,EAAAA,IAAC6K,GAAA,CAA2B9Q,WAAAA,EAAmB+Q,YAAAA,CAAAA,CAAW,CAAI,EAAA,EAE/F9P,KAAA8P,EAAA9P,KAAAyQ,EAAAzQ,KAAA5B,EAAA4B,MAAA0F,GAAAA,EAAA1F,EAAA,EAAA,EAAA,IAAAwH,EAAA,OAAAxH,EAAA,EAAA,IAAAa,GAAAb,QAAA0F,GAXL8B,qBACI3G,SAAAA,CAAAA,EAGC6E,CAAAA,EAOA,EACF1F,MAAAa,EAAAb,MAAA0F,EAAA1F,MAAAwH,GAAAA,EAAAxH,EAAA,EAAA,EAZHwH,CAYG,EA7BY,SAAAvG,GAAA0P,EAAA,CAAA,OAaAA,EAACnC,EAAA,CCtCjB,MAAMoC,GAAiBA,IAAA,CAAA,MAAA5Q,EAAAC,EAAAA,EAAA,CAAA,EAAA,IAAAG,EAAAJ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAIT3G,EAAA,CAAAyQ,GAAA,EAAAC,GAAa,iBAAA,EAAmB9Q,KAAAI,GAAAA,EAAAJ,EAAA,CAAA,EAAA,IAAAO,EAAAP,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAE/BxG,EAAA,CAAAsQ,GAAM,SAAQC,GAAM,QAAA,EAAU9Q,KAAAO,GAAAA,EAAAP,EAAA,CAAA,EAAA,IAAAW,EAAAC,EAAAZ,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAERpG,EAAA,CAAAmQ,GAAM,MAAA,EAAoBlQ,EAAA,CAAAkQ,GAAM,QAAA,EAAU9Q,KAAAW,EAAAX,KAAAY,IAAAD,EAAAX,EAAA,CAAA,EAAAY,EAAAZ,EAAA,CAAA,GAAA,IAAAa,EAAAb,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAM1DlG,EAAAmC,GAAAA,EAAUhD,KAAAa,GAAAA,EAAAb,EAAA,CAAA,EAAA,IAAA0F,EAAA1F,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAN1BrB,SAACQ,EAAA,CAAc,OAAA,OAAiB,SAAAvF,EAA0B,SAAAC,EACtD,SAAA,CAAAoE,EAAAA,IAACwE,EAAA,CACG,SAAAxE,EAAAA,IAACsH,GAAA,CACQ,KAAA,QACG,QAAA,WACJyE,GAAAA,GACA,GAAAlQ,EACS,aAAA,QACF,aAAA,uBACL,WAACmQ,GAAA,CAAiB,cAAA,GAAqB,SAAA,MAAA,CAAM,EACtD,SAAA,sBAAA,CAED,CAAA,CACJ,EACAhM,EAAAA,IAACoH,EAAA,CAAa,KAAA,QAAQ,SAAA,eAAY,QACjC6D,GAAA,CAAA,CAAgB,CAAA,EACrB,EAASjQ,KAAA0F,GAAAA,EAAA1F,EAAA,CAAA,EAAA,IAAAwH,EAAAxH,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GACSS,EAAA,CAAAqJ,GAAM,SAAQC,GAAM,QAAA,EAAU9Q,KAAAwH,GAAAA,EAAAxH,EAAA,CAAA,EAAA,IAAA2H,EAAA,OAAA3H,EAAA,CAAA,IAAA8G,OAAAC,IAAA,2BAAA,GAvBpDY,EAAArB,EAAAA,KAACoF,IACO,IAAA,IACK,QAAAtL,EACF,OAAA,OACG,SAAAG,EAEVmF,SAAAA,CAAAA,EAiBAV,EAAAA,IAACkB,GAAiB,SAAAsB,EAA0C,UAAA,uBACxD,SAAAxC,EAAAA,IAACyK,KAAsB,CAAA,CAC3B,CAAA,EACJ,EAAQzP,KAAA2H,GAAAA,EAAA3H,EAAA,CAAA,EA1BR2H,CA0BQ,EChCHsJ,GAAQC,GAAoB,wBAAwB,EAAE,CAC/DC,UAAWP,EACf,CAAC"}