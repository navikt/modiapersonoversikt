{"version":3,"file":"index-CyLVgzxc.js","sources":["../../src/components/ytelser/Detail/arbeidsavklaringspenger/index.tsx","../../src/components/ytelser/Detail/ArbeidsforholdListe.tsx","../../src/components/ytelser/List/Filter.tsx","../../src/components/ytelser/utils.ts","../../src/components/ytelser/Detail/foreldrepenger/index.tsx","../../src/components/ytelser/Detail/pensjon/index.tsx","../../src/components/ytelser/Detail/pleiepenger/index.tsx","../../src/components/ytelser/Detail/sykepenger/index.tsx","../../src/components/ytelser/Detail/tiltakspenger/index.tsx","../../src/components/ytelser/Detail/index.tsx"],"sourcesContent":["import { Heading, VStack } from '@navikt/ds-react';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport type { Arbeidsavklaringspenger } from 'src/models/ytelse/arbeidsavklaringspenger';\nimport { formaterDato } from 'src/utils/string-utils';\n\nconst Arbeidsavklaringspenger = ({ aap }: { aap: Arbeidsavklaringspenger }) => {\n    const entries = {\n        VedtaksId: aap.vedtakId,\n        Vedtaksdato: aap.vedtaksdato ? formaterDato(aap.vedtaksdato) : '',\n        'Fra og med': aap.periode.fraOgMedDato ? formaterDato(aap.periode.fraOgMedDato) : '',\n        'Til og med': aap.periode.tilOgMedDato ? formaterDato(aap.periode.tilOgMedDato) : '',\n        Rettighet: aap.rettighetsType ?? '',\n        Status: aap.status ?? '',\n        Kilde: aap.kildesystem ?? '',\n        Dagsats: aap.dagsats ?? '',\n        ...(aap.opphorsAarsak ? { Opphørsårsak: aap.opphorsAarsak } : {})\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om arbeidsavklaringspenger\n            </Heading>\n            <TitleValuePairsComponent entries={entries} columns={{ xs: 2, lg: 4 }} />\n        </Card>\n    );\n};\n\nconst BarneTillegg = ({ aap }: { aap: Arbeidsavklaringspenger }) => {\n    if (aap.barnMedStonad === 0) return;\n\n    const entries = {\n        'Barn med stønad': aap.barnMedStonad ?? 0,\n        Barnetillegg: aap.barnetillegg ?? ''\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"xsmall\">\n                Barnetillegg\n            </Heading>\n            <TitleValuePairsComponent entries={entries} columns={{ xs: 2, lg: 4 }} />\n        </Card>\n    );\n};\n\nexport const ArbeidsavklaringspengerDetails = ({ aap }: { aap: Arbeidsavklaringspenger }) => {\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"arbreidsavklaringspengerBoundary\">\n                <Arbeidsavklaringspenger aap={aap} />\n                <BarneTillegg aap={aap} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Accordion, Alert, VStack } from '@navikt/ds-react';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail/index';\nimport type {\n    ForeldrepengerArbeidsforhold,\n    PleiepengerArbeidsforhold,\n    SykmeldingArbeidsforhold\n} from 'src/generated/modiapersonoversikt-api';\nimport { YtelseVedtakYtelseType } from 'src/generated/modiapersonoversikt-api';\nimport { FormatertKontonummer } from 'src/utils/FormatertKontonummer';\nimport { NOKellerNull, datoEllerNull } from 'src/utils/string-utils';\n\nfunction ArbeidsForholdListe({\n    arbeidsForholdList,\n    ytelseType\n}: {\n    arbeidsForholdList: (ForeldrepengerArbeidsforhold | PleiepengerArbeidsforhold | SykmeldingArbeidsforhold)[];\n    ytelseType: YtelseVedtakYtelseType;\n}) {\n    if (!arbeidsForholdList || arbeidsForholdList.length === 0) {\n        return <Alert variant=\"info\">Ingen arbeidsgiver er registrert.</Alert>;\n    }\n\n    const getPleiepengerArbeidsforholdEntries = (pleiepengerArbeidsforhold: PleiepengerArbeidsforhold) => {\n        return {\n            Arbeidsgiver: pleiepengerArbeidsforhold.arbeidsgiverNavn,\n            Arbeidskategori: pleiepengerArbeidsforhold.arbeidskategori,\n            Inntekstsperiode: pleiepengerArbeidsforhold.inntektsperiode,\n            Kontonummer: pleiepengerArbeidsforhold.arbeidsgiverKontonr && (\n                <FormatertKontonummer kontonummer={pleiepengerArbeidsforhold.arbeidsgiverKontonr} />\n            ),\n            Refusjonstype: pleiepengerArbeidsforhold.refusjonstype,\n            'Inntekt for perioden': NOKellerNull(pleiepengerArbeidsforhold.inntektForPerioden),\n            'Refusjon til dato': datoEllerNull(pleiepengerArbeidsforhold.refusjonTom)\n        };\n    };\n\n    const getArbeidsforholdEntries = (arbeidsforhold: ForeldrepengerArbeidsforhold | SykmeldingArbeidsforhold) => {\n        return {\n            Arbeidsgiver: arbeidsforhold.arbeidsgiverNavn,\n            Kontonummer: arbeidsforhold.arbeidsgiverKontonr && (\n                <FormatertKontonummer kontonummer={arbeidsforhold.arbeidsgiverKontonr} />\n            ),\n            Inntekstsperiode: arbeidsforhold.inntektsperiode,\n            'Inntekt for perioden': NOKellerNull(arbeidsforhold.inntektForPerioden),\n            Refusjonstype: arbeidsforhold.refusjonstype,\n            'Refusjon til dato': datoEllerNull(arbeidsforhold.refusjonTom),\n            'Sykepenger fra og med': datoEllerNull(arbeidsforhold.sykepengerFom)\n        };\n    };\n\n    const getArbeidsForholdEntries = (\n        arbeidsforhold: ForeldrepengerArbeidsforhold | PleiepengerArbeidsforhold | SykmeldingArbeidsforhold\n    ) => {\n        switch (ytelseType) {\n            case YtelseVedtakYtelseType.Foreldrepenger:\n                return getArbeidsforholdEntries(arbeidsforhold);\n            case YtelseVedtakYtelseType.Sykepenger:\n                return getArbeidsforholdEntries(arbeidsforhold);\n            case YtelseVedtakYtelseType.Pleiepenger:\n                return getPleiepengerArbeidsforholdEntries(arbeidsforhold);\n            case YtelseVedtakYtelseType.Tiltakspenge:\n                return {};\n            case YtelseVedtakYtelseType.Pensjon:\n                return {};\n            default:\n                return {};\n        }\n    };\n\n    return (\n        <VStack gap=\"2\">\n            <Accordion size=\"small\" headingSize=\"xsmall\">\n                {arbeidsForholdList.map((arbeidsForhold, index) => {\n                    return (\n                        <Accordion.Item key={index} defaultOpen>\n                            <Accordion.Header>Arbeidsgiver: {arbeidsForhold.arbeidsgiverNavn}</Accordion.Header>\n                            <Accordion.Content>\n                                <TitleValuePairsComponent\n                                    entries={getArbeidsForholdEntries(arbeidsForhold)}\n                                    columns={{ xs: 2, lg: 4 }}\n                                />\n                            </Accordion.Content>\n                        </Accordion.Item>\n                    );\n                })}\n            </Accordion>\n        </VStack>\n    );\n}\n\nexport default ArbeidsForholdListe;\n","import { Box, ExpansionCard, UNSAFE_Combobox, VStack } from '@navikt/ds-react';\nimport { atom, useAtom, useAtomValue } from 'jotai';\nimport { atomWithReset } from 'jotai/utils';\nimport { xor } from 'lodash';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport DateRangeSelector, { getPeriodFromOption } from 'src/components/DateFilters/DatePeriodSelector';\nimport { type DateRange, PeriodType } from 'src/components/DateFilters/types';\nimport { YtelseVedtakYtelseType } from 'src/generated/modiapersonoversikt-api';\nimport { twMerge } from 'tailwind-merge';\n\nexport type YtelseFilter = {\n    dateRange: DateRange;\n    ytelseTyper: string[];\n};\n\nconst defaultDate = getPeriodFromOption(PeriodType.CUSTOM);\n\nexport const ytelseFilterAtom = atomWithReset<YtelseFilter>({\n    dateRange: defaultDate,\n    ytelseTyper: []\n});\n\nconst filterYtelseTypeAtom = atom(\n    (get) => get(ytelseFilterAtom).ytelseTyper,\n    (_get, set, newVal: string) => {\n        set(ytelseFilterAtom, (filters) => ({\n            ...filters,\n            ytelseTyper: filters.ytelseTyper ? xor(filters.ytelseTyper, [newVal]) : [newVal]\n        }));\n    }\n);\n\nconst filterDateRangeAtom = atom(\n    (get) => get(ytelseFilterAtom).dateRange,\n    (_get, set, dateRange: DateRange | null) => {\n        const range = dateRange ?? defaultDate;\n        set(ytelseFilterAtom, (filters) => ({\n            ...filters,\n            dateRange: range\n        }));\n    }\n);\n\nconst DateFilter = () => {\n    const [value, setValue] = useAtom(filterDateRangeAtom);\n    return <DateRangeSelector range={value} onChange={setValue} defaultPeriodType={PeriodType.CUSTOM} />;\n};\n\nconst YtelserTypeFilter = () => {\n    const [selectedYtelseType, setSelectedYtelseType] = useAtom(filterYtelseTypeAtom);\n\n    const onToggleSelected = useCallback(\n        (option: string) => {\n            setSelectedYtelseType(option);\n        },\n        [setSelectedYtelseType]\n    );\n\n    const ytelseTyper = [\n        YtelseVedtakYtelseType.Foreldrepenger,\n        YtelseVedtakYtelseType.Sykepenger,\n        YtelseVedtakYtelseType.Pleiepenger,\n        YtelseVedtakYtelseType.Tiltakspenge,\n        YtelseVedtakYtelseType.Pensjon\n    ];\n\n    return (\n        <UNSAFE_Combobox\n            size=\"small\"\n            label=\"Ytelse\"\n            options={ytelseTyper}\n            isMultiSelect\n            selectedOptions={selectedYtelseType}\n            onToggleSelected={onToggleSelected}\n        />\n    );\n};\n\nconst FilterTitle = () => {\n    const filters = useAtomValue(ytelseFilterAtom);\n\n    const activeFilters = useMemo(() => {\n        let count = 0;\n        if (filters.ytelseTyper && filters.ytelseTyper.length > 0) {\n            count++;\n        }\n        if (filters.dateRange) {\n            count++;\n        }\n\n        return count ? `(${count})` : null;\n    }, [filters]);\n\n    return <>Filter {activeFilters}</>;\n};\n\nexport const YtelserListFilter = () => {\n    const [open, setOpen] = useState(false);\n    const expansionFilterRef = useRef<HTMLDivElement>(null);\n\n    const handleExpansionChange = () => {\n        setTimeout(() => {\n            if (!expansionFilterRef.current) return;\n            setOpen(expansionFilterRef.current.classList.contains('aksel-expansioncard--open'));\n        }, 0);\n    };\n    return (\n        <Box.New marginInline=\"0 2\" className={twMerge(open && 'max-h-full')}>\n            <ExpansionCard\n                onClick={handleExpansionChange}\n                ref={expansionFilterRef}\n                size=\"small\"\n                aria-label=\"Filtrer ytelser\"\n                className={twMerge(open && 'max-h-full overflow-auto')}\n            >\n                <ExpansionCard.Header className=\"p-1\">\n                    <Box.New paddingInline=\"4\">\n                        <ExpansionCard.Title size=\"small\">\n                            <FilterTitle />\n                        </ExpansionCard.Title>\n                    </Box.New>\n                </ExpansionCard.Header>\n                <ExpansionCard.Content className=\"overflow-visible\">\n                    <VStack gap=\"2\">\n                        <Box.New maxWidth=\"17rem\">\n                            <YtelserTypeFilter />\n                        </Box.New>\n                        <Box.New>\n                            <DateFilter />\n                        </Box.New>\n                    </VStack>\n                </ExpansionCard.Content>\n            </ExpansionCard>\n        </Box.New>\n    );\n};\n","import type { UseSuspenseQueryResult } from '@tanstack/react-query';\nimport dayjs from 'dayjs';\nimport { useAtomValue } from 'jotai/index';\nimport { useMemo } from 'react';\nimport { type YtelseFilter, ytelseFilterAtom } from 'src/components/ytelser/List/Filter';\nimport {\n    useArbeidsavklaringspenger,\n    useForeldrepenger,\n    usePensjon,\n    usePleiepenger,\n    useSykepenger,\n    useTiltakspenger\n} from 'src/lib/clients/modiapersonoversikt-api';\nimport {\n    type CommonPeriode,\n    type Foreldrepenger,\n    type PensjonSak,\n    type Pleiepenger,\n    type PleiepengerArbeidsforhold,\n    type PleiepengerPeriode,\n    type PleiepengerVedtak,\n    type Sykepenger,\n    type VedtakDto,\n    type YtelseVedtak,\n    YtelseVedtakYtelseType\n} from 'src/lib/types/modiapersonoversikt-api';\nimport {\n    type Arbeidsavklaringspenger,\n    getUnikArbeidsavklaringspengerKey\n} from 'src/models/ytelse/arbeidsavklaringspenger';\nimport { ascendingDateComparator, backendDatoformat, datoStigende, datoSynkende } from 'src/utils/date-utils';\nimport { formaterDato } from 'src/utils/string-utils';\n\ntype Placeholder = { returnOnForbidden: string; returnOnError: string; returnOnNotFound: string };\n\ninterface Returns {\n    ytelser: YtelseVedtak[];\n    pending: boolean;\n    placeholders: (string | undefined)[];\n    harFeil: boolean;\n}\n\nconst filterYtelser = (ytelser: YtelseVedtak[], filters: YtelseFilter): YtelseVedtak[] => {\n    const { ytelseTyper, dateRange } = filters;\n\n    if (!ytelser || ytelser.length === 0) {\n        return [];\n    }\n\n    let filteredList = ytelser;\n    if (ytelseTyper?.length) {\n        filteredList = filteredList.filter((ytelse) => ytelseTyper.includes(ytelse.ytelseType));\n    }\n\n    if (dateRange?.from && dateRange?.to) {\n        filteredList = filteredList.filter((ytelse) => {\n            const ytelseDato = getYtelseIdDato(ytelse);\n            const dato = dayjs(ytelseDato);\n            return dato.isSameOrAfter(dateRange.from) && dato.isSameOrBefore(dateRange.to);\n        });\n    }\n\n    return filteredList;\n};\n\nexport function getYtelseIdDato(ytelse: YtelseVedtak): string {\n    switch (ytelse.ytelseType) {\n        case YtelseVedtakYtelseType.Foreldrepenger:\n            return getForeldepengerDato(ytelse.ytelseData.data as Foreldrepenger);\n        case YtelseVedtakYtelseType.Sykepenger:\n            return getSykepengerDato(ytelse.ytelseData.data as Sykepenger);\n        case YtelseVedtakYtelseType.Pleiepenger:\n            return getPleiepengerDato(ytelse.ytelseData.data as Pleiepenger);\n        case YtelseVedtakYtelseType.Tiltakspenge:\n            return getTiltakspengerDato(ytelse.ytelseData.data as VedtakDto);\n        case YtelseVedtakYtelseType.Pensjon:\n            return getPensjonDato(ytelse.ytelseData.data as PensjonSak);\n        case YtelseVedtakYtelseType.Arbeidsavklaringspenger:\n            return getArbeidsavklaringspengerDato(ytelse.ytelseData.data as Arbeidsavklaringspenger);\n        default:\n            return '';\n    }\n}\n\nexport function getUnikYtelseKey(ytelse: YtelseVedtak) {\n    switch (ytelse.ytelseType) {\n        case YtelseVedtakYtelseType.Foreldrepenger:\n            return getUnikForeldrepengerKey(ytelse.ytelseData.data as Foreldrepenger);\n        case YtelseVedtakYtelseType.Sykepenger:\n            return getUnikSykepengerKey(ytelse.ytelseData.data as Sykepenger);\n        case YtelseVedtakYtelseType.Pleiepenger:\n            return getUnikPleiepengerKey(ytelse.ytelseData.data as Pleiepenger);\n        case YtelseVedtakYtelseType.Tiltakspenge:\n            return getUnikTiltakspengerKey(ytelse.ytelseData.data as VedtakDto);\n        case YtelseVedtakYtelseType.Pensjon:\n            return getPensjonpengerKey(ytelse.ytelseData.data as PensjonSak);\n        case YtelseVedtakYtelseType.Arbeidsavklaringspenger:\n            return getUnikArbeidsavklaringspengerKey(ytelse.ytelseData.data as Arbeidsavklaringspenger);\n        default:\n            return 'ukjent ytelse';\n    }\n}\n\nfunction getUnikPleiepengerKey(pleiePenger: Pleiepenger): string {\n    return `pleiepenger${getPleiepengerDato(pleiePenger)}`;\n}\n\nfunction getUnikForeldrepengerKey(foreldrepenger: Foreldrepenger): string {\n    return `foreldrepenger${getForeldepengerDato(foreldrepenger)}`;\n}\n\nfunction getUnikSykepengerKey(sykepenger: Sykepenger): string {\n    return `sykepenger${getSykepengerDato(sykepenger)}`;\n}\n\nfunction getUnikTiltakspengerKey(ytelse: VedtakDto) {\n    return `tiltakspenger${ytelse.vedtakId}`;\n}\n\nfunction getPensjonpengerKey(ytelse: PensjonSak) {\n    return `pensjon${ytelse.sakType}${ytelse.sakid}`;\n}\n\nfunction getForeldepengerDato(foreldrepenger: Foreldrepenger) {\n    return foreldrepenger.rettighetFom ?? dayjs().format(backendDatoformat);\n}\n\nfunction getSykepengerDato(sykepenger: Sykepenger) {\n    return sykepenger.sykmeldtFom ?? dayjs().format(backendDatoformat);\n}\n\nfunction getTiltakspengerDato(ytelse: VedtakDto) {\n    return ytelse.periode.fraOgMed ?? dayjs().format(backendDatoformat);\n}\n\nfunction getPleiepengerDato(pleiePenger: Pleiepenger) {\n    const sistePeriodeForPleiepengerettighet = getSistePeriodeForPleiepenger(pleiePenger);\n    return sistePeriodeForPleiepengerettighet?.fom ?? dayjs().format(backendDatoformat);\n}\n\nfunction getPensjonDato(pensjonSak: PensjonSak) {\n    return pensjonSak.fomDato ?? dayjs().format(backendDatoformat);\n}\n\nfunction getArbeidsavklaringspengerDato(arbeidsavklaringspenger: Arbeidsavklaringspenger) {\n    return arbeidsavklaringspenger.periode.fraOgMedDato ?? dayjs().format(backendDatoformat);\n}\n\nfunction getSistePeriodeForPleiepenger(pleiePenger: Pleiepenger) {\n    const perioder = pleiePenger.perioder ?? [];\n    return perioder?.sort(datoStigende((p) => new Date(p.fom ?? 0))).reverse()[0];\n}\n\nexport function fjernEntriesUtenVerdi(obj: {\n    [name: string]: string | number | null | undefined;\n}) {\n    return Object.fromEntries(\n        Object.entries(obj).filter(([_, v]) => v !== null && v !== undefined && !Number.isNaN(v))\n    );\n}\n\nexport function formaterPeriode(periode?: CommonPeriode | null): string | null {\n    if (!periode || !periode.fra) {\n        return null;\n    }\n    return `${formaterDato(periode.fra)} - ${periode.til ? formaterDato(periode.til) : ''}`;\n}\n\nexport function formaterProsent(value?: number | null): string | null {\n    if (!value) {\n        return null;\n    }\n    return `${value}%`;\n}\n\nexport function formaterBoolean(verdi?: boolean | null): string | null {\n    switch (verdi) {\n        case true:\n            return 'Ja';\n        case false:\n            return 'Nei';\n        default:\n            return null;\n    }\n}\n\nexport function getSisteVedtakForPleiepenger(pleiePenger: Pleiepenger): PleiepengerVedtak | undefined {\n    const sistePeriode = getSistePeriodeForPleiepenger(pleiePenger);\n    if (!sistePeriode) {\n        return undefined;\n    }\n    const vedtakter = sistePeriode.vedtak ?? [];\n    return vedtakter.sort(datoStigende((vedtak) => new Date(vedtak.periode?.fom ?? 0))).reverse()[0];\n}\n\nexport function sorterPleiepengerPerioder(pleiePenger: Pleiepenger): PleiepengerPeriode[] {\n    const perioder = pleiePenger.perioder ?? [];\n    return perioder.sort(datoStigende((p) => new Date(p.fom ?? 0))).reverse();\n}\n\nexport function getPleiepengerArbiedsforholdSortert(pleiePenger: Pleiepenger): PleiepengerArbeidsforhold[] {\n    const perioder = pleiePenger.perioder ?? [];\n    const arbeidsforhold = perioder.flatMap((periode) => periode.arbeidsforhold ?? []) ?? [];\n    return sorterArbeidsforholdEtterRefusjonTom(arbeidsforhold);\n}\n\nfunction sorterArbeidsforholdEtterRefusjonTom(\n    arbeidsforhold: PleiepengerArbeidsforhold[]\n): PleiepengerArbeidsforhold[] {\n    return arbeidsforhold.sort(datoStigende((a) => a.refusjonTom || new Date(0))).reverse();\n}\n\nexport function utledFraDatoForForeldrePenger(foreldrepenger: Foreldrepenger): Date {\n    const periode = foreldrepenger.periode ?? [];\n    return periode.map((periode) => new Date(periode.foreldrepengerFom ?? 0)).sort(ascendingDateComparator)[0];\n}\n\nexport function periodeEllerNull(periode?: CommonPeriode | null): string | null {\n    if (!periode || !periode.fra) {\n        return null;\n    }\n    return `${formaterDato(periode.fra)} - ${periode.til ? formaterDato(periode.til) : ''}`;\n}\n\nconst foreldrepengerPlaceholder = {\n    returnOnError: 'Kunne ikke laste foreldrepenger',\n    returnOnNotFound: 'Kunne finne foreldrepenger',\n    returnOnForbidden: 'Du har ikke tilgang til foreldrepenger'\n};\nconst pleiepengerPlaceholder = {\n    returnOnError: 'Kunne ikke laste pleiepenger',\n    returnOnNotFound: 'Kunne finne pleiepenger',\n    returnOnForbidden: 'Du har ikke tilgang til pleiepenger'\n};\nconst sykepengerPlaceholder = {\n    returnOnError: 'Kunne ikke laste sykepenger',\n    returnOnNotFound: 'Kunne finne sykepenger',\n    returnOnForbidden: 'Du har ikke tilgang til sykepenger'\n};\nconst tiltakspengerPlaceholder = {\n    returnOnError: 'Kunne ikke laste tiltakspenger',\n    returnOnNotFound: 'Kunne finne tiltakspenger',\n    returnOnForbidden: 'Du har ikke tilgang til tiltakspenger'\n};\nconst pensjonPlaceholder = {\n    returnOnError: 'Kunne ikke laste pensjon',\n    returnOnNotFound: 'Kunne finne pensjon',\n    returnOnForbidden: 'Du har ikke tilgang til pensjon'\n};\nconst arbeidsavklaringsPengerPlaceholder = {\n    returnOnError: 'Kunne ikke laste arbeidsavklaringspenger',\n    returnOnNotFound: 'Kunne finne arbeidsavklaringspenger',\n    returnOnForbidden: 'Du har ikke tilgang til arbeidsavklaringspenger'\n};\n\nconst placeholder = (resource: UseSuspenseQueryResult, tekster: Placeholder) => {\n    if (!resource?.isError) {\n        return;\n    }\n\n    return tekster.returnOnError;\n};\n\nexport const useFilterYtelser = (): Returns => {\n    const filters = useAtomValue(ytelseFilterAtom);\n    const periode = filters.dateRange;\n    const startDato = periode.from.format('YYYY-MM-DD');\n    const sluttDato = periode.to.format('YYYY-MM-DD');\n    const foreldrepengerResponse = useForeldrepenger(startDato, sluttDato);\n    const pleiepengerResponse = usePleiepenger(startDato, sluttDato);\n    const sykepengerResponse = useSykepenger(startDato, sluttDato);\n    const tiltakspengerResponse = useTiltakspenger(startDato, sluttDato);\n    const pensjonResponse = usePensjon(startDato, sluttDato);\n    const arbeidsavklaringspengerResponse = useArbeidsavklaringspenger(startDato, sluttDato);\n\n    return useMemo(() => {\n        const pending =\n            pleiepengerResponse.isLoading ||\n            foreldrepengerResponse.isLoading ||\n            sykepengerResponse.isLoading ||\n            tiltakspengerResponse.isLoading ||\n            pensjonResponse.isLoading ||\n            arbeidsavklaringspengerResponse.isLoading;\n        const ytelser: YtelseVedtak[] = [];\n        foreldrepengerResponse.data?.foreldrepenger?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Foreldrepenger\n            })\n        );\n        pleiepengerResponse.data?.pleiepenger?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Pleiepenger\n            })\n        );\n        sykepengerResponse.data?.sykepenger?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Sykepenger\n            })\n        );\n        tiltakspengerResponse?.data?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Tiltakspenge\n            })\n        );\n        pensjonResponse.data?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Pensjon\n            })\n        );\n        arbeidsavklaringspengerResponse.data?.map((ytlse) =>\n            ytelser.push({\n                ytelseData: { data: ytlse },\n                ytelseType: YtelseVedtakYtelseType.Arbeidsavklaringspenger\n            })\n        );\n\n        const ytelserSortert = ytelser.sort(datoSynkende((ytelse: YtelseVedtak) => getYtelseIdDato(ytelse)));\n\n        const placeholders = [\n            placeholder(foreldrepengerResponse, foreldrepengerPlaceholder),\n            placeholder(pleiepengerResponse, pleiepengerPlaceholder),\n            placeholder(sykepengerResponse, sykepengerPlaceholder),\n            placeholder(tiltakspengerResponse, tiltakspengerPlaceholder),\n            placeholder(pensjonResponse, pensjonPlaceholder),\n            placeholder(arbeidsavklaringspengerResponse, arbeidsavklaringsPengerPlaceholder)\n        ];\n\n        const harFeil =\n            foreldrepengerResponse.isError ||\n            pleiepengerResponse.isError ||\n            sykepengerResponse.isError ||\n            tiltakspengerResponse.isError ||\n            pensjonResponse.isError ||\n            arbeidsavklaringspengerResponse.isError;\n\n        return {\n            ytelser: filterYtelser(ytelserSortert, filters),\n            pending: pending,\n            placeholders: placeholders.filter(Boolean),\n            harFeil: harFeil\n        };\n    }, [\n        foreldrepengerResponse,\n        pleiepengerResponse,\n        sykepengerResponse,\n        tiltakspengerResponse,\n        pensjonResponse,\n        arbeidsavklaringspengerResponse\n    ]);\n};\n","import { Accordion, Heading, VStack } from '@navikt/ds-react';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport ArbeidsForholdListe from 'src/components/ytelser/Detail/ArbeidsforholdListe';\nimport { fjernEntriesUtenVerdi, periodeEllerNull, utledFraDatoForForeldrePenger } from 'src/components/ytelser/utils';\nimport type { ForeldrepengePeriode, Foreldrepenger } from 'src/generated/modiapersonoversikt-api';\nimport { YtelseVedtakYtelseType } from 'src/generated/modiapersonoversikt-api';\nimport { convertBoolTilJaNei, datoEllerTomString, formaterDato, prosentEllerNull } from 'src/utils/string-utils';\n\nconst omsorgsovertakelseEllerTermin = (foreldrePenger: Foreldrepenger) => {\n    if (foreldrePenger.termin) {\n        return {\n            Termindato: datoEllerTomString(foreldrePenger.termin)\n        };\n    }\n    if (foreldrePenger.omsorgsovertakelse) {\n        return {\n            Omsorgsovertakelse: datoEllerTomString(foreldrePenger.omsorgsovertakelse)\n        };\n    }\n    return {};\n};\n\nconst getForeldrePengerBarnetEntries = (foreldrePenger: Foreldrepenger) => {\n    return {\n        ...omsorgsovertakelseEllerTermin(foreldrePenger),\n        Fødselsdato: datoEllerTomString(foreldrePenger.barnetsFodselsdato),\n        'Annen forelder': foreldrePenger.andreForeldersFnr,\n        'Antall barn': foreldrePenger.antallBarn,\n        ...fjernEntriesUtenVerdi({\n            'Foreldre av samme kjønn': foreldrePenger.foreldreAvSammeKjonn\n        })\n    };\n};\n\nconst getForeldrePengerRettenEntries = (foreldrePenger: Foreldrepenger) => {\n    return {\n        Foreldrepengetype: foreldrePenger.foreldrepengetype,\n        Dekningsgrad: prosentEllerNull(foreldrePenger.dekningsgrad),\n        'Rettighet fra dato': formaterDato(utledFraDatoForForeldrePenger(foreldrePenger)),\n        ...fjernEntriesUtenVerdi({\n            Graderingsdager: foreldrePenger.graderingsdager\n        }),\n        Restdager: foreldrePenger.restDager,\n        Maksdato: foreldrePenger.slutt && formaterDato(foreldrePenger.slutt),\n        Arbeidskategori: foreldrePenger.arbeidskategori,\n        ...fjernEntriesUtenVerdi({\n            'Mødrekvote til og med': datoEllerTomString(foreldrePenger.modrekvoteTom),\n            'Fedrekvote til og med': datoEllerTomString(foreldrePenger.fedrekvoteTom)\n        })\n    };\n};\n\nconst getForeldrePengerPeriodeEntries = (periode: ForeldrepengePeriode) => {\n    return {\n        ...fjernEntriesUtenVerdi({\n            'Arbeidsprosent mor': prosentEllerNull(periode.arbeidsprosentMor),\n            'Mors situasjon': periode.morSituasjon,\n            'Disponibel gradering': prosentEllerNull(periode.disponibelGradering),\n            Forskyvelsesperiode: periodeEllerNull(periode.forskyvelsesperiode1),\n            Forskyvelsesårsak: periode.forskyvelsesaarsak1,\n            'Andre forskyvelsesperiode': periodeEllerNull(periode.forskyvelsesperiode2),\n            'Andre forskyvelsesårsak': periode.forskyvelsesaarsak2\n        }),\n        'Midlertidig stans': periode.midlertidigStansDato,\n        ...fjernEntriesUtenVerdi({\n            Stansårsak: periode.stansaarsak,\n            Avslått: periode.avslaatt\n        }),\n        Mødrekvote: convertBoolTilJaNei(periode.erModrekvote),\n        'Rett til Mødrekvote': periode.rettTilModrekvote,\n        'Aleneomsorg Mor': convertBoolTilJaNei(periode.harAleneomsorgMor),\n        Fedrekvote: convertBoolTilJaNei(periode.erFedrekvote),\n        'Rett til Fedrekvote': periode.rettTilFedrekvote,\n        'Aleneomsorg Far': convertBoolTilJaNei(periode.harAleneomsorgFar)\n    };\n};\n\nconst ForeldrePengerRetten = ({ foreldrePenger }: { foreldrePenger: Foreldrepenger }) => {\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om foreldrepengeretten\n            </Heading>\n            <TitleValuePairsComponent\n                entries={getForeldrePengerRettenEntries(foreldrePenger)}\n                columns={{ xs: 2, lg: 4 }}\n            />\n        </Card>\n    );\n};\n\nconst ForeldrePengerRettenBarnet = ({ foreldrePenger }: { foreldrePenger: Foreldrepenger }) => {\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om barnet\n            </Heading>\n            <TitleValuePairsComponent\n                entries={getForeldrePengerBarnetEntries(foreldrePenger)}\n                columns={{ xs: 2, lg: 4 }}\n            />\n        </Card>\n    );\n};\n\nconst ForeldrepengePerioder = ({ foreldrePenger }: { foreldrePenger: Foreldrepenger }) => {\n    const perioder = foreldrePenger.periode ?? [];\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Perioder\n            </Heading>\n            <Accordion size=\"small\" headingSize=\"xsmall\">\n                {perioder.map((periode, index) => {\n                    return (\n                        <Accordion.Item key={index} defaultOpen>\n                            <Accordion.Header>{`Periode ${index + 1} - ${datoEllerTomString(periode.foreldrepengerFom)}`}</Accordion.Header>\n                            <Accordion.Content>\n                                <TitleValuePairsComponent\n                                    entries={getForeldrePengerPeriodeEntries(periode)}\n                                    columns={{ xs: 2, lg: 4 }}\n                                />\n                            </Accordion.Content>\n                        </Accordion.Item>\n                    );\n                })}\n            </Accordion>\n        </Card>\n    );\n};\n\nconst Arbeidssituasjon = ({ foreldrePenger }: { foreldrePenger: Foreldrepenger }) => {\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Arbeidssituasjon\n            </Heading>\n            <ArbeidsForholdListe\n                arbeidsForholdList={foreldrePenger.arbeidsforhold ?? []}\n                ytelseType={YtelseVedtakYtelseType.Foreldrepenger}\n            />\n        </Card>\n    );\n};\n\nexport const ForeldrePengerDetails = ({ foreldrePenger }: { foreldrePenger: Foreldrepenger }) => {\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"foreldrePengerDetails\">\n                <ForeldrePengerRetten foreldrePenger={foreldrePenger} />\n                <ForeldrePengerRettenBarnet foreldrePenger={foreldrePenger} />\n                <ForeldrepengePerioder foreldrePenger={foreldrePenger} />\n                <Arbeidssituasjon foreldrePenger={foreldrePenger} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Heading, VStack } from '@navikt/ds-react';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport type { PensjonSak } from 'src/generated/modiapersonoversikt-api';\nimport { formaterDato } from 'src/utils/string-utils';\n\nconst PensjonSak = ({ pensjon }: { pensjon: PensjonSak }) => {\n    const entries = {\n        'Fra og med': pensjon.fomDato ? formaterDato(pensjon.fomDato) : '',\n        'Til og med': pensjon.tomDato ? formaterDato(pensjon.tomDato) : '',\n        Type: pensjon.sakType ?? '',\n        Status: pensjon.sakStatus ?? '',\n        Enhet: pensjon.enhetsId ?? ''\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om pensjon\n            </Heading>\n            <TitleValuePairsComponent entries={entries} columns={{ xs: 2, lg: 4 }} />\n        </Card>\n    );\n};\n\nexport const PensjonDetails = ({ pensjon }: { pensjon: PensjonSak }) => {\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"pensjonDetails\">\n                <PensjonSak pensjon={pensjon} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Accordion, Heading, Table, VStack } from '@navikt/ds-react';\nimport type { UseQueryResult } from '@tanstack/react-query';\nimport type { FetchError } from 'src/api/api';\nimport type { Data as Persondata } from 'src/app/personside/visittkort-v2/PersondataDomain';\nimport { Kjonn } from 'src/app/personside/visittkort-v2/PersondataDomain';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport ArbeidsForholdListe from 'src/components/ytelser/Detail/ArbeidsforholdListe';\nimport {\n    getPleiepengerArbiedsforholdSortert,\n    getSisteVedtakForPleiepenger,\n    sorterPleiepengerPerioder\n} from 'src/components/ytelser/utils';\nimport type { Pleiepenger, PleiepengerPeriode } from 'src/generated/modiapersonoversikt-api';\nimport { YtelseVedtakYtelseType } from 'src/generated/modiapersonoversikt-api';\nimport persondataResource from 'src/rest/resources/persondataResource';\nimport { NOKellerNull, datoEllerTomString, prosentEllerNull } from 'src/utils/string-utils';\n\nconst getKjonnString = (kjonn?: Kjonn) => {\n    switch (kjonn) {\n        case Kjonn.M:\n            return 'gutt';\n        case Kjonn.K:\n            return 'jente';\n        case Kjonn.U:\n            return 'ukjent';\n        default:\n            return '';\n    }\n};\n\nconst hentKjonnTilBarn = (persondata: UseQueryResult<Persondata, FetchError>, barnFnr: string): string => {\n    const barn = persondata.data?.person?.forelderBarnRelasjon?.filter((relasjon) => relasjon.ident === barnFnr) ?? [];\n\n    if (barn.isEmpty()) {\n        return '';\n    }\n    const kjonnTilBarn = barn[0].kjonn.firstOrNull()?.kode;\n    return getKjonnString(kjonnTilBarn);\n};\n\nconst getPleiePengerRettenEntries = (pleiePenger: Pleiepenger) => {\n    const gjeldeneVedtak = getSisteVedtakForPleiepenger(pleiePenger);\n    const persondata = persondataResource.useFetch();\n    const kjonn = hentKjonnTilBarn(persondata, pleiePenger.barnet ?? '');\n\n    return {\n        'Fra og med': datoEllerTomString(gjeldeneVedtak?.periode?.fom),\n        'Til og med': datoEllerTomString(gjeldeneVedtak?.periode?.tom),\n        Pleiepengegrad: gjeldeneVedtak ? `${gjeldeneVedtak.pleiepengegrad}%` : '',\n        [`Barnet (${kjonn})`]: pleiePenger.barnet,\n        'Annen forelder': pleiePenger.andreOmsorgsperson\n    };\n};\n\nconst PleiePengerRetten = ({ pleiePenger }: { pleiePenger: Pleiepenger }) => {\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om pleiepengerrettighet\n            </Heading>\n            <TitleValuePairsComponent entries={getPleiePengerRettenEntries(pleiePenger)} columns={4} />\n        </Card>\n    );\n};\n\nconst PleieVedtaker = ({ periode }: { periode: PleiepengerPeriode }) => {\n    const vedtakter = periode.vedtak ?? [];\n    const vedtakEntries = vedtakter.map((vedtak) => ({\n        fom: datoEllerTomString(vedtak.periode?.fom),\n        tom: datoEllerTomString(vedtak.periode?.tom),\n        bruttobelop: NOKellerNull(vedtak.bruttobelop),\n        anvistUtbetaling: datoEllerTomString(vedtak.anvistUtbetaling),\n        dagsats: NOKellerNull(vedtak.dagsats),\n        pleiepengegrad: prosentEllerNull(vedtak.pleiepengegrad)\n    }));\n\n    return (\n        <Table size=\"small\" zebraStripes={true}>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Fra og med\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Til og med\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Bruttobeløp\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Anvist utbetaling\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Dagsats\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Pleiepengegrad\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {vedtakEntries.map((entry, i) => {\n                    return (\n                        <Table.Row key={i + entry.fom}>\n                            <Table.DataCell>{entry.fom}</Table.DataCell>\n                            <Table.DataCell>{entry.tom}</Table.DataCell>\n                            <Table.DataCell>{entry.bruttobelop}</Table.DataCell>\n                            <Table.DataCell>{entry.anvistUtbetaling}</Table.DataCell>\n                            <Table.DataCell>{entry.dagsats}</Table.DataCell>\n                            <Table.DataCell>{entry.pleiepengegrad}</Table.DataCell>\n                        </Table.Row>\n                    );\n                })}\n            </Table.Body>\n        </Table>\n    );\n};\n\nconst PleiePengerPerioder = ({ pleiePenger }: { pleiePenger: Pleiepenger }) => {\n    const sortertePerioder = sorterPleiepengerPerioder(pleiePenger);\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Perioder\n            </Heading>\n            <Accordion size=\"small\" headingSize=\"xsmall\">\n                {sortertePerioder.map((entry, index) => {\n                    return (\n                        <Accordion.Item key={index} defaultOpen>\n                            <Accordion.Header>{`Periode ${index + 1} - ${datoEllerTomString(entry.fom)}`}</Accordion.Header>\n                            <Accordion.Content>\n                                <Heading as=\"h3\" size=\"small\">\n                                    Anviste utbetalinger\n                                </Heading>\n                                <PleieVedtaker periode={entry} />\n                            </Accordion.Content>\n                        </Accordion.Item>\n                    );\n                })}\n            </Accordion>\n        </Card>\n    );\n};\n\nconst Arbeidssituasjon = ({ pleiePenger }: { pleiePenger: Pleiepenger }) => {\n    const arbeidsforhold = getPleiepengerArbiedsforholdSortert(pleiePenger);\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Arbeidssituasjon\n            </Heading>\n            <ArbeidsForholdListe arbeidsForholdList={arbeidsforhold} ytelseType={YtelseVedtakYtelseType.Pleiepenger} />\n        </Card>\n    );\n};\n\nexport const PleiePengerDetails = ({ pleiePenger }: { pleiePenger: Pleiepenger }) => {\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"pleiePengerDetails\">\n                <PleiePengerRetten pleiePenger={pleiePenger} />\n                <PleiePengerPerioder pleiePenger={pleiePenger} />\n                <Arbeidssituasjon pleiePenger={pleiePenger} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Heading, Table, VStack } from '@navikt/ds-react';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport ArbeidsForholdListe from 'src/components/ytelser/Detail/ArbeidsforholdListe';\nimport {\n    fjernEntriesUtenVerdi,\n    formaterBoolean,\n    formaterPeriode,\n    formaterProsent,\n    periodeEllerNull\n} from 'src/components/ytelser/utils';\nimport type { GjeldendeForsikring, Sykepenger, SykmeldingItem } from 'src/generated/modiapersonoversikt-api';\nimport { YtelseVedtakYtelseType } from 'src/generated/modiapersonoversikt-api';\nimport { datoSynkende } from 'src/utils/date-utils';\nimport { NOKellerNull, datoEllerNull } from 'src/utils/string-utils';\n\nconst getForsikringEntries = (forsikring?: GjeldendeForsikring | null) => {\n    if (!forsikring) {\n        return {};\n    }\n    return {\n        Forsikring: NOKellerNull(forsikring.premiegrunnlag),\n        'Gyldig forsikring': formaterBoolean(forsikring.erGyldig),\n        Forsikringsperiode: formaterPeriode(forsikring.forsikret)\n    };\n};\n\nconst getYrkesskadeEntries = (sykeMeldinger?: SykmeldingItem[]) => {\n    if (!sykeMeldinger) {\n        return {};\n    }\n    const sisteSykemelding = sykeMeldinger[0];\n    if (!sisteSykemelding || !sisteSykemelding.gjelderYrkesskade) {\n        return {};\n    }\n    const yrkesSkade = sisteSykemelding.gjelderYrkesskade;\n    return {\n        Yrkesskade: yrkesSkade.yrkesskadeart,\n        Yrkesskadedato: datoEllerNull(yrkesSkade.skadet),\n        Vedtaksdato: datoEllerNull(yrkesSkade.vedtatt)\n    };\n};\n\nconst getSykepengertilfelletEntries = (sykepenger: Sykepenger) => {\n    return {\n        'Sykemeldt fra og med': datoEllerNull(sykepenger.sykmeldtFom),\n        'Forbrukte dager': sykepenger.forbrukteDager,\n        'Untatt aktivitet': sykepenger.unntakAktivitet,\n        'Midlertidig stans': sykepenger.midlertidigStanset,\n        ...fjernEntriesUtenVerdi({\n            Stansårsak: sykepenger.stansaarsak,\n            Sanksjonperiode: formaterPeriode(sykepenger.sanksjon)\n        }),\n        Ferieperioder: formaterPeriode(sykepenger.ferie1),\n        ...fjernEntriesUtenVerdi({\n            Ferieperioder2: formaterPeriode(sykepenger.ferie2)\n        }),\n        ...getForsikringEntries(sykepenger.forsikring),\n        ...getYrkesskadeEntries(sykepenger.sykmeldinger)\n    };\n};\n\nconst Sykepengertilfellet = ({ sykepenger }: { sykepenger: Sykepenger }) => {\n    const sykepengeTilfelletEntries = getSykepengertilfelletEntries(sykepenger);\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Sykepengertilfellet\n            </Heading>\n            <TitleValuePairsComponent entries={sykepengeTilfelletEntries} columns={{ xs: 2, lg: 4 }} />\n        </Card>\n    );\n};\n\nconst Arbeidssituasjon = ({ sykepenger }: { sykepenger: Sykepenger }) => {\n    const arbeidssituasjonEntries = {\n        Arbeidsgiverperiode: formaterBoolean(sykepenger.erArbeidsgiverperiode),\n        Arbeidskategori: sykepenger.arbeidskategori\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Arbeidssituasjon\n            </Heading>\n            <TitleValuePairsComponent entries={arbeidssituasjonEntries} columns={{ xs: 2, lg: 4 }} />\n            <ArbeidsForholdListe\n                arbeidsForholdList={sykepenger.arbeidsforholdListe ?? []}\n                ytelseType={YtelseVedtakYtelseType.Sykepenger}\n            />\n        </Card>\n    );\n};\n\nconst SykemeldingListe = ({ sykmelding }: { sykmelding: SykmeldingItem }) => {\n    const gradAvSykmeldingListe = sykmelding.gradAvSykmeldingListe ?? [];\n    const tableEntries = gradAvSykmeldingListe.map((graderingsElement) => ({\n        period: formaterPeriode(graderingsElement.gradert) || undefined,\n        gradering: formaterProsent(graderingsElement.sykmeldingsgrad) || undefined\n    }));\n    return (\n        <Table size=\"small\" zebraStripes={true}>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Periode\n                    </Table.HeaderCell>\n                    <Table.HeaderCell scope=\"col\" className=\"w-28\">\n                        Gradering\n                    </Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n                {tableEntries.map((entry, i) => {\n                    return (\n                        <Table.Row key={i}>\n                            <Table.DataCell>{entry.period}</Table.DataCell>\n                            <Table.DataCell>{entry.gradering}</Table.DataCell>\n                        </Table.Row>\n                    );\n                })}\n            </Table.Body>\n        </Table>\n    );\n};\n\nconst Sykemelding = ({ sykmelding }: { sykmelding: SykmeldingItem }) => {\n    const sykemeldingEntries = {\n        Periode: periodeEllerNull(sykmelding.sykmeldt),\n        Behandlingsdato: datoEllerNull(sykmelding.behandlet),\n        Sykmelder: sykmelding.sykmelder\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Sykmelding\n            </Heading>\n            <TitleValuePairsComponent entries={sykemeldingEntries} />\n            <SykemeldingListe sykmelding={sykmelding} />\n        </Card>\n    );\n};\n\nexport const SykepengerDetails = ({ sykepenger }: { sykepenger: Sykepenger }) => {\n    const aktuellSykmelding = sykepenger.sykmeldinger?.sort(\n        datoSynkende((sykmelding) => sykmelding.sykmeldt?.til ?? '')\n    )?.[0];\n\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"sykepengerDetails\">\n                <Sykepengertilfellet sykepenger={sykepenger} />\n                {aktuellSykmelding && <Sykemelding sykmelding={aktuellSykmelding} />}\n                <Arbeidssituasjon sykepenger={sykepenger} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Heading, VStack } from '@navikt/ds-react';\nimport Card from 'src/components/Card';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { TitleValuePairsComponent } from 'src/components/ytelser/Detail';\nimport type { BarnetilleggPeriode, VedtakDto } from 'src/generated/modiapersonoversikt-api';\nimport { formaterDato } from 'src/utils/string-utils';\n\nconst TiltaksPengerRetten = ({ tiltaksPenger }: { tiltaksPenger: VedtakDto }) => {\n    const entries = {\n        'Fra og med': formaterDato(tiltaksPenger.periode.fraOgMed),\n        'Til og med': formaterDato(tiltaksPenger.periode.tilOgMed),\n        Kilde: tiltaksPenger.kilde,\n        Rettighet: tiltaksPenger.rettighet\n    };\n\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Om tiltakspenger\n            </Heading>\n            <TitleValuePairsComponent entries={entries} columns={{ xs: 2, lg: 4 }} />\n        </Card>\n    );\n};\n\nconst getBarneTilleggEntries = (barnetilleggPeriode: BarnetilleggPeriode) => {\n    return {\n        'Antall barn': barnetilleggPeriode.antallBarn,\n        Periode: `${formaterDato(barnetilleggPeriode.periode.fraOgMed)} - ${formaterDato(barnetilleggPeriode.periode.tilOgMed)}`\n    };\n};\n\nconst TiltaksPengerBarneTillegg = ({ tiltaksPenger }: { tiltaksPenger: VedtakDto }) => {\n    return (\n        <Card padding=\"4\">\n            <Heading as=\"h4\" size=\"small\">\n                Barnetillegg\n            </Heading>\n            {tiltaksPenger.barnetillegg?.perioder?.map((periode, index) => {\n                return <TitleValuePairsComponent key={index} entries={getBarneTilleggEntries(periode)} />;\n            })}\n        </Card>\n    );\n};\n\nexport const TiltaksPengerDetails = ({ tiltaksPenger }: { tiltaksPenger: VedtakDto }) => {\n    return (\n        <VStack gap=\"2\" minHeight=\"0\">\n            <ErrorBoundary boundaryName=\"tiltaksPengerDetails\">\n                <TiltaksPengerRetten tiltaksPenger={tiltaksPenger} />\n                <TiltaksPengerBarneTillegg tiltaksPenger={tiltaksPenger} />\n            </ErrorBoundary>\n        </VStack>\n    );\n};\n","import { Alert, BodyShort, GuidePanel, HGrid, HStack, Skeleton, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport { useAtomValue } from 'jotai';\nimport { Suspense, useEffect, useRef } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { ArbeidsavklaringspengerDetails } from 'src/components/ytelser/Detail/arbeidsavklaringspenger';\nimport { ForeldrePengerDetails } from 'src/components/ytelser/Detail/foreldrepenger';\nimport { PensjonDetails } from 'src/components/ytelser/Detail/pensjon';\nimport { PleiePengerDetails } from 'src/components/ytelser/Detail/pleiepenger';\nimport { SykepengerDetails } from 'src/components/ytelser/Detail/sykepenger';\nimport { TiltaksPengerDetails } from 'src/components/ytelser/Detail/tiltakspenger';\nimport { ytelseFilterAtom } from 'src/components/ytelser/List/Filter';\nimport { getUnikYtelseKey, useFilterYtelser } from 'src/components/ytelser/utils';\nimport {\n    type Foreldrepenger,\n    type PensjonSak,\n    type Pleiepenger,\n    type Sykepenger,\n    type VedtakDto,\n    YtelseVedtakYtelseType\n} from 'src/generated/modiapersonoversikt-api';\nimport type { Arbeidsavklaringspenger } from 'src/models/ytelse/arbeidsavklaringspenger';\nimport { ytelserRouteMiddleware } from 'src/routes/new/person/ytelser';\n\nconst TitleValuePairComponent = ({ title, value }: { title: string; value: string | number | null | undefined }) => {\n    return (\n        <VStack justify=\"space-between\">\n            <BodyShort size=\"small\" weight=\"semibold\">\n                {title}:\n            </BodyShort>\n            <BodyShort size=\"small\">{value}</BodyShort>\n        </VStack>\n    );\n};\n\nexport const TitleValuePairsComponent = ({\n    entries,\n    columns\n}: {\n    entries: {\n        [name: string]: string | number | null | undefined;\n    };\n    columns?:\n        | string\n        | number\n        | {\n              xs?: string | number;\n              sm?: string | number;\n              md?: string | number;\n              lg?: string | number;\n              xl?: string | number;\n          };\n}) => {\n    const keys = Object.keys(entries);\n    return (\n        <HGrid gap=\"6\" columns={columns ?? 2} className=\"my-2\">\n            {keys.map((key) => {\n                const value = entries[key];\n                return <TitleValuePairComponent key={key} title={key} value={value} />;\n            })}\n        </HGrid>\n    );\n};\n\nconst routeApi = getRouteApi('/new/person/ytelser');\n\nconst YtelseDataDetails = () => {\n    const { ytelser } = useFilterYtelser();\n    const { id } = routeApi.useSearch();\n    const selectedYtelse = ytelser.find((item) => getUnikYtelseKey(item) === id);\n    const filterAtomValue = useAtomValue(ytelseFilterAtom);\n    const prevFilterRef = useRef(ytelseFilterAtom);\n\n    // Fjern ytelseid i URL og cache hvis filteret er endret og ytelsen ikke finnes i filtrerte ytelser\n    useEffect(() => {\n        const filterEndret = JSON.stringify(prevFilterRef.current.init) !== JSON.stringify(filterAtomValue);\n        const ytelseIkkeIListe = !selectedYtelse || !ytelser.includes(selectedYtelse);\n        if (filterEndret && ytelseIkkeIListe) {\n            ytelserRouteMiddleware.clear();\n        }\n    }, [selectedYtelse, ytelser, filterAtomValue]);\n\n    if (ytelser.length === 0) {\n        return (\n            <Alert className=\"mt-6\" variant=\"info\">\n                Fant ingen ytelser\n            </Alert>\n        );\n    }\n\n    if (!id) {\n        return (\n            <HStack margin=\"4\">\n                <GuidePanel>Velg en ytelse fra listen på venstre side for å se detaljer.</GuidePanel>\n            </HStack>\n        );\n    }\n\n    if (!selectedYtelse) {\n        return (\n            <VStack flexGrow=\"1\" minHeight=\"0\" className=\"mt-6\">\n                <Alert variant=\"error\">Ytelsen du valgte, ble ikke funnet.</Alert>\n            </VStack>\n        );\n    }\n\n    switch (selectedYtelse.ytelseType) {\n        case YtelseVedtakYtelseType.Foreldrepenger:\n            return <ForeldrePengerDetails foreldrePenger={selectedYtelse.ytelseData.data as Foreldrepenger} />;\n        case YtelseVedtakYtelseType.Sykepenger:\n            return <SykepengerDetails sykepenger={selectedYtelse.ytelseData.data as Sykepenger} />;\n        case YtelseVedtakYtelseType.Pleiepenger:\n            return <PleiePengerDetails pleiePenger={selectedYtelse.ytelseData.data as Pleiepenger} />;\n        case YtelseVedtakYtelseType.Tiltakspenge:\n            return <TiltaksPengerDetails tiltaksPenger={selectedYtelse.ytelseData.data as VedtakDto} />;\n        case YtelseVedtakYtelseType.Pensjon:\n            return <PensjonDetails pensjon={selectedYtelse.ytelseData.data as PensjonSak} />;\n        case YtelseVedtakYtelseType.Arbeidsavklaringspenger:\n            return <ArbeidsavklaringspengerDetails aap={selectedYtelse.ytelseData.data as Arbeidsavklaringspenger} />;\n        default:\n            return <Alert variant=\"info\">Ukjent ytelse type {selectedYtelse.ytelseType}</Alert>;\n    }\n};\n\nexport const ValgteYtelseDetailPage = () => {\n    return (\n        <ErrorBoundary boundaryName=\"valgteYtelseDetailPage\">\n            <Suspense fallback={<Skeleton variant=\"rounded\" height=\"200\" />}>\n                <VStack flexGrow=\"1\" minHeight=\"0\" maxHeight=\"100%\" className=\"overflow-scroll\">\n                    <YtelseDataDetails />\n                </VStack>\n            </Suspense>\n        </ErrorBoundary>\n    );\n};\n"],"names":["Arbeidsavklaringspenger","t0","$","_c","aap","t1","vedtaksdato","formaterDato","t2","periode","fraOgMedDato","t3","tilOgMedDato","t4","rettighetsType","t5","status","t6","kildesystem","t7","dagsats","t8","opphorsAarsak","Opphørsårsak","t9","vedtakId","VedtaksId","Vedtaksdato","Rettighet","Status","Kilde","Dagsats","entries","t10","Symbol","for","Heading","t11","xs","lg","t12","jsxs","Card","jsx","TitleValuePairsComponent","BarneTillegg","barnMedStonad","Barnetillegg","barnetillegg","ArbeidsavklaringspengerDetails","VStack","ErrorBoundary","ArbeidsForholdListe","arbeidsForholdList","ytelseType","length","Alert","getPleiepengerArbeidsforholdEntries","_temp","getArbeidsforholdEntries","_temp2","arbeidsforhold_0","YtelseVedtakYtelseType","Foreldrepenger","arbeidsforhold","Sykepenger","Pleiepenger","Tiltakspenge","Pensjon","getArbeidsForholdEntries","arbeidsForhold","index","Accordion","arbeidsgiverNavn","map","Arbeidsgiver","Kontonummer","arbeidsgiverKontonr","FormatertKontonummer","Inntekstsperiode","inntektsperiode","NOKellerNull","inntektForPerioden","Refusjonstype","refusjonstype","datoEllerNull","refusjonTom","sykepengerFom","pleiepengerArbeidsforhold","Arbeidskategori","arbeidskategori","defaultDate","getPeriodFromOption","PeriodType","CUSTOM","ytelseFilterAtom","atomWithReset","dateRange","ytelseTyper","filterYtelseTypeAtom","atom","get","_get","set","newVal","filters","xor","filterDateRangeAtom","range","DateFilter","value","setValue","useAtom","DateRangeSelector","YtelserTypeFilter","selectedYtelseType","setSelectedYtelseType","option","onToggleSelected","UNSAFE_Combobox","FilterTitle","useAtomValue","count","activeFilters","Fragment","YtelserListFilter","open","setOpen","useState","expansionFilterRef","useRef","setTimeout","current","classList","contains","handleExpansionChange","twMerge","ExpansionCard","Box","filterYtelser","ytelser","filteredList","filter","ytelse","includes","from","to","ytelseDato","getYtelseIdDato","dato","dayjs","isSameOrAfter","isSameOrBefore","getForeldepengerDato","ytelseData","data","getSykepengerDato","getPleiepengerDato","getTiltakspengerDato","getPensjonDato","getArbeidsavklaringspengerDato","getUnikYtelseKey","getUnikForeldrepengerKey","getUnikSykepengerKey","getUnikPleiepengerKey","getUnikTiltakspengerKey","getPensjonpengerKey","getUnikArbeidsavklaringspengerKey","pleiePenger","foreldrepenger","sykepenger","sakType","sakid","rettighetFom","format","backendDatoformat","sykmeldtFom","fraOgMed","getSistePeriodeForPleiepenger","fom","pensjonSak","fomDato","arbeidsavklaringspenger","perioder","sort","datoStigende","p","Date","reverse","fjernEntriesUtenVerdi","obj","Object","fromEntries","_","v","Number","isNaN","formaterPeriode","fra","til","formaterProsent","formaterBoolean","verdi","getSisteVedtakForPleiepenger","sistePeriode","vedtak","sorterPleiepengerPerioder","getPleiepengerArbiedsforholdSortert","flatMap","sorterArbeidsforholdEtterRefusjonTom","a","utledFraDatoForForeldrePenger","foreldrepengerFom","ascendingDateComparator","periodeEllerNull","foreldrepengerPlaceholder","returnOnError","pleiepengerPlaceholder","sykepengerPlaceholder","tiltakspengerPlaceholder","pensjonPlaceholder","arbeidsavklaringsPengerPlaceholder","placeholder","resource","tekster","isError","useFilterYtelser","startDato","sluttDato","foreldrepengerResponse","useForeldrepenger","pleiepengerResponse","usePleiepenger","sykepengerResponse","useSykepenger","tiltakspengerResponse","useTiltakspenger","pensjonResponse","usePensjon","arbeidsavklaringspengerResponse","useArbeidsavklaringspenger","useMemo","pending","isLoading","ytlse","push","pleiepenger","ytelserSortert","datoSynkende","placeholders","harFeil","Boolean","omsorgsovertakelseEllerTermin","foreldrePenger","termin","Termindato","datoEllerTomString","omsorgsovertakelse","Omsorgsovertakelse","getForeldrePengerBarnetEntries","Fødselsdato","barnetsFodselsdato","andreForeldersFnr","antallBarn","foreldreAvSammeKjonn","getForeldrePengerRettenEntries","Foreldrepengetype","foreldrepengetype","Dekningsgrad","prosentEllerNull","dekningsgrad","Graderingsdager","graderingsdager","Restdager","restDager","Maksdato","slutt","modrekvoteTom","fedrekvoteTom","getForeldrePengerPeriodeEntries","arbeidsprosentMor","morSituasjon","disponibelGradering","Forskyvelsesperiode","forskyvelsesperiode1","Forskyvelsesårsak","forskyvelsesaarsak1","forskyvelsesperiode2","forskyvelsesaarsak2","midlertidigStansDato","Stansårsak","stansaarsak","Avslått","avslaatt","Mødrekvote","convertBoolTilJaNei","erModrekvote","rettTilModrekvote","harAleneomsorgMor","Fedrekvote","erFedrekvote","rettTilFedrekvote","harAleneomsorgFar","ForeldrePengerRetten","ForeldrePengerRettenBarnet","ForeldrepengePerioder","Arbeidssituasjon","ForeldrePengerDetails","PensjonSak","pensjon","tomDato","sakStatus","enhetsId","Type","Enhet","PensjonDetails","getKjonnString","kjonn","Kjonn","M","K","U","hentKjonnTilBarn","persondata","barnFnr","barn","person","forelderBarnRelasjon","relasjon","ident","isEmpty","kjonnTilBarn","firstOrNull","kode","getPleiePengerRettenEntries","gjeldeneVedtak","persondataResource","useFetch","barnet","tom","Pleiepengegrad","pleiepengegrad","andreOmsorgsperson","PleiePengerRetten","PleieVedtaker","vedtakter","T0","T1","vedtakEntries","Table","Body","PleiePengerPerioder","sortertePerioder","_temp3","PleiePengerDetails","bruttobelop","anvistUtbetaling","entry","i","getForsikringEntries","forsikring","Forsikring","premiegrunnlag","erGyldig","Forsikringsperiode","forsikret","getYrkesskadeEntries","sykeMeldinger","sisteSykemelding","gjelderYrkesskade","yrkesSkade","Yrkesskade","yrkesskadeart","Yrkesskadedato","skadet","vedtatt","getSykepengertilfelletEntries","forbrukteDager","unntakAktivitet","midlertidigStanset","Sanksjonperiode","sanksjon","Ferieperioder","ferie1","Ferieperioder2","ferie2","sykmeldinger","Sykepengertilfellet","sykepengeTilfelletEntries","erArbeidsgiverperiode","Arbeidsgiverperiode","arbeidssituasjonEntries","arbeidsforholdListe","SykemeldingListe","sykmelding","gradAvSykmeldingListe","tableEntries","Sykemelding","sykmeldt","behandlet","sykmelder","Periode","Behandlingsdato","Sykmelder","sykemeldingEntries","SykepengerDetails","aktuellSykmelding","graderingsElement","period","gradert","undefined","gradering","sykmeldingsgrad","TiltaksPengerRetten","tiltaksPenger","tilOgMed","kilde","rettighet","getBarneTilleggEntries","barnetilleggPeriode","TiltaksPengerBarneTillegg","TiltaksPengerDetails","TitleValuePairComponent","title","BodyShort","columns","keys","key","HGrid","routeApi","getRouteApi","YtelseDataDetails","id","useSearch","item","find","selectedYtelse","filterAtomValue","prevFilterRef","filterEndret","JSON","stringify","init","ytelseIkkeIListe","ytelserRouteMiddleware","clear","useEffect","HStack","GuidePanel","ValgteYtelseDetailPage","Skeleton","Suspense"],"mappings":"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"}