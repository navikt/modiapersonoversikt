{"version":3,"file":"meldinger.lazy-xZQyKqCD.js","sources":["../../src/components/Meldinger/List/TraadItem.tsx","../../src/components/Meldinger/List/index.tsx","../../src/components/Meldinger/index.tsx","../../src/routes/new/person/meldinger.lazy.tsx"],"sourcesContent":["import { ChevronRightIcon } from '@navikt/aksel-icons';\nimport { BodyShort, Box, Button, HStack, Heading, Tag, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport { atom, useAtomValue } from 'jotai';\nimport { useMemo } from 'react';\nimport Card from 'src/components/Card';\nimport type { TraadDto } from 'src/generated/modiapersonoversikt-api';\nimport { usePersonOppgaver } from 'src/lib/clients/modiapersonoversikt-api';\nimport { usePersonAtomValue } from 'src/lib/state/context';\nimport { dialogUnderArbeidAtom } from 'src/lib/state/dialog';\nimport type { Melding } from 'src/lib/types/modiapersonoversikt-api';\nimport { Temagruppe, temagruppeTekst } from 'src/lib/types/temagruppe';\nimport { twMerge } from 'tailwind-merge';\nimport { erFeilsendt, getFormattertMeldingsDato, nyesteMelding, traadstittel } from './utils';\n\nfunction TildeltSaksbehandler({ traadId }: { traadId: string }) {\n    const oppgaver = usePersonOppgaver();\n    const fnr = usePersonAtomValue();\n    const tildeltTilBruker = oppgaver.data.filter((oppg) => oppg.fnr === fnr);\n\n    if (tildeltTilBruker.map((oppgave) => oppgave.traadId).includes(traadId)) {\n        return (\n            <Tag size=\"xsmall\" variant=\"info\">\n                Tildelt meg\n            </Tag>\n        );\n    }\n\n    return null;\n}\nfunction UnderArbeid({ traadId }: { traadId: string }) {\n    const isUnderArbeid = useAtomValue(useMemo(() => atom((get) => get(dialogUnderArbeidAtom) === traadId), [traadId]));\n\n    if (isUnderArbeid)\n        return (\n            <Tag size=\"xsmall\" variant=\"info\">\n                Under arbeid\n            </Tag>\n        );\n\n    return null;\n}\n\nfunction Feilsendt({ traad }: { traad: TraadDto }) {\n    if (erFeilsendt(traad)) {\n        return (\n            <Tag size=\"xsmall\" variant=\"warning\">\n                Feilsendt\n            </Tag>\n        );\n    }\n    return null;\n}\n\nfunction Slettet({ melding }: { melding: Melding }) {\n    if (melding.temagruppe === Temagruppe.InnholdSlettet) {\n        return (\n            <Tag size=\"xsmall\" variant=\"error\">\n                Slettet\n            </Tag>\n        );\n    }\n\n    return null;\n}\nconst routeApi = getRouteApi('/new/person/meldinger');\n\nexport const TraadItem = ({\n    traad,\n    handleClick\n}: {\n    traad: TraadDto;\n    handleClick: (traadId: string) => void;\n}) => {\n    const sisteMelding = nyesteMelding(traad);\n    const datoTekst = getFormattertMeldingsDato(sisteMelding);\n    const tittel = traadstittel(traad);\n    const aktivTraad = routeApi.useSearch().traadId;\n\n    return (\n        <Card\n            data-testid=\"traaditem\"\n            padding=\"2\"\n            className={twMerge(\n                'cursor-pointer hover:bg-[var(--ax-bg-neutral-moderate-hover)] group',\n                aktivTraad === traad.traadId && 'bg-ax-bg-neutral-moderate border-ax-border-neutral-strong'\n            )}\n            onClick={() => handleClick(traad.traadId)}\n            as=\"li\"\n        >\n            <HStack justify=\"space-between\" gap=\"2\">\n                <Box.New>\n                    <Heading size=\"xsmall\" as=\"h3\" level=\"3\">\n                        {tittel}\n                    </Heading>\n                    <HStack gap=\"2\">\n                        <BodyShort size=\"small\" weight=\"semibold\">\n                            Tema:\n                        </BodyShort>\n                        <BodyShort size=\"small\">{temagruppeTekst(traad.temagruppe as Temagruppe)}</BodyShort>\n                    </HStack>\n                    <BodyShort size=\"small\" textColor=\"subtle\">\n                        {datoTekst}\n                    </BodyShort>\n                    <HStack gap=\"1\" wrap>\n                        <UnderArbeid traadId={traad.traadId} />\n                        <Feilsendt traad={traad} />\n                        <Slettet melding={sisteMelding} />\n                        <TildeltSaksbehandler traadId={traad.traadId} />\n                    </HStack>\n                </Box.New>\n                <VStack justify=\"center\">\n                    <Button\n                        variant=\"tertiary-neutral\"\n                        size=\"small\"\n                        name=\"Åpne\"\n                        aria-label=\"Åpne\"\n                        icon={\n                            <ChevronRightIcon\n                                aria-hidden\n                                className=\"translate-x-0 group-hover:translate-x-1 transition-transform\"\n                            />\n                        }\n                    />\n                </VStack>\n            </HStack>\n        </Card>\n    );\n};\n","import { Alert, Heading, Skeleton, VStack } from '@navikt/ds-react';\nimport { useNavigate, useSearch } from '@tanstack/react-router';\nimport { useAtomValue } from 'jotai';\nimport { Suspense, useCallback, useMemo } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { PaginatedList } from 'src/components/PaginatedList';\nimport { useMeldinger } from 'src/lib/clients/modiapersonoversikt-api';\nimport { datoSynkende } from 'src/utils/date-utils';\nimport { TraadListFilterCard, meldingerFilterAtom } from './Filter';\nimport { TraadItem } from './TraadItem';\nimport { nyesteMelding, useFilterMeldinger } from './utils';\n\nexport const TraadList = () => (\n    <VStack minHeight=\"0\" gap=\"2\">\n        <TraadListFilterCard />\n        <ErrorBoundary boundaryName=\"MeldingerList\">\n            <Suspense\n                fallback={\n                    <VStack gap=\"2\" marginInline=\"0 2\">\n                        {Array(8)\n                            .keys()\n                            .map((i) => (\n                                <Skeleton key={i} variant=\"rounded\" height={68} />\n                            ))}\n                    </VStack>\n                }\n            >\n                <Traader />\n            </Suspense>\n        </ErrorBoundary>\n    </VStack>\n);\n\nconst Traader = () => {\n    const { data: traader } = useMeldinger();\n    const filters = useAtomValue(meldingerFilterAtom);\n    const sortedTraader = useMemo(\n        () => traader.toSorted(datoSynkende((t) => nyesteMelding(t).opprettetDato)),\n        [traader]\n    );\n    const filteredMeldinger = useFilterMeldinger(sortedTraader, filters);\n    const navigate = useNavigate({ from: '/new/person/meldinger' });\n\n    const handleClick = useCallback(\n        (traadId: string) => {\n            navigate({ search: { traadId } });\n        },\n        [navigate]\n    );\n\n    const traadId = useSearch({\n        from: '/new/person/meldinger',\n        select: (p) => p.traadId\n    });\n\n    if (traader.length === 0) {\n        return <Alert variant=\"info\">Brukeren har ingen dialoger</Alert>;\n    }\n\n    return (\n        <>\n            <Heading className=\"pl-1\" size=\"xsmall\" level=\"2\">\n                {filteredMeldinger.length} {filteredMeldinger.length === 1 ? 'dialog' : 'dialoger'}\n            </Heading>\n            {filteredMeldinger.length > 0 && (\n                <PaginatedList\n                    paginationSrHeading={{\n                        tag: 'h3',\n                        text: 'Trådlistepaginering'\n                    }}\n                    aria-label=\"Tråder\"\n                    as=\"section\"\n                    selectedKey={traadId}\n                    items={filteredMeldinger}\n                    keyExtractor={(item) => item.traadId}\n                    renderItem={({ item }) => <TraadItem traad={item} handleClick={handleClick} />}\n                />\n            )}\n        </>\n    );\n};\n","import { PrinterSmallIcon } from '@navikt/aksel-icons';\nimport { Alert, Button, GuidePanel, HGrid, HStack, Heading, Skeleton, VStack } from '@navikt/ds-react';\nimport { getRouteApi } from '@tanstack/react-router';\nimport { useAtomValue } from 'jotai';\nimport { Suspense, memo, useEffect, useRef } from 'react';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { meldingerFilterAtom } from 'src/components/Meldinger/List/Filter';\nimport { useFilterMeldinger } from 'src/components/Meldinger/List/utils';\nimport { useMeldinger } from 'src/lib/clients/modiapersonoversikt-api';\nimport { meldingerRouteMiddleware } from 'src/routes/new/person/meldinger';\nimport usePrinter from '../Print/usePrinter';\nimport { TraadDetail } from './Detail';\nimport { TraadList } from './List';\nimport MeldingerPrint from './MeldingerPrint';\n\nconst PrintThreads = () => {\n    const printer = usePrinter();\n    const PrinterWrapper = printer.printerWrapper;\n    const { data: traader } = useMeldinger();\n\n    return (\n        <HStack justify=\"end\">\n            <Button variant=\"tertiary\" size=\"xsmall\" icon={<PrinterSmallIcon />} onClick={() => printer.triggerPrint()}>\n                Skriv ut alle\n            </Button>\n            <PrinterWrapper>\n                {traader.map((traad) => (\n                    <MeldingerPrint key={traad.traadId} traad={traad} />\n                ))}\n            </PrinterWrapper>\n        </HStack>\n    );\n};\nconst PrintThreadsMemo = memo(PrintThreads);\n\nexport const MeldingerPage = () => {\n    return (\n        <HGrid gap=\"1\" columns={{ xs: 1, md: 'max-content 1fr' }} overflow={{ xs: 'scroll', md: 'hidden' }}>\n            <VStack height=\"100%\" maxWidth={{ md: '16em' }} overflow={{ md: 'hidden' }}>\n                <ErrorBoundary boundaryName=\"traadlist\">\n                    <Suspense\n                        fallback={\n                            <VStack gap=\"2\" marginInline=\"0 2\">\n                                {Array(8)\n                                    .keys()\n                                    .map((i) => (\n                                        <Skeleton key={i} variant=\"rounded\" height={68} />\n                                    ))}\n                            </VStack>\n                        }\n                    >\n                        <Heading size=\"small\">Dialoger</Heading>\n\n                        <PrintThreadsMemo />\n                    </Suspense>\n                </ErrorBoundary>\n                <TraadList />\n            </VStack>\n            <VStack flexGrow=\"1\" overflowX=\"hidden\" className=\"min-h-100 md:min-h-0\">\n                <VStack overflowY={{ md: 'scroll' }}>\n                    <TraadDetailSection />\n                </VStack>\n            </VStack>\n        </HGrid>\n    );\n};\n\nconst routeApi = getRouteApi('/new/person/meldinger');\n\nconst TraadDetailSection = () => {\n    const { data: traader } = useMeldinger();\n    const { traadId } = routeApi.useSearch();\n    const filters = useAtomValue(meldingerFilterAtom);\n    const filteredMeldinger = useFilterMeldinger(traader, filters);\n    const valgtTraad = filteredMeldinger.find((t) => t.traadId === traadId);\n\n    const prevFilterRef = useRef(meldingerFilterAtom);\n\n    // Fjern traadid i URL og cache kun hvis filteret er endret og tråden ikke finnes i filtrerte tråder\n    useEffect(() => {\n        const filterEndret = JSON.stringify(prevFilterRef.current.init) !== JSON.stringify(filters);\n        const traadIkkeIListe = !valgtTraad || !filteredMeldinger.includes(valgtTraad);\n        if (filterEndret && traadIkkeIListe) {\n            meldingerRouteMiddleware.clear();\n        }\n    }, [valgtTraad, filteredMeldinger, filters]);\n\n    if (filteredMeldinger.length === 0) {\n        return (\n            <Alert variant=\"info\" className=\"mt-6\">\n                Fant ingen dialoger\n            </Alert>\n        );\n    }\n\n    if (!traadId) {\n        return (\n            <HStack margin=\"4\">\n                <GuidePanel>Velg en tråd fra listen på venstre side for å se detaljer.</GuidePanel>\n            </HStack>\n        );\n    }\n\n    if (!valgtTraad) {\n        return (\n            <VStack className=\"mt-6\">\n                <Alert variant=\"error\">Tråden du valgte, ble ikke funnet.</Alert>\n            </VStack>\n        );\n    }\n\n    return <TraadDetail traadId={traadId} />;\n};\n","import { createLazyFileRoute } from '@tanstack/react-router';\nimport { MeldingerPage } from 'src/components/Meldinger';\n\nexport const Route = createLazyFileRoute('/new/person/meldinger')({\n    component: RouteComponent\n});\n\nfunction RouteComponent() {\n    return <MeldingerPage />;\n}\n"],"names":["TildeltSaksbehandler","t0","$","_c","traadId","oppgaver","usePersonOppgaver","fnr","usePersonAtomValue","data","filter","oppg","map","_temp","includes","t1","Symbol","for","Tag","oppgave","UnderArbeid","t2","atom","get","dialogUnderArbeidAtom","useAtomValue","t3","Feilsendt","traad","erFeilsendt","Slettet","melding","temagruppe","Temagruppe","InnholdSlettet","routeApi","getRouteApi","TraadItem","handleClick","sisteMelding","nyesteMelding","getFormattertMeldingsDato","datoTekst","traadstittel","tittel","useSearch","t4","twMerge","t5","t6","Heading","t7","BodyShort","t8","t9","temagruppeTekst","t10","jsxs","HStack","jsx","t11","t12","t13","t14","t15","t16","t17","Box","t18","VStack","Button","ChevronRightIcon","t19","t20","Card","TraadList","TraadListFilterCard","ErrorBoundary","Suspense","Array","keys","i","Skeleton","Traader","traader","useMeldinger","filters","meldingerFilterAtom","toSorted","datoSynkende","filteredMeldinger","useFilterMeldinger","from","navigate","useNavigate","search","select","_temp2","traadId_0","length","Alert","PaginatedList","tag","text","_temp3","item","item_0","t","opprettetDato","p","PrintThreads","printer","usePrinter","PrinterWrapper","printerWrapper","PrinterSmallIcon","triggerPrint","PrintThreadsMemo","memo","MeldingerPage","xs","md","HGrid","TraadDetailSection","find","valgtTraad","prevFilterRef","useRef","filterEndret","JSON","stringify","current","init","traadIkkeIListe","meldingerRouteMiddleware","clear","useEffect","GuidePanel","TraadDetail","MeldingerPrint","Route","createLazyFileRoute","component","RouteComponent"],"mappings":"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"}